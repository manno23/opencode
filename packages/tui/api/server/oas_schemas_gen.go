// Code generated by ogen, DO NOT EDIT.

package server

import (
	"io"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

// Ref: #/components/schemas/AgentPart
type AgentPart struct {
	ID        string             `json:"id"`
	SessionID string             `json:"sessionID"`
	MessageID string             `json:"messageID"`
	Type      string             `json:"type"`
	Name      string             `json:"name"`
	Source    OptAgentPartSource `json:"source"`
}

// GetID returns the value of ID.
func (s *AgentPart) GetID() string {
	return s.ID
}

// GetSessionID returns the value of SessionID.
func (s *AgentPart) GetSessionID() string {
	return s.SessionID
}

// GetMessageID returns the value of MessageID.
func (s *AgentPart) GetMessageID() string {
	return s.MessageID
}

// GetType returns the value of Type.
func (s *AgentPart) GetType() string {
	return s.Type
}

// GetName returns the value of Name.
func (s *AgentPart) GetName() string {
	return s.Name
}

// GetSource returns the value of Source.
func (s *AgentPart) GetSource() OptAgentPartSource {
	return s.Source
}

// SetID sets the value of ID.
func (s *AgentPart) SetID(val string) {
	s.ID = val
}

// SetSessionID sets the value of SessionID.
func (s *AgentPart) SetSessionID(val string) {
	s.SessionID = val
}

// SetMessageID sets the value of MessageID.
func (s *AgentPart) SetMessageID(val string) {
	s.MessageID = val
}

// SetType sets the value of Type.
func (s *AgentPart) SetType(val string) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *AgentPart) SetName(val string) {
	s.Name = val
}

// SetSource sets the value of Source.
func (s *AgentPart) SetSource(val OptAgentPartSource) {
	s.Source = val
}

// Ref: #/components/schemas/AgentPartInput
type AgentPartInput struct {
	ID     OptString               `json:"id"`
	Type   string                  `json:"type"`
	Name   string                  `json:"name"`
	Source OptAgentPartInputSource `json:"source"`
}

// GetID returns the value of ID.
func (s *AgentPartInput) GetID() OptString {
	return s.ID
}

// GetType returns the value of Type.
func (s *AgentPartInput) GetType() string {
	return s.Type
}

// GetName returns the value of Name.
func (s *AgentPartInput) GetName() string {
	return s.Name
}

// GetSource returns the value of Source.
func (s *AgentPartInput) GetSource() OptAgentPartInputSource {
	return s.Source
}

// SetID sets the value of ID.
func (s *AgentPartInput) SetID(val OptString) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *AgentPartInput) SetType(val string) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *AgentPartInput) SetName(val string) {
	s.Name = val
}

// SetSource sets the value of Source.
func (s *AgentPartInput) SetSource(val OptAgentPartInputSource) {
	s.Source = val
}

type AgentPartInputSource struct {
	Value string `json:"value"`
	Start int    `json:"start"`
	End   int    `json:"end"`
}

// GetValue returns the value of Value.
func (s *AgentPartInputSource) GetValue() string {
	return s.Value
}

// GetStart returns the value of Start.
func (s *AgentPartInputSource) GetStart() int {
	return s.Start
}

// GetEnd returns the value of End.
func (s *AgentPartInputSource) GetEnd() int {
	return s.End
}

// SetValue sets the value of Value.
func (s *AgentPartInputSource) SetValue(val string) {
	s.Value = val
}

// SetStart sets the value of Start.
func (s *AgentPartInputSource) SetStart(val int) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *AgentPartInputSource) SetEnd(val int) {
	s.End = val
}

type AgentPartSource struct {
	Value string `json:"value"`
	Start int    `json:"start"`
	End   int    `json:"end"`
}

// GetValue returns the value of Value.
func (s *AgentPartSource) GetValue() string {
	return s.Value
}

// GetStart returns the value of Start.
func (s *AgentPartSource) GetStart() int {
	return s.Start
}

// GetEnd returns the value of End.
func (s *AgentPartSource) GetEnd() int {
	return s.End
}

// SetValue sets the value of Value.
func (s *AgentPartSource) SetValue(val string) {
	s.Value = val
}

// SetStart sets the value of Start.
func (s *AgentPartSource) SetStart(val int) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *AgentPartSource) SetEnd(val int) {
	s.End = val
}

// Ref: #/components/schemas/ApiAuth
type ApiAuth struct {
	Type string `json:"type"`
	Key  string `json:"key"`
}

// GetType returns the value of Type.
func (s *ApiAuth) GetType() string {
	return s.Type
}

// GetKey returns the value of Key.
func (s *ApiAuth) GetKey() string {
	return s.Key
}

// SetType sets the value of Type.
func (s *ApiAuth) SetType(val string) {
	s.Type = val
}

// SetKey sets the value of Key.
func (s *ApiAuth) SetKey(val string) {
	s.Key = val
}

// Ref: #/components/schemas/App
type App struct {
	Hostname string  `json:"hostname"`
	Git      bool    `json:"git"`
	Path     AppPath `json:"path"`
	Time     AppTime `json:"time"`
}

// GetHostname returns the value of Hostname.
func (s *App) GetHostname() string {
	return s.Hostname
}

// GetGit returns the value of Git.
func (s *App) GetGit() bool {
	return s.Git
}

// GetPath returns the value of Path.
func (s *App) GetPath() AppPath {
	return s.Path
}

// GetTime returns the value of Time.
func (s *App) GetTime() AppTime {
	return s.Time
}

// SetHostname sets the value of Hostname.
func (s *App) SetHostname(val string) {
	s.Hostname = val
}

// SetGit sets the value of Git.
func (s *App) SetGit(val bool) {
	s.Git = val
}

// SetPath sets the value of Path.
func (s *App) SetPath(val AppPath) {
	s.Path = val
}

// SetTime sets the value of Time.
func (s *App) SetTime(val AppTime) {
	s.Time = val
}

type AppLogReq struct {
	// Service name for the log entry.
	Service string `json:"service"`
	// Log level.
	Level AppLogReqLevel `json:"level"`
	// Log message.
	Message string `json:"message"`
	// Additional metadata for the log entry.
	Extra OptAppLogReqExtra `json:"extra"`
}

// GetService returns the value of Service.
func (s *AppLogReq) GetService() string {
	return s.Service
}

// GetLevel returns the value of Level.
func (s *AppLogReq) GetLevel() AppLogReqLevel {
	return s.Level
}

// GetMessage returns the value of Message.
func (s *AppLogReq) GetMessage() string {
	return s.Message
}

// GetExtra returns the value of Extra.
func (s *AppLogReq) GetExtra() OptAppLogReqExtra {
	return s.Extra
}

// SetService sets the value of Service.
func (s *AppLogReq) SetService(val string) {
	s.Service = val
}

// SetLevel sets the value of Level.
func (s *AppLogReq) SetLevel(val AppLogReqLevel) {
	s.Level = val
}

// SetMessage sets the value of Message.
func (s *AppLogReq) SetMessage(val string) {
	s.Message = val
}

// SetExtra sets the value of Extra.
func (s *AppLogReq) SetExtra(val OptAppLogReqExtra) {
	s.Extra = val
}

// Additional metadata for the log entry.
type AppLogReqExtra map[string]jx.Raw

func (s *AppLogReqExtra) init() AppLogReqExtra {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Log level.
type AppLogReqLevel string

const (
	AppLogReqLevelDebug AppLogReqLevel = "debug"
	AppLogReqLevelInfo  AppLogReqLevel = "info"
	AppLogReqLevelError AppLogReqLevel = "error"
	AppLogReqLevelWarn  AppLogReqLevel = "warn"
)

// AllValues returns all AppLogReqLevel values.
func (AppLogReqLevel) AllValues() []AppLogReqLevel {
	return []AppLogReqLevel{
		AppLogReqLevelDebug,
		AppLogReqLevelInfo,
		AppLogReqLevelError,
		AppLogReqLevelWarn,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AppLogReqLevel) MarshalText() ([]byte, error) {
	switch s {
	case AppLogReqLevelDebug:
		return []byte(s), nil
	case AppLogReqLevelInfo:
		return []byte(s), nil
	case AppLogReqLevelError:
		return []byte(s), nil
	case AppLogReqLevelWarn:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppLogReqLevel) UnmarshalText(data []byte) error {
	switch AppLogReqLevel(data) {
	case AppLogReqLevelDebug:
		*s = AppLogReqLevelDebug
		return nil
	case AppLogReqLevelInfo:
		*s = AppLogReqLevelInfo
		return nil
	case AppLogReqLevelError:
		*s = AppLogReqLevelError
		return nil
	case AppLogReqLevelWarn:
		*s = AppLogReqLevelWarn
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type AppPath struct {
	Config string `json:"config"`
	Data   string `json:"data"`
	Root   string `json:"root"`
	Cwd    string `json:"cwd"`
	State  string `json:"state"`
}

// GetConfig returns the value of Config.
func (s *AppPath) GetConfig() string {
	return s.Config
}

// GetData returns the value of Data.
func (s *AppPath) GetData() string {
	return s.Data
}

// GetRoot returns the value of Root.
func (s *AppPath) GetRoot() string {
	return s.Root
}

// GetCwd returns the value of Cwd.
func (s *AppPath) GetCwd() string {
	return s.Cwd
}

// GetState returns the value of State.
func (s *AppPath) GetState() string {
	return s.State
}

// SetConfig sets the value of Config.
func (s *AppPath) SetConfig(val string) {
	s.Config = val
}

// SetData sets the value of Data.
func (s *AppPath) SetData(val string) {
	s.Data = val
}

// SetRoot sets the value of Root.
func (s *AppPath) SetRoot(val string) {
	s.Root = val
}

// SetCwd sets the value of Cwd.
func (s *AppPath) SetCwd(val string) {
	s.Cwd = val
}

// SetState sets the value of State.
func (s *AppPath) SetState(val string) {
	s.State = val
}

type AppTime struct {
	Initialized OptFloat64 `json:"initialized"`
}

// GetInitialized returns the value of Initialized.
func (s *AppTime) GetInitialized() OptFloat64 {
	return s.Initialized
}

// SetInitialized sets the value of Initialized.
func (s *AppTime) SetInitialized(val OptFloat64) {
	s.Initialized = val
}

// Ref: #/components/schemas/AssistantMessage
type AssistantMessage struct {
	ID         string                   `json:"id"`
	SessionID  string                   `json:"sessionID"`
	Role       string                   `json:"role"`
	Time       AssistantMessageTime     `json:"time"`
	Error      OptAssistantMessageError `json:"error"`
	System     []string                 `json:"system"`
	ModelID    string                   `json:"modelID"`
	ProviderID string                   `json:"providerID"`
	Mode       string                   `json:"mode"`
	Path       AssistantMessagePath     `json:"path"`
	Summary    OptBool                  `json:"summary"`
	Cost       float64                  `json:"cost"`
	Tokens     AssistantMessageTokens   `json:"tokens"`
}

// GetID returns the value of ID.
func (s *AssistantMessage) GetID() string {
	return s.ID
}

// GetSessionID returns the value of SessionID.
func (s *AssistantMessage) GetSessionID() string {
	return s.SessionID
}

// GetRole returns the value of Role.
func (s *AssistantMessage) GetRole() string {
	return s.Role
}

// GetTime returns the value of Time.
func (s *AssistantMessage) GetTime() AssistantMessageTime {
	return s.Time
}

// GetError returns the value of Error.
func (s *AssistantMessage) GetError() OptAssistantMessageError {
	return s.Error
}

// GetSystem returns the value of System.
func (s *AssistantMessage) GetSystem() []string {
	return s.System
}

// GetModelID returns the value of ModelID.
func (s *AssistantMessage) GetModelID() string {
	return s.ModelID
}

// GetProviderID returns the value of ProviderID.
func (s *AssistantMessage) GetProviderID() string {
	return s.ProviderID
}

// GetMode returns the value of Mode.
func (s *AssistantMessage) GetMode() string {
	return s.Mode
}

// GetPath returns the value of Path.
func (s *AssistantMessage) GetPath() AssistantMessagePath {
	return s.Path
}

// GetSummary returns the value of Summary.
func (s *AssistantMessage) GetSummary() OptBool {
	return s.Summary
}

// GetCost returns the value of Cost.
func (s *AssistantMessage) GetCost() float64 {
	return s.Cost
}

// GetTokens returns the value of Tokens.
func (s *AssistantMessage) GetTokens() AssistantMessageTokens {
	return s.Tokens
}

// SetID sets the value of ID.
func (s *AssistantMessage) SetID(val string) {
	s.ID = val
}

// SetSessionID sets the value of SessionID.
func (s *AssistantMessage) SetSessionID(val string) {
	s.SessionID = val
}

// SetRole sets the value of Role.
func (s *AssistantMessage) SetRole(val string) {
	s.Role = val
}

// SetTime sets the value of Time.
func (s *AssistantMessage) SetTime(val AssistantMessageTime) {
	s.Time = val
}

// SetError sets the value of Error.
func (s *AssistantMessage) SetError(val OptAssistantMessageError) {
	s.Error = val
}

// SetSystem sets the value of System.
func (s *AssistantMessage) SetSystem(val []string) {
	s.System = val
}

// SetModelID sets the value of ModelID.
func (s *AssistantMessage) SetModelID(val string) {
	s.ModelID = val
}

// SetProviderID sets the value of ProviderID.
func (s *AssistantMessage) SetProviderID(val string) {
	s.ProviderID = val
}

// SetMode sets the value of Mode.
func (s *AssistantMessage) SetMode(val string) {
	s.Mode = val
}

// SetPath sets the value of Path.
func (s *AssistantMessage) SetPath(val AssistantMessagePath) {
	s.Path = val
}

// SetSummary sets the value of Summary.
func (s *AssistantMessage) SetSummary(val OptBool) {
	s.Summary = val
}

// SetCost sets the value of Cost.
func (s *AssistantMessage) SetCost(val float64) {
	s.Cost = val
}

// SetTokens sets the value of Tokens.
func (s *AssistantMessage) SetTokens(val AssistantMessageTokens) {
	s.Tokens = val
}

// AssistantMessageError represents sum type.
type AssistantMessageError struct {
	Type                     AssistantMessageErrorType // switch on this field
	ProviderAuthError        ProviderAuthError
	UnknownError             UnknownError
	MessageOutputLengthError MessageOutputLengthError
	MessageAbortedError      MessageAbortedError
}

// AssistantMessageErrorType is oneOf type of AssistantMessageError.
type AssistantMessageErrorType string

// Possible values for AssistantMessageErrorType.
const (
	ProviderAuthErrorAssistantMessageError        AssistantMessageErrorType = "ProviderAuthError"
	UnknownErrorAssistantMessageError             AssistantMessageErrorType = "UnknownError"
	MessageOutputLengthErrorAssistantMessageError AssistantMessageErrorType = "MessageOutputLengthError"
	MessageAbortedErrorAssistantMessageError      AssistantMessageErrorType = "MessageAbortedError"
)

// IsProviderAuthError reports whether AssistantMessageError is ProviderAuthError.
func (s AssistantMessageError) IsProviderAuthError() bool {
	return s.Type == ProviderAuthErrorAssistantMessageError
}

// IsUnknownError reports whether AssistantMessageError is UnknownError.
func (s AssistantMessageError) IsUnknownError() bool {
	return s.Type == UnknownErrorAssistantMessageError
}

// IsMessageOutputLengthError reports whether AssistantMessageError is MessageOutputLengthError.
func (s AssistantMessageError) IsMessageOutputLengthError() bool {
	return s.Type == MessageOutputLengthErrorAssistantMessageError
}

// IsMessageAbortedError reports whether AssistantMessageError is MessageAbortedError.
func (s AssistantMessageError) IsMessageAbortedError() bool {
	return s.Type == MessageAbortedErrorAssistantMessageError
}

// SetProviderAuthError sets AssistantMessageError to ProviderAuthError.
func (s *AssistantMessageError) SetProviderAuthError(v ProviderAuthError) {
	s.Type = ProviderAuthErrorAssistantMessageError
	s.ProviderAuthError = v
}

// GetProviderAuthError returns ProviderAuthError and true boolean if AssistantMessageError is ProviderAuthError.
func (s AssistantMessageError) GetProviderAuthError() (v ProviderAuthError, ok bool) {
	if !s.IsProviderAuthError() {
		return v, false
	}
	return s.ProviderAuthError, true
}

// NewProviderAuthErrorAssistantMessageError returns new AssistantMessageError from ProviderAuthError.
func NewProviderAuthErrorAssistantMessageError(v ProviderAuthError) AssistantMessageError {
	var s AssistantMessageError
	s.SetProviderAuthError(v)
	return s
}

// SetUnknownError sets AssistantMessageError to UnknownError.
func (s *AssistantMessageError) SetUnknownError(v UnknownError) {
	s.Type = UnknownErrorAssistantMessageError
	s.UnknownError = v
}

// GetUnknownError returns UnknownError and true boolean if AssistantMessageError is UnknownError.
func (s AssistantMessageError) GetUnknownError() (v UnknownError, ok bool) {
	if !s.IsUnknownError() {
		return v, false
	}
	return s.UnknownError, true
}

// NewUnknownErrorAssistantMessageError returns new AssistantMessageError from UnknownError.
func NewUnknownErrorAssistantMessageError(v UnknownError) AssistantMessageError {
	var s AssistantMessageError
	s.SetUnknownError(v)
	return s
}

// SetMessageOutputLengthError sets AssistantMessageError to MessageOutputLengthError.
func (s *AssistantMessageError) SetMessageOutputLengthError(v MessageOutputLengthError) {
	s.Type = MessageOutputLengthErrorAssistantMessageError
	s.MessageOutputLengthError = v
}

// GetMessageOutputLengthError returns MessageOutputLengthError and true boolean if AssistantMessageError is MessageOutputLengthError.
func (s AssistantMessageError) GetMessageOutputLengthError() (v MessageOutputLengthError, ok bool) {
	if !s.IsMessageOutputLengthError() {
		return v, false
	}
	return s.MessageOutputLengthError, true
}

// NewMessageOutputLengthErrorAssistantMessageError returns new AssistantMessageError from MessageOutputLengthError.
func NewMessageOutputLengthErrorAssistantMessageError(v MessageOutputLengthError) AssistantMessageError {
	var s AssistantMessageError
	s.SetMessageOutputLengthError(v)
	return s
}

// SetMessageAbortedError sets AssistantMessageError to MessageAbortedError.
func (s *AssistantMessageError) SetMessageAbortedError(v MessageAbortedError) {
	s.Type = MessageAbortedErrorAssistantMessageError
	s.MessageAbortedError = v
}

// GetMessageAbortedError returns MessageAbortedError and true boolean if AssistantMessageError is MessageAbortedError.
func (s AssistantMessageError) GetMessageAbortedError() (v MessageAbortedError, ok bool) {
	if !s.IsMessageAbortedError() {
		return v, false
	}
	return s.MessageAbortedError, true
}

// NewMessageAbortedErrorAssistantMessageError returns new AssistantMessageError from MessageAbortedError.
func NewMessageAbortedErrorAssistantMessageError(v MessageAbortedError) AssistantMessageError {
	var s AssistantMessageError
	s.SetMessageAbortedError(v)
	return s
}

type AssistantMessagePath struct {
	Cwd  string `json:"cwd"`
	Root string `json:"root"`
}

// GetCwd returns the value of Cwd.
func (s *AssistantMessagePath) GetCwd() string {
	return s.Cwd
}

// GetRoot returns the value of Root.
func (s *AssistantMessagePath) GetRoot() string {
	return s.Root
}

// SetCwd sets the value of Cwd.
func (s *AssistantMessagePath) SetCwd(val string) {
	s.Cwd = val
}

// SetRoot sets the value of Root.
func (s *AssistantMessagePath) SetRoot(val string) {
	s.Root = val
}

type AssistantMessageTime struct {
	Created   float64    `json:"created"`
	Completed OptFloat64 `json:"completed"`
}

// GetCreated returns the value of Created.
func (s *AssistantMessageTime) GetCreated() float64 {
	return s.Created
}

// GetCompleted returns the value of Completed.
func (s *AssistantMessageTime) GetCompleted() OptFloat64 {
	return s.Completed
}

// SetCreated sets the value of Created.
func (s *AssistantMessageTime) SetCreated(val float64) {
	s.Created = val
}

// SetCompleted sets the value of Completed.
func (s *AssistantMessageTime) SetCompleted(val OptFloat64) {
	s.Completed = val
}

type AssistantMessageTokens struct {
	Input     float64                     `json:"input"`
	Output    float64                     `json:"output"`
	Reasoning float64                     `json:"reasoning"`
	Cache     AssistantMessageTokensCache `json:"cache"`
}

// GetInput returns the value of Input.
func (s *AssistantMessageTokens) GetInput() float64 {
	return s.Input
}

// GetOutput returns the value of Output.
func (s *AssistantMessageTokens) GetOutput() float64 {
	return s.Output
}

// GetReasoning returns the value of Reasoning.
func (s *AssistantMessageTokens) GetReasoning() float64 {
	return s.Reasoning
}

// GetCache returns the value of Cache.
func (s *AssistantMessageTokens) GetCache() AssistantMessageTokensCache {
	return s.Cache
}

// SetInput sets the value of Input.
func (s *AssistantMessageTokens) SetInput(val float64) {
	s.Input = val
}

// SetOutput sets the value of Output.
func (s *AssistantMessageTokens) SetOutput(val float64) {
	s.Output = val
}

// SetReasoning sets the value of Reasoning.
func (s *AssistantMessageTokens) SetReasoning(val float64) {
	s.Reasoning = val
}

// SetCache sets the value of Cache.
func (s *AssistantMessageTokens) SetCache(val AssistantMessageTokensCache) {
	s.Cache = val
}

type AssistantMessageTokensCache struct {
	Read  float64 `json:"read"`
	Write float64 `json:"write"`
}

// GetRead returns the value of Read.
func (s *AssistantMessageTokensCache) GetRead() float64 {
	return s.Read
}

// GetWrite returns the value of Write.
func (s *AssistantMessageTokensCache) GetWrite() float64 {
	return s.Write
}

// SetRead sets the value of Read.
func (s *AssistantMessageTokensCache) SetRead(val float64) {
	s.Read = val
}

// SetWrite sets the value of Write.
func (s *AssistantMessageTokensCache) SetWrite(val float64) {
	s.Write = val
}

// Ref: #/components/schemas/Auth
// Auth represents sum type.
type Auth struct {
	Type          AuthType // switch on this field
	OAuth         OAuth
	ApiAuth       ApiAuth
	WellKnownAuth WellKnownAuth
}

// AuthType is oneOf type of Auth.
type AuthType string

// Possible values for AuthType.
const (
	OAuthAuth         AuthType = "oauth"
	ApiAuthAuth       AuthType = "api"
	WellKnownAuthAuth AuthType = "wellknown"
)

// IsOAuth reports whether Auth is OAuth.
func (s Auth) IsOAuth() bool { return s.Type == OAuthAuth }

// IsApiAuth reports whether Auth is ApiAuth.
func (s Auth) IsApiAuth() bool { return s.Type == ApiAuthAuth }

// IsWellKnownAuth reports whether Auth is WellKnownAuth.
func (s Auth) IsWellKnownAuth() bool { return s.Type == WellKnownAuthAuth }

// SetOAuth sets Auth to OAuth.
func (s *Auth) SetOAuth(v OAuth) {
	s.Type = OAuthAuth
	s.OAuth = v
}

// GetOAuth returns OAuth and true boolean if Auth is OAuth.
func (s Auth) GetOAuth() (v OAuth, ok bool) {
	if !s.IsOAuth() {
		return v, false
	}
	return s.OAuth, true
}

// NewOAuthAuth returns new Auth from OAuth.
func NewOAuthAuth(v OAuth) Auth {
	var s Auth
	s.SetOAuth(v)
	return s
}

// SetApiAuth sets Auth to ApiAuth.
func (s *Auth) SetApiAuth(v ApiAuth) {
	s.Type = ApiAuthAuth
	s.ApiAuth = v
}

// GetApiAuth returns ApiAuth and true boolean if Auth is ApiAuth.
func (s Auth) GetApiAuth() (v ApiAuth, ok bool) {
	if !s.IsApiAuth() {
		return v, false
	}
	return s.ApiAuth, true
}

// NewApiAuthAuth returns new Auth from ApiAuth.
func NewApiAuthAuth(v ApiAuth) Auth {
	var s Auth
	s.SetApiAuth(v)
	return s
}

// SetWellKnownAuth sets Auth to WellKnownAuth.
func (s *Auth) SetWellKnownAuth(v WellKnownAuth) {
	s.Type = WellKnownAuthAuth
	s.WellKnownAuth = v
}

// GetWellKnownAuth returns WellKnownAuth and true boolean if Auth is WellKnownAuth.
func (s Auth) GetWellKnownAuth() (v WellKnownAuth, ok bool) {
	if !s.IsWellKnownAuth() {
		return v, false
	}
	return s.WellKnownAuth, true
}

// NewWellKnownAuthAuth returns new Auth from WellKnownAuth.
func NewWellKnownAuthAuth(v WellKnownAuth) Auth {
	var s Auth
	s.SetWellKnownAuth(v)
	return s
}

type AuthSetOKApplicationJSON bool

func (*AuthSetOKApplicationJSON) authSetRes() {}

// Ref: #/components/schemas/Command
type Command struct {
	Name        string    `json:"name"`
	Description OptString `json:"description"`
	Agent       OptString `json:"agent"`
	Model       OptString `json:"model"`
	Template    string    `json:"template"`
}

// GetName returns the value of Name.
func (s *Command) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Command) GetDescription() OptString {
	return s.Description
}

// GetAgent returns the value of Agent.
func (s *Command) GetAgent() OptString {
	return s.Agent
}

// GetModel returns the value of Model.
func (s *Command) GetModel() OptString {
	return s.Model
}

// GetTemplate returns the value of Template.
func (s *Command) GetTemplate() string {
	return s.Template
}

// SetName sets the value of Name.
func (s *Command) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Command) SetDescription(val OptString) {
	s.Description = val
}

// SetAgent sets the value of Agent.
func (s *Command) SetAgent(val OptString) {
	s.Agent = val
}

// SetModel sets the value of Model.
func (s *Command) SetModel(val OptString) {
	s.Model = val
}

// SetTemplate sets the value of Template.
func (s *Command) SetTemplate(val string) {
	s.Template = val
}

type ConfigProvidersOK struct {
	Providers []Provider               `json:"providers"`
	Default   ConfigProvidersOKDefault `json:"default"`
}

// GetProviders returns the value of Providers.
func (s *ConfigProvidersOK) GetProviders() []Provider {
	return s.Providers
}

// GetDefault returns the value of Default.
func (s *ConfigProvidersOK) GetDefault() ConfigProvidersOKDefault {
	return s.Default
}

// SetProviders sets the value of Providers.
func (s *ConfigProvidersOK) SetProviders(val []Provider) {
	s.Providers = val
}

// SetDefault sets the value of Default.
func (s *ConfigProvidersOK) SetDefault(val ConfigProvidersOKDefault) {
	s.Default = val
}

type ConfigProvidersOKDefault map[string]string

func (s *ConfigProvidersOKDefault) init() ConfigProvidersOKDefault {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/Error
type Error struct {
	Data ErrorData `json:"data"`
}

// GetData returns the value of Data.
func (s *Error) GetData() ErrorData {
	return s.Data
}

// SetData sets the value of Data.
func (s *Error) SetData(val ErrorData) {
	s.Data = val
}

func (*Error) authSetRes()       {}
func (*Error) sessionCreateRes() {}

type ErrorData map[string]jx.Raw

func (s *ErrorData) init() ErrorData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/Event
type EventSubscribeOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s EventSubscribeOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// Ref: #/components/schemas/File
type File struct {
	Path    string     `json:"path"`
	Added   int        `json:"added"`
	Removed int        `json:"removed"`
	Status  FileStatus `json:"status"`
}

// GetPath returns the value of Path.
func (s *File) GetPath() string {
	return s.Path
}

// GetAdded returns the value of Added.
func (s *File) GetAdded() int {
	return s.Added
}

// GetRemoved returns the value of Removed.
func (s *File) GetRemoved() int {
	return s.Removed
}

// GetStatus returns the value of Status.
func (s *File) GetStatus() FileStatus {
	return s.Status
}

// SetPath sets the value of Path.
func (s *File) SetPath(val string) {
	s.Path = val
}

// SetAdded sets the value of Added.
func (s *File) SetAdded(val int) {
	s.Added = val
}

// SetRemoved sets the value of Removed.
func (s *File) SetRemoved(val int) {
	s.Removed = val
}

// SetStatus sets the value of Status.
func (s *File) SetStatus(val FileStatus) {
	s.Status = val
}

// Ref: #/components/schemas/FilePart
type FilePart struct {
	ID        string            `json:"id"`
	SessionID string            `json:"sessionID"`
	MessageID string            `json:"messageID"`
	Type      string            `json:"type"`
	Mime      string            `json:"mime"`
	Filename  OptString         `json:"filename"`
	URL       string            `json:"url"`
	Source    OptFilePartSource `json:"source"`
}

// GetID returns the value of ID.
func (s *FilePart) GetID() string {
	return s.ID
}

// GetSessionID returns the value of SessionID.
func (s *FilePart) GetSessionID() string {
	return s.SessionID
}

// GetMessageID returns the value of MessageID.
func (s *FilePart) GetMessageID() string {
	return s.MessageID
}

// GetType returns the value of Type.
func (s *FilePart) GetType() string {
	return s.Type
}

// GetMime returns the value of Mime.
func (s *FilePart) GetMime() string {
	return s.Mime
}

// GetFilename returns the value of Filename.
func (s *FilePart) GetFilename() OptString {
	return s.Filename
}

// GetURL returns the value of URL.
func (s *FilePart) GetURL() string {
	return s.URL
}

// GetSource returns the value of Source.
func (s *FilePart) GetSource() OptFilePartSource {
	return s.Source
}

// SetID sets the value of ID.
func (s *FilePart) SetID(val string) {
	s.ID = val
}

// SetSessionID sets the value of SessionID.
func (s *FilePart) SetSessionID(val string) {
	s.SessionID = val
}

// SetMessageID sets the value of MessageID.
func (s *FilePart) SetMessageID(val string) {
	s.MessageID = val
}

// SetType sets the value of Type.
func (s *FilePart) SetType(val string) {
	s.Type = val
}

// SetMime sets the value of Mime.
func (s *FilePart) SetMime(val string) {
	s.Mime = val
}

// SetFilename sets the value of Filename.
func (s *FilePart) SetFilename(val OptString) {
	s.Filename = val
}

// SetURL sets the value of URL.
func (s *FilePart) SetURL(val string) {
	s.URL = val
}

// SetSource sets the value of Source.
func (s *FilePart) SetSource(val OptFilePartSource) {
	s.Source = val
}

// Ref: #/components/schemas/FilePartInput
type FilePartInput struct {
	ID       OptString         `json:"id"`
	Type     string            `json:"type"`
	Mime     string            `json:"mime"`
	Filename OptString         `json:"filename"`
	URL      string            `json:"url"`
	Source   OptFilePartSource `json:"source"`
}

// GetID returns the value of ID.
func (s *FilePartInput) GetID() OptString {
	return s.ID
}

// GetType returns the value of Type.
func (s *FilePartInput) GetType() string {
	return s.Type
}

// GetMime returns the value of Mime.
func (s *FilePartInput) GetMime() string {
	return s.Mime
}

// GetFilename returns the value of Filename.
func (s *FilePartInput) GetFilename() OptString {
	return s.Filename
}

// GetURL returns the value of URL.
func (s *FilePartInput) GetURL() string {
	return s.URL
}

// GetSource returns the value of Source.
func (s *FilePartInput) GetSource() OptFilePartSource {
	return s.Source
}

// SetID sets the value of ID.
func (s *FilePartInput) SetID(val OptString) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *FilePartInput) SetType(val string) {
	s.Type = val
}

// SetMime sets the value of Mime.
func (s *FilePartInput) SetMime(val string) {
	s.Mime = val
}

// SetFilename sets the value of Filename.
func (s *FilePartInput) SetFilename(val OptString) {
	s.Filename = val
}

// SetURL sets the value of URL.
func (s *FilePartInput) SetURL(val string) {
	s.URL = val
}

// SetSource sets the value of Source.
func (s *FilePartInput) SetSource(val OptFilePartSource) {
	s.Source = val
}

// Ref: #/components/schemas/FilePartSource
// FilePartSource represents sum type.
type FilePartSource struct {
	Type         FilePartSourceType // switch on this field
	FileSource   FileSource
	SymbolSource SymbolSource
}

// FilePartSourceType is oneOf type of FilePartSource.
type FilePartSourceType string

// Possible values for FilePartSourceType.
const (
	FileSourceFilePartSource   FilePartSourceType = "file"
	SymbolSourceFilePartSource FilePartSourceType = "symbol"
)

// IsFileSource reports whether FilePartSource is FileSource.
func (s FilePartSource) IsFileSource() bool { return s.Type == FileSourceFilePartSource }

// IsSymbolSource reports whether FilePartSource is SymbolSource.
func (s FilePartSource) IsSymbolSource() bool { return s.Type == SymbolSourceFilePartSource }

// SetFileSource sets FilePartSource to FileSource.
func (s *FilePartSource) SetFileSource(v FileSource) {
	s.Type = FileSourceFilePartSource
	s.FileSource = v
}

// GetFileSource returns FileSource and true boolean if FilePartSource is FileSource.
func (s FilePartSource) GetFileSource() (v FileSource, ok bool) {
	if !s.IsFileSource() {
		return v, false
	}
	return s.FileSource, true
}

// NewFileSourceFilePartSource returns new FilePartSource from FileSource.
func NewFileSourceFilePartSource(v FileSource) FilePartSource {
	var s FilePartSource
	s.SetFileSource(v)
	return s
}

// SetSymbolSource sets FilePartSource to SymbolSource.
func (s *FilePartSource) SetSymbolSource(v SymbolSource) {
	s.Type = SymbolSourceFilePartSource
	s.SymbolSource = v
}

// GetSymbolSource returns SymbolSource and true boolean if FilePartSource is SymbolSource.
func (s FilePartSource) GetSymbolSource() (v SymbolSource, ok bool) {
	if !s.IsSymbolSource() {
		return v, false
	}
	return s.SymbolSource, true
}

// NewSymbolSourceFilePartSource returns new FilePartSource from SymbolSource.
func NewSymbolSourceFilePartSource(v SymbolSource) FilePartSource {
	var s FilePartSource
	s.SetSymbolSource(v)
	return s
}

// Ref: #/components/schemas/FilePartSourceText
type FilePartSourceText struct {
	Value string `json:"value"`
	Start int    `json:"start"`
	End   int    `json:"end"`
}

// GetValue returns the value of Value.
func (s *FilePartSourceText) GetValue() string {
	return s.Value
}

// GetStart returns the value of Start.
func (s *FilePartSourceText) GetStart() int {
	return s.Start
}

// GetEnd returns the value of End.
func (s *FilePartSourceText) GetEnd() int {
	return s.End
}

// SetValue sets the value of Value.
func (s *FilePartSourceText) SetValue(val string) {
	s.Value = val
}

// SetStart sets the value of Start.
func (s *FilePartSourceText) SetStart(val int) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *FilePartSourceText) SetEnd(val int) {
	s.End = val
}

type FileReadOK struct {
	Type    FileReadOKType `json:"type"`
	Content string         `json:"content"`
}

// GetType returns the value of Type.
func (s *FileReadOK) GetType() FileReadOKType {
	return s.Type
}

// GetContent returns the value of Content.
func (s *FileReadOK) GetContent() string {
	return s.Content
}

// SetType sets the value of Type.
func (s *FileReadOK) SetType(val FileReadOKType) {
	s.Type = val
}

// SetContent sets the value of Content.
func (s *FileReadOK) SetContent(val string) {
	s.Content = val
}

type FileReadOKType string

const (
	FileReadOKTypeRaw   FileReadOKType = "raw"
	FileReadOKTypePatch FileReadOKType = "patch"
)

// AllValues returns all FileReadOKType values.
func (FileReadOKType) AllValues() []FileReadOKType {
	return []FileReadOKType{
		FileReadOKTypeRaw,
		FileReadOKTypePatch,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FileReadOKType) MarshalText() ([]byte, error) {
	switch s {
	case FileReadOKTypeRaw:
		return []byte(s), nil
	case FileReadOKTypePatch:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FileReadOKType) UnmarshalText(data []byte) error {
	switch FileReadOKType(data) {
	case FileReadOKTypeRaw:
		*s = FileReadOKTypeRaw
		return nil
	case FileReadOKTypePatch:
		*s = FileReadOKTypePatch
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/FileSource
type FileSource struct {
	Text FilePartSourceText `json:"text"`
	Type string             `json:"type"`
	Path string             `json:"path"`
}

// GetText returns the value of Text.
func (s *FileSource) GetText() FilePartSourceText {
	return s.Text
}

// GetType returns the value of Type.
func (s *FileSource) GetType() string {
	return s.Type
}

// GetPath returns the value of Path.
func (s *FileSource) GetPath() string {
	return s.Path
}

// SetText sets the value of Text.
func (s *FileSource) SetText(val FilePartSourceText) {
	s.Text = val
}

// SetType sets the value of Type.
func (s *FileSource) SetType(val string) {
	s.Type = val
}

// SetPath sets the value of Path.
func (s *FileSource) SetPath(val string) {
	s.Path = val
}

type FileStatus string

const (
	FileStatusAdded    FileStatus = "added"
	FileStatusDeleted  FileStatus = "deleted"
	FileStatusModified FileStatus = "modified"
)

// AllValues returns all FileStatus values.
func (FileStatus) AllValues() []FileStatus {
	return []FileStatus{
		FileStatusAdded,
		FileStatusDeleted,
		FileStatusModified,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FileStatus) MarshalText() ([]byte, error) {
	switch s {
	case FileStatusAdded:
		return []byte(s), nil
	case FileStatusDeleted:
		return []byte(s), nil
	case FileStatusModified:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FileStatus) UnmarshalText(data []byte) error {
	switch FileStatus(data) {
	case FileStatusAdded:
		*s = FileStatusAdded
		return nil
	case FileStatusDeleted:
		*s = FileStatusDeleted
		return nil
	case FileStatusModified:
		*s = FileStatusModified
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type FindTextOKItem struct {
	Path           FindTextOKItemPath             `json:"path"`
	Lines          FindTextOKItemLines            `json:"lines"`
	LineNumber     float64                        `json:"line_number"`
	AbsoluteOffset float64                        `json:"absolute_offset"`
	Submatches     []FindTextOKItemSubmatchesItem `json:"submatches"`
}

// GetPath returns the value of Path.
func (s *FindTextOKItem) GetPath() FindTextOKItemPath {
	return s.Path
}

// GetLines returns the value of Lines.
func (s *FindTextOKItem) GetLines() FindTextOKItemLines {
	return s.Lines
}

// GetLineNumber returns the value of LineNumber.
func (s *FindTextOKItem) GetLineNumber() float64 {
	return s.LineNumber
}

// GetAbsoluteOffset returns the value of AbsoluteOffset.
func (s *FindTextOKItem) GetAbsoluteOffset() float64 {
	return s.AbsoluteOffset
}

// GetSubmatches returns the value of Submatches.
func (s *FindTextOKItem) GetSubmatches() []FindTextOKItemSubmatchesItem {
	return s.Submatches
}

// SetPath sets the value of Path.
func (s *FindTextOKItem) SetPath(val FindTextOKItemPath) {
	s.Path = val
}

// SetLines sets the value of Lines.
func (s *FindTextOKItem) SetLines(val FindTextOKItemLines) {
	s.Lines = val
}

// SetLineNumber sets the value of LineNumber.
func (s *FindTextOKItem) SetLineNumber(val float64) {
	s.LineNumber = val
}

// SetAbsoluteOffset sets the value of AbsoluteOffset.
func (s *FindTextOKItem) SetAbsoluteOffset(val float64) {
	s.AbsoluteOffset = val
}

// SetSubmatches sets the value of Submatches.
func (s *FindTextOKItem) SetSubmatches(val []FindTextOKItemSubmatchesItem) {
	s.Submatches = val
}

type FindTextOKItemLines struct {
	Text string `json:"text"`
}

// GetText returns the value of Text.
func (s *FindTextOKItemLines) GetText() string {
	return s.Text
}

// SetText sets the value of Text.
func (s *FindTextOKItemLines) SetText(val string) {
	s.Text = val
}

type FindTextOKItemPath struct {
	Text string `json:"text"`
}

// GetText returns the value of Text.
func (s *FindTextOKItemPath) GetText() string {
	return s.Text
}

// SetText sets the value of Text.
func (s *FindTextOKItemPath) SetText(val string) {
	s.Text = val
}

type FindTextOKItemSubmatchesItem struct {
	Match FindTextOKItemSubmatchesItemMatch `json:"match"`
	Start float64                           `json:"start"`
	End   float64                           `json:"end"`
}

// GetMatch returns the value of Match.
func (s *FindTextOKItemSubmatchesItem) GetMatch() FindTextOKItemSubmatchesItemMatch {
	return s.Match
}

// GetStart returns the value of Start.
func (s *FindTextOKItemSubmatchesItem) GetStart() float64 {
	return s.Start
}

// GetEnd returns the value of End.
func (s *FindTextOKItemSubmatchesItem) GetEnd() float64 {
	return s.End
}

// SetMatch sets the value of Match.
func (s *FindTextOKItemSubmatchesItem) SetMatch(val FindTextOKItemSubmatchesItemMatch) {
	s.Match = val
}

// SetStart sets the value of Start.
func (s *FindTextOKItemSubmatchesItem) SetStart(val float64) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *FindTextOKItemSubmatchesItem) SetEnd(val float64) {
	s.End = val
}

type FindTextOKItemSubmatchesItemMatch struct {
	Text string `json:"text"`
}

// GetText returns the value of Text.
func (s *FindTextOKItemSubmatchesItemMatch) GetText() string {
	return s.Text
}

// SetText sets the value of Text.
func (s *FindTextOKItemSubmatchesItemMatch) SetText(val string) {
	s.Text = val
}

// Ref: #/components/schemas/Message
// Message represents sum type.
type Message struct {
	Type             MessageType // switch on this field
	UserMessage      UserMessage
	AssistantMessage AssistantMessage
}

// MessageType is oneOf type of Message.
type MessageType string

// Possible values for MessageType.
const (
	UserMessageMessage      MessageType = "user"
	AssistantMessageMessage MessageType = "assistant"
)

// IsUserMessage reports whether Message is UserMessage.
func (s Message) IsUserMessage() bool { return s.Type == UserMessageMessage }

// IsAssistantMessage reports whether Message is AssistantMessage.
func (s Message) IsAssistantMessage() bool { return s.Type == AssistantMessageMessage }

// SetUserMessage sets Message to UserMessage.
func (s *Message) SetUserMessage(v UserMessage) {
	s.Type = UserMessageMessage
	s.UserMessage = v
}

// GetUserMessage returns UserMessage and true boolean if Message is UserMessage.
func (s Message) GetUserMessage() (v UserMessage, ok bool) {
	if !s.IsUserMessage() {
		return v, false
	}
	return s.UserMessage, true
}

// NewUserMessageMessage returns new Message from UserMessage.
func NewUserMessageMessage(v UserMessage) Message {
	var s Message
	s.SetUserMessage(v)
	return s
}

// SetAssistantMessage sets Message to AssistantMessage.
func (s *Message) SetAssistantMessage(v AssistantMessage) {
	s.Type = AssistantMessageMessage
	s.AssistantMessage = v
}

// GetAssistantMessage returns AssistantMessage and true boolean if Message is AssistantMessage.
func (s Message) GetAssistantMessage() (v AssistantMessage, ok bool) {
	if !s.IsAssistantMessage() {
		return v, false
	}
	return s.AssistantMessage, true
}

// NewAssistantMessageMessage returns new Message from AssistantMessage.
func NewAssistantMessageMessage(v AssistantMessage) Message {
	var s Message
	s.SetAssistantMessage(v)
	return s
}

// Ref: #/components/schemas/MessageAbortedError
type MessageAbortedError struct {
	Name string                  `json:"name"`
	Data MessageAbortedErrorData `json:"data"`
}

// GetName returns the value of Name.
func (s *MessageAbortedError) GetName() string {
	return s.Name
}

// GetData returns the value of Data.
func (s *MessageAbortedError) GetData() MessageAbortedErrorData {
	return s.Data
}

// SetName sets the value of Name.
func (s *MessageAbortedError) SetName(val string) {
	s.Name = val
}

// SetData sets the value of Data.
func (s *MessageAbortedError) SetData(val MessageAbortedErrorData) {
	s.Data = val
}

type MessageAbortedErrorData struct{}

// Ref: #/components/schemas/MessageOutputLengthError
type MessageOutputLengthError struct {
	Name string                       `json:"name"`
	Data MessageOutputLengthErrorData `json:"data"`
}

// GetName returns the value of Name.
func (s *MessageOutputLengthError) GetName() string {
	return s.Name
}

// GetData returns the value of Data.
func (s *MessageOutputLengthError) GetData() MessageOutputLengthErrorData {
	return s.Data
}

// SetName sets the value of Name.
func (s *MessageOutputLengthError) SetName(val string) {
	s.Name = val
}

// SetData sets the value of Data.
func (s *MessageOutputLengthError) SetData(val MessageOutputLengthErrorData) {
	s.Data = val
}

type MessageOutputLengthErrorData struct{}

// Ref: #/components/schemas/Model
type Model struct {
	ID          uuid.UUID    `json:"id"`
	Name        string       `json:"name"`
	ReleaseDate string       `json:"release_date"`
	Attachment  bool         `json:"attachment"`
	Reasoning   bool         `json:"reasoning"`
	Temperature bool         `json:"temperature"`
	ToolCall    bool         `json:"tool_call"`
	Cost        ModelCost    `json:"cost"`
	Limit       ModelLimit   `json:"limit"`
	Options     ModelOptions `json:"options"`
	Provider    OptProvider  `json:"provider" valid:"structonly"`
}

// GetID returns the value of ID.
func (s *Model) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *Model) GetName() string {
	return s.Name
}

// GetReleaseDate returns the value of ReleaseDate.
func (s *Model) GetReleaseDate() string {
	return s.ReleaseDate
}

// GetAttachment returns the value of Attachment.
func (s *Model) GetAttachment() bool {
	return s.Attachment
}

// GetReasoning returns the value of Reasoning.
func (s *Model) GetReasoning() bool {
	return s.Reasoning
}

// GetTemperature returns the value of Temperature.
func (s *Model) GetTemperature() bool {
	return s.Temperature
}

// GetToolCall returns the value of ToolCall.
func (s *Model) GetToolCall() bool {
	return s.ToolCall
}

// GetCost returns the value of Cost.
func (s *Model) GetCost() ModelCost {
	return s.Cost
}

// GetLimit returns the value of Limit.
func (s *Model) GetLimit() ModelLimit {
	return s.Limit
}

// GetOptions returns the value of Options.
func (s *Model) GetOptions() ModelOptions {
	return s.Options
}

// GetProvider returns the value of Provider.
func (s *Model) GetProvider() OptProvider {
	return s.Provider
}

// SetID sets the value of ID.
func (s *Model) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Model) SetName(val string) {
	s.Name = val
}

// SetReleaseDate sets the value of ReleaseDate.
func (s *Model) SetReleaseDate(val string) {
	s.ReleaseDate = val
}

// SetAttachment sets the value of Attachment.
func (s *Model) SetAttachment(val bool) {
	s.Attachment = val
}

// SetReasoning sets the value of Reasoning.
func (s *Model) SetReasoning(val bool) {
	s.Reasoning = val
}

// SetTemperature sets the value of Temperature.
func (s *Model) SetTemperature(val bool) {
	s.Temperature = val
}

// SetToolCall sets the value of ToolCall.
func (s *Model) SetToolCall(val bool) {
	s.ToolCall = val
}

// SetCost sets the value of Cost.
func (s *Model) SetCost(val ModelCost) {
	s.Cost = val
}

// SetLimit sets the value of Limit.
func (s *Model) SetLimit(val ModelLimit) {
	s.Limit = val
}

// SetOptions sets the value of Options.
func (s *Model) SetOptions(val ModelOptions) {
	s.Options = val
}

// SetProvider sets the value of Provider.
func (s *Model) SetProvider(val OptProvider) {
	s.Provider = val
}

type ModelCost struct {
	Input      float64    `json:"input"`
	Output     float64    `json:"output"`
	CacheRead  OptFloat64 `json:"cache_read"`
	CacheWrite OptFloat64 `json:"cache_write"`
}

// GetInput returns the value of Input.
func (s *ModelCost) GetInput() float64 {
	return s.Input
}

// GetOutput returns the value of Output.
func (s *ModelCost) GetOutput() float64 {
	return s.Output
}

// GetCacheRead returns the value of CacheRead.
func (s *ModelCost) GetCacheRead() OptFloat64 {
	return s.CacheRead
}

// GetCacheWrite returns the value of CacheWrite.
func (s *ModelCost) GetCacheWrite() OptFloat64 {
	return s.CacheWrite
}

// SetInput sets the value of Input.
func (s *ModelCost) SetInput(val float64) {
	s.Input = val
}

// SetOutput sets the value of Output.
func (s *ModelCost) SetOutput(val float64) {
	s.Output = val
}

// SetCacheRead sets the value of CacheRead.
func (s *ModelCost) SetCacheRead(val OptFloat64) {
	s.CacheRead = val
}

// SetCacheWrite sets the value of CacheWrite.
func (s *ModelCost) SetCacheWrite(val OptFloat64) {
	s.CacheWrite = val
}

type ModelLimit struct {
	Context float64 `json:"context"`
	Output  float64 `json:"output"`
}

// GetContext returns the value of Context.
func (s *ModelLimit) GetContext() float64 {
	return s.Context
}

// GetOutput returns the value of Output.
func (s *ModelLimit) GetOutput() float64 {
	return s.Output
}

// SetContext sets the value of Context.
func (s *ModelLimit) SetContext(val float64) {
	s.Context = val
}

// SetOutput sets the value of Output.
func (s *ModelLimit) SetOutput(val float64) {
	s.Output = val
}

type ModelOptions map[string]jx.Raw

func (s *ModelOptions) init() ModelOptions {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/OAuth
type OAuth struct {
	Type    string  `json:"type"`
	Refresh string  `json:"refresh"`
	Access  string  `json:"access"`
	Expires float64 `json:"expires"`
}

// GetType returns the value of Type.
func (s *OAuth) GetType() string {
	return s.Type
}

// GetRefresh returns the value of Refresh.
func (s *OAuth) GetRefresh() string {
	return s.Refresh
}

// GetAccess returns the value of Access.
func (s *OAuth) GetAccess() string {
	return s.Access
}

// GetExpires returns the value of Expires.
func (s *OAuth) GetExpires() float64 {
	return s.Expires
}

// SetType sets the value of Type.
func (s *OAuth) SetType(val string) {
	s.Type = val
}

// SetRefresh sets the value of Refresh.
func (s *OAuth) SetRefresh(val string) {
	s.Refresh = val
}

// SetAccess sets the value of Access.
func (s *OAuth) SetAccess(val string) {
	s.Access = val
}

// SetExpires sets the value of Expires.
func (s *OAuth) SetExpires(val float64) {
	s.Expires = val
}

// NewOptAgentPartInputSource returns new OptAgentPartInputSource with value set to v.
func NewOptAgentPartInputSource(v AgentPartInputSource) OptAgentPartInputSource {
	return OptAgentPartInputSource{
		Value: v,
		Set:   true,
	}
}

// OptAgentPartInputSource is optional AgentPartInputSource.
type OptAgentPartInputSource struct {
	Value AgentPartInputSource
	Set   bool
}

// IsSet returns true if OptAgentPartInputSource was set.
func (o OptAgentPartInputSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAgentPartInputSource) Reset() {
	var v AgentPartInputSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAgentPartInputSource) SetTo(v AgentPartInputSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAgentPartInputSource) Get() (v AgentPartInputSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAgentPartInputSource) Or(d AgentPartInputSource) AgentPartInputSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAgentPartSource returns new OptAgentPartSource with value set to v.
func NewOptAgentPartSource(v AgentPartSource) OptAgentPartSource {
	return OptAgentPartSource{
		Value: v,
		Set:   true,
	}
}

// OptAgentPartSource is optional AgentPartSource.
type OptAgentPartSource struct {
	Value AgentPartSource
	Set   bool
}

// IsSet returns true if OptAgentPartSource was set.
func (o OptAgentPartSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAgentPartSource) Reset() {
	var v AgentPartSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAgentPartSource) SetTo(v AgentPartSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAgentPartSource) Get() (v AgentPartSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAgentPartSource) Or(d AgentPartSource) AgentPartSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppLogReq returns new OptAppLogReq with value set to v.
func NewOptAppLogReq(v AppLogReq) OptAppLogReq {
	return OptAppLogReq{
		Value: v,
		Set:   true,
	}
}

// OptAppLogReq is optional AppLogReq.
type OptAppLogReq struct {
	Value AppLogReq
	Set   bool
}

// IsSet returns true if OptAppLogReq was set.
func (o OptAppLogReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppLogReq) Reset() {
	var v AppLogReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppLogReq) SetTo(v AppLogReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppLogReq) Get() (v AppLogReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppLogReq) Or(d AppLogReq) AppLogReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppLogReqExtra returns new OptAppLogReqExtra with value set to v.
func NewOptAppLogReqExtra(v AppLogReqExtra) OptAppLogReqExtra {
	return OptAppLogReqExtra{
		Value: v,
		Set:   true,
	}
}

// OptAppLogReqExtra is optional AppLogReqExtra.
type OptAppLogReqExtra struct {
	Value AppLogReqExtra
	Set   bool
}

// IsSet returns true if OptAppLogReqExtra was set.
func (o OptAppLogReqExtra) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppLogReqExtra) Reset() {
	var v AppLogReqExtra
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppLogReqExtra) SetTo(v AppLogReqExtra) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppLogReqExtra) Get() (v AppLogReqExtra, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppLogReqExtra) Or(d AppLogReqExtra) AppLogReqExtra {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAssistantMessageError returns new OptAssistantMessageError with value set to v.
func NewOptAssistantMessageError(v AssistantMessageError) OptAssistantMessageError {
	return OptAssistantMessageError{
		Value: v,
		Set:   true,
	}
}

// OptAssistantMessageError is optional AssistantMessageError.
type OptAssistantMessageError struct {
	Value AssistantMessageError
	Set   bool
}

// IsSet returns true if OptAssistantMessageError was set.
func (o OptAssistantMessageError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAssistantMessageError) Reset() {
	var v AssistantMessageError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAssistantMessageError) SetTo(v AssistantMessageError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAssistantMessageError) Get() (v AssistantMessageError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAssistantMessageError) Or(d AssistantMessageError) AssistantMessageError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuth returns new OptAuth with value set to v.
func NewOptAuth(v Auth) OptAuth {
	return OptAuth{
		Value: v,
		Set:   true,
	}
}

// OptAuth is optional Auth.
type OptAuth struct {
	Value Auth
	Set   bool
}

// IsSet returns true if OptAuth was set.
func (o OptAuth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuth) Reset() {
	var v Auth
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuth) SetTo(v Auth) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuth) Get() (v Auth, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuth) Or(d Auth) Auth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFilePartSource returns new OptFilePartSource with value set to v.
func NewOptFilePartSource(v FilePartSource) OptFilePartSource {
	return OptFilePartSource{
		Value: v,
		Set:   true,
	}
}

// OptFilePartSource is optional FilePartSource.
type OptFilePartSource struct {
	Value FilePartSource
	Set   bool
}

// IsSet returns true if OptFilePartSource was set.
func (o OptFilePartSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFilePartSource) Reset() {
	var v FilePartSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFilePartSource) SetTo(v FilePartSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFilePartSource) Get() (v FilePartSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFilePartSource) Or(d FilePartSource) FilePartSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostSessionByIdPermissionsByPermissionIDReq returns new OptPostSessionByIdPermissionsByPermissionIDReq with value set to v.
func NewOptPostSessionByIdPermissionsByPermissionIDReq(v PostSessionByIdPermissionsByPermissionIDReq) OptPostSessionByIdPermissionsByPermissionIDReq {
	return OptPostSessionByIdPermissionsByPermissionIDReq{
		Value: v,
		Set:   true,
	}
}

// OptPostSessionByIdPermissionsByPermissionIDReq is optional PostSessionByIdPermissionsByPermissionIDReq.
type OptPostSessionByIdPermissionsByPermissionIDReq struct {
	Value PostSessionByIdPermissionsByPermissionIDReq
	Set   bool
}

// IsSet returns true if OptPostSessionByIdPermissionsByPermissionIDReq was set.
func (o OptPostSessionByIdPermissionsByPermissionIDReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostSessionByIdPermissionsByPermissionIDReq) Reset() {
	var v PostSessionByIdPermissionsByPermissionIDReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostSessionByIdPermissionsByPermissionIDReq) SetTo(v PostSessionByIdPermissionsByPermissionIDReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostSessionByIdPermissionsByPermissionIDReq) Get() (v PostSessionByIdPermissionsByPermissionIDReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostSessionByIdPermissionsByPermissionIDReq) Or(d PostSessionByIdPermissionsByPermissionIDReq) PostSessionByIdPermissionsByPermissionIDReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProvider returns new OptProvider with value set to v.
func NewOptProvider(v Provider) OptProvider {
	return OptProvider{
		Value: v,
		Set:   true,
	}
}

// OptProvider is optional Provider.
type OptProvider struct {
	Value Provider
	Set   bool
}

// IsSet returns true if OptProvider was set.
func (o OptProvider) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProvider) Reset() {
	var v Provider
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProvider) SetTo(v Provider) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProvider) Get() (v Provider, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProvider) Or(d Provider) Provider {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReasoningPartMetadata returns new OptReasoningPartMetadata with value set to v.
func NewOptReasoningPartMetadata(v ReasoningPartMetadata) OptReasoningPartMetadata {
	return OptReasoningPartMetadata{
		Value: v,
		Set:   true,
	}
}

// OptReasoningPartMetadata is optional ReasoningPartMetadata.
type OptReasoningPartMetadata struct {
	Value ReasoningPartMetadata
	Set   bool
}

// IsSet returns true if OptReasoningPartMetadata was set.
func (o OptReasoningPartMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReasoningPartMetadata) Reset() {
	var v ReasoningPartMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReasoningPartMetadata) SetTo(v ReasoningPartMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReasoningPartMetadata) Get() (v ReasoningPartMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReasoningPartMetadata) Or(d ReasoningPartMetadata) ReasoningPartMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionChatReq returns new OptSessionChatReq with value set to v.
func NewOptSessionChatReq(v SessionChatReq) OptSessionChatReq {
	return OptSessionChatReq{
		Value: v,
		Set:   true,
	}
}

// OptSessionChatReq is optional SessionChatReq.
type OptSessionChatReq struct {
	Value SessionChatReq
	Set   bool
}

// IsSet returns true if OptSessionChatReq was set.
func (o OptSessionChatReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionChatReq) Reset() {
	var v SessionChatReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionChatReq) SetTo(v SessionChatReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionChatReq) Get() (v SessionChatReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionChatReq) Or(d SessionChatReq) SessionChatReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionChatReqTools returns new OptSessionChatReqTools with value set to v.
func NewOptSessionChatReqTools(v SessionChatReqTools) OptSessionChatReqTools {
	return OptSessionChatReqTools{
		Value: v,
		Set:   true,
	}
}

// OptSessionChatReqTools is optional SessionChatReqTools.
type OptSessionChatReqTools struct {
	Value SessionChatReqTools
	Set   bool
}

// IsSet returns true if OptSessionChatReqTools was set.
func (o OptSessionChatReqTools) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionChatReqTools) Reset() {
	var v SessionChatReqTools
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionChatReqTools) SetTo(v SessionChatReqTools) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionChatReqTools) Get() (v SessionChatReqTools, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionChatReqTools) Or(d SessionChatReqTools) SessionChatReqTools {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionCommandReq returns new OptSessionCommandReq with value set to v.
func NewOptSessionCommandReq(v SessionCommandReq) OptSessionCommandReq {
	return OptSessionCommandReq{
		Value: v,
		Set:   true,
	}
}

// OptSessionCommandReq is optional SessionCommandReq.
type OptSessionCommandReq struct {
	Value SessionCommandReq
	Set   bool
}

// IsSet returns true if OptSessionCommandReq was set.
func (o OptSessionCommandReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionCommandReq) Reset() {
	var v SessionCommandReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionCommandReq) SetTo(v SessionCommandReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionCommandReq) Get() (v SessionCommandReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionCommandReq) Or(d SessionCommandReq) SessionCommandReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionCreateReq returns new OptSessionCreateReq with value set to v.
func NewOptSessionCreateReq(v SessionCreateReq) OptSessionCreateReq {
	return OptSessionCreateReq{
		Value: v,
		Set:   true,
	}
}

// OptSessionCreateReq is optional SessionCreateReq.
type OptSessionCreateReq struct {
	Value SessionCreateReq
	Set   bool
}

// IsSet returns true if OptSessionCreateReq was set.
func (o OptSessionCreateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionCreateReq) Reset() {
	var v SessionCreateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionCreateReq) SetTo(v SessionCreateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionCreateReq) Get() (v SessionCreateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionCreateReq) Or(d SessionCreateReq) SessionCreateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionInitReq returns new OptSessionInitReq with value set to v.
func NewOptSessionInitReq(v SessionInitReq) OptSessionInitReq {
	return OptSessionInitReq{
		Value: v,
		Set:   true,
	}
}

// OptSessionInitReq is optional SessionInitReq.
type OptSessionInitReq struct {
	Value SessionInitReq
	Set   bool
}

// IsSet returns true if OptSessionInitReq was set.
func (o OptSessionInitReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionInitReq) Reset() {
	var v SessionInitReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionInitReq) SetTo(v SessionInitReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionInitReq) Get() (v SessionInitReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionInitReq) Or(d SessionInitReq) SessionInitReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionRevert returns new OptSessionRevert with value set to v.
func NewOptSessionRevert(v SessionRevert) OptSessionRevert {
	return OptSessionRevert{
		Value: v,
		Set:   true,
	}
}

// OptSessionRevert is optional SessionRevert.
type OptSessionRevert struct {
	Value SessionRevert
	Set   bool
}

// IsSet returns true if OptSessionRevert was set.
func (o OptSessionRevert) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionRevert) Reset() {
	var v SessionRevert
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionRevert) SetTo(v SessionRevert) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionRevert) Get() (v SessionRevert, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionRevert) Or(d SessionRevert) SessionRevert {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionRevertReq returns new OptSessionRevertReq with value set to v.
func NewOptSessionRevertReq(v SessionRevertReq) OptSessionRevertReq {
	return OptSessionRevertReq{
		Value: v,
		Set:   true,
	}
}

// OptSessionRevertReq is optional SessionRevertReq.
type OptSessionRevertReq struct {
	Value SessionRevertReq
	Set   bool
}

// IsSet returns true if OptSessionRevertReq was set.
func (o OptSessionRevertReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionRevertReq) Reset() {
	var v SessionRevertReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionRevertReq) SetTo(v SessionRevertReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionRevertReq) Get() (v SessionRevertReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionRevertReq) Or(d SessionRevertReq) SessionRevertReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionShare returns new OptSessionShare with value set to v.
func NewOptSessionShare(v SessionShare) OptSessionShare {
	return OptSessionShare{
		Value: v,
		Set:   true,
	}
}

// OptSessionShare is optional SessionShare.
type OptSessionShare struct {
	Value SessionShare
	Set   bool
}

// IsSet returns true if OptSessionShare was set.
func (o OptSessionShare) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionShare) Reset() {
	var v SessionShare
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionShare) SetTo(v SessionShare) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionShare) Get() (v SessionShare, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionShare) Or(d SessionShare) SessionShare {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionShellReq returns new OptSessionShellReq with value set to v.
func NewOptSessionShellReq(v SessionShellReq) OptSessionShellReq {
	return OptSessionShellReq{
		Value: v,
		Set:   true,
	}
}

// OptSessionShellReq is optional SessionShellReq.
type OptSessionShellReq struct {
	Value SessionShellReq
	Set   bool
}

// IsSet returns true if OptSessionShellReq was set.
func (o OptSessionShellReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionShellReq) Reset() {
	var v SessionShellReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionShellReq) SetTo(v SessionShellReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionShellReq) Get() (v SessionShellReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionShellReq) Or(d SessionShellReq) SessionShellReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionSummarizeReq returns new OptSessionSummarizeReq with value set to v.
func NewOptSessionSummarizeReq(v SessionSummarizeReq) OptSessionSummarizeReq {
	return OptSessionSummarizeReq{
		Value: v,
		Set:   true,
	}
}

// OptSessionSummarizeReq is optional SessionSummarizeReq.
type OptSessionSummarizeReq struct {
	Value SessionSummarizeReq
	Set   bool
}

// IsSet returns true if OptSessionSummarizeReq was set.
func (o OptSessionSummarizeReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionSummarizeReq) Reset() {
	var v SessionSummarizeReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionSummarizeReq) SetTo(v SessionSummarizeReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionSummarizeReq) Get() (v SessionSummarizeReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionSummarizeReq) Or(d SessionSummarizeReq) SessionSummarizeReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionUpdateReq returns new OptSessionUpdateReq with value set to v.
func NewOptSessionUpdateReq(v SessionUpdateReq) OptSessionUpdateReq {
	return OptSessionUpdateReq{
		Value: v,
		Set:   true,
	}
}

// OptSessionUpdateReq is optional SessionUpdateReq.
type OptSessionUpdateReq struct {
	Value SessionUpdateReq
	Set   bool
}

// IsSet returns true if OptSessionUpdateReq was set.
func (o OptSessionUpdateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionUpdateReq) Reset() {
	var v SessionUpdateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionUpdateReq) SetTo(v SessionUpdateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionUpdateReq) Get() (v SessionUpdateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionUpdateReq) Or(d SessionUpdateReq) SessionUpdateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTextPartInputTime returns new OptTextPartInputTime with value set to v.
func NewOptTextPartInputTime(v TextPartInputTime) OptTextPartInputTime {
	return OptTextPartInputTime{
		Value: v,
		Set:   true,
	}
}

// OptTextPartInputTime is optional TextPartInputTime.
type OptTextPartInputTime struct {
	Value TextPartInputTime
	Set   bool
}

// IsSet returns true if OptTextPartInputTime was set.
func (o OptTextPartInputTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTextPartInputTime) Reset() {
	var v TextPartInputTime
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTextPartInputTime) SetTo(v TextPartInputTime) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTextPartInputTime) Get() (v TextPartInputTime, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTextPartInputTime) Or(d TextPartInputTime) TextPartInputTime {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTextPartTime returns new OptTextPartTime with value set to v.
func NewOptTextPartTime(v TextPartTime) OptTextPartTime {
	return OptTextPartTime{
		Value: v,
		Set:   true,
	}
}

// OptTextPartTime is optional TextPartTime.
type OptTextPartTime struct {
	Value TextPartTime
	Set   bool
}

// IsSet returns true if OptTextPartTime was set.
func (o OptTextPartTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTextPartTime) Reset() {
	var v TextPartTime
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTextPartTime) SetTo(v TextPartTime) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTextPartTime) Get() (v TextPartTime, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTextPartTime) Or(d TextPartTime) TextPartTime {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptToolStateErrorMetadata returns new OptToolStateErrorMetadata with value set to v.
func NewOptToolStateErrorMetadata(v ToolStateErrorMetadata) OptToolStateErrorMetadata {
	return OptToolStateErrorMetadata{
		Value: v,
		Set:   true,
	}
}

// OptToolStateErrorMetadata is optional ToolStateErrorMetadata.
type OptToolStateErrorMetadata struct {
	Value ToolStateErrorMetadata
	Set   bool
}

// IsSet returns true if OptToolStateErrorMetadata was set.
func (o OptToolStateErrorMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptToolStateErrorMetadata) Reset() {
	var v ToolStateErrorMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptToolStateErrorMetadata) SetTo(v ToolStateErrorMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptToolStateErrorMetadata) Get() (v ToolStateErrorMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptToolStateErrorMetadata) Or(d ToolStateErrorMetadata) ToolStateErrorMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptToolStateRunningMetadata returns new OptToolStateRunningMetadata with value set to v.
func NewOptToolStateRunningMetadata(v ToolStateRunningMetadata) OptToolStateRunningMetadata {
	return OptToolStateRunningMetadata{
		Value: v,
		Set:   true,
	}
}

// OptToolStateRunningMetadata is optional ToolStateRunningMetadata.
type OptToolStateRunningMetadata struct {
	Value ToolStateRunningMetadata
	Set   bool
}

// IsSet returns true if OptToolStateRunningMetadata was set.
func (o OptToolStateRunningMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptToolStateRunningMetadata) Reset() {
	var v ToolStateRunningMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptToolStateRunningMetadata) SetTo(v ToolStateRunningMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptToolStateRunningMetadata) Get() (v ToolStateRunningMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptToolStateRunningMetadata) Or(d ToolStateRunningMetadata) ToolStateRunningMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTuiAppendPromptReq returns new OptTuiAppendPromptReq with value set to v.
func NewOptTuiAppendPromptReq(v TuiAppendPromptReq) OptTuiAppendPromptReq {
	return OptTuiAppendPromptReq{
		Value: v,
		Set:   true,
	}
}

// OptTuiAppendPromptReq is optional TuiAppendPromptReq.
type OptTuiAppendPromptReq struct {
	Value TuiAppendPromptReq
	Set   bool
}

// IsSet returns true if OptTuiAppendPromptReq was set.
func (o OptTuiAppendPromptReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTuiAppendPromptReq) Reset() {
	var v TuiAppendPromptReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTuiAppendPromptReq) SetTo(v TuiAppendPromptReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTuiAppendPromptReq) Get() (v TuiAppendPromptReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTuiAppendPromptReq) Or(d TuiAppendPromptReq) TuiAppendPromptReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTuiExecuteCommandReq returns new OptTuiExecuteCommandReq with value set to v.
func NewOptTuiExecuteCommandReq(v TuiExecuteCommandReq) OptTuiExecuteCommandReq {
	return OptTuiExecuteCommandReq{
		Value: v,
		Set:   true,
	}
}

// OptTuiExecuteCommandReq is optional TuiExecuteCommandReq.
type OptTuiExecuteCommandReq struct {
	Value TuiExecuteCommandReq
	Set   bool
}

// IsSet returns true if OptTuiExecuteCommandReq was set.
func (o OptTuiExecuteCommandReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTuiExecuteCommandReq) Reset() {
	var v TuiExecuteCommandReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTuiExecuteCommandReq) SetTo(v TuiExecuteCommandReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTuiExecuteCommandReq) Get() (v TuiExecuteCommandReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTuiExecuteCommandReq) Or(d TuiExecuteCommandReq) TuiExecuteCommandReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTuiShowToastReq returns new OptTuiShowToastReq with value set to v.
func NewOptTuiShowToastReq(v TuiShowToastReq) OptTuiShowToastReq {
	return OptTuiShowToastReq{
		Value: v,
		Set:   true,
	}
}

// OptTuiShowToastReq is optional TuiShowToastReq.
type OptTuiShowToastReq struct {
	Value TuiShowToastReq
	Set   bool
}

// IsSet returns true if OptTuiShowToastReq was set.
func (o OptTuiShowToastReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTuiShowToastReq) Reset() {
	var v TuiShowToastReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTuiShowToastReq) SetTo(v TuiShowToastReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTuiShowToastReq) Get() (v TuiShowToastReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTuiShowToastReq) Or(d TuiShowToastReq) TuiShowToastReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Part
// Part represents sum type.
type Part struct {
	Type           PartType // switch on this field
	TextPart       TextPart
	ReasoningPart  ReasoningPart
	FilePart       FilePart
	ToolPart       ToolPart
	StepStartPart  StepStartPart
	StepFinishPart StepFinishPart
	SnapshotPart   SnapshotPart
	PatchPart      PatchPart
	AgentPart      AgentPart
}

// PartType is oneOf type of Part.
type PartType string

// Possible values for PartType.
const (
	TextPartPart       PartType = "text"
	ReasoningPartPart  PartType = "reasoning"
	FilePartPart       PartType = "file"
	ToolPartPart       PartType = "tool"
	StepStartPartPart  PartType = "step-start"
	StepFinishPartPart PartType = "step-finish"
	SnapshotPartPart   PartType = "snapshot"
	PatchPartPart      PartType = "patch"
	AgentPartPart      PartType = "agent"
)

// IsTextPart reports whether Part is TextPart.
func (s Part) IsTextPart() bool { return s.Type == TextPartPart }

// IsReasoningPart reports whether Part is ReasoningPart.
func (s Part) IsReasoningPart() bool { return s.Type == ReasoningPartPart }

// IsFilePart reports whether Part is FilePart.
func (s Part) IsFilePart() bool { return s.Type == FilePartPart }

// IsToolPart reports whether Part is ToolPart.
func (s Part) IsToolPart() bool { return s.Type == ToolPartPart }

// IsStepStartPart reports whether Part is StepStartPart.
func (s Part) IsStepStartPart() bool { return s.Type == StepStartPartPart }

// IsStepFinishPart reports whether Part is StepFinishPart.
func (s Part) IsStepFinishPart() bool { return s.Type == StepFinishPartPart }

// IsSnapshotPart reports whether Part is SnapshotPart.
func (s Part) IsSnapshotPart() bool { return s.Type == SnapshotPartPart }

// IsPatchPart reports whether Part is PatchPart.
func (s Part) IsPatchPart() bool { return s.Type == PatchPartPart }

// IsAgentPart reports whether Part is AgentPart.
func (s Part) IsAgentPart() bool { return s.Type == AgentPartPart }

// SetTextPart sets Part to TextPart.
func (s *Part) SetTextPart(v TextPart) {
	s.Type = TextPartPart
	s.TextPart = v
}

// GetTextPart returns TextPart and true boolean if Part is TextPart.
func (s Part) GetTextPart() (v TextPart, ok bool) {
	if !s.IsTextPart() {
		return v, false
	}
	return s.TextPart, true
}

// NewTextPartPart returns new Part from TextPart.
func NewTextPartPart(v TextPart) Part {
	var s Part
	s.SetTextPart(v)
	return s
}

// SetReasoningPart sets Part to ReasoningPart.
func (s *Part) SetReasoningPart(v ReasoningPart) {
	s.Type = ReasoningPartPart
	s.ReasoningPart = v
}

// GetReasoningPart returns ReasoningPart and true boolean if Part is ReasoningPart.
func (s Part) GetReasoningPart() (v ReasoningPart, ok bool) {
	if !s.IsReasoningPart() {
		return v, false
	}
	return s.ReasoningPart, true
}

// NewReasoningPartPart returns new Part from ReasoningPart.
func NewReasoningPartPart(v ReasoningPart) Part {
	var s Part
	s.SetReasoningPart(v)
	return s
}

// SetFilePart sets Part to FilePart.
func (s *Part) SetFilePart(v FilePart) {
	s.Type = FilePartPart
	s.FilePart = v
}

// GetFilePart returns FilePart and true boolean if Part is FilePart.
func (s Part) GetFilePart() (v FilePart, ok bool) {
	if !s.IsFilePart() {
		return v, false
	}
	return s.FilePart, true
}

// NewFilePartPart returns new Part from FilePart.
func NewFilePartPart(v FilePart) Part {
	var s Part
	s.SetFilePart(v)
	return s
}

// SetToolPart sets Part to ToolPart.
func (s *Part) SetToolPart(v ToolPart) {
	s.Type = ToolPartPart
	s.ToolPart = v
}

// GetToolPart returns ToolPart and true boolean if Part is ToolPart.
func (s Part) GetToolPart() (v ToolPart, ok bool) {
	if !s.IsToolPart() {
		return v, false
	}
	return s.ToolPart, true
}

// NewToolPartPart returns new Part from ToolPart.
func NewToolPartPart(v ToolPart) Part {
	var s Part
	s.SetToolPart(v)
	return s
}

// SetStepStartPart sets Part to StepStartPart.
func (s *Part) SetStepStartPart(v StepStartPart) {
	s.Type = StepStartPartPart
	s.StepStartPart = v
}

// GetStepStartPart returns StepStartPart and true boolean if Part is StepStartPart.
func (s Part) GetStepStartPart() (v StepStartPart, ok bool) {
	if !s.IsStepStartPart() {
		return v, false
	}
	return s.StepStartPart, true
}

// NewStepStartPartPart returns new Part from StepStartPart.
func NewStepStartPartPart(v StepStartPart) Part {
	var s Part
	s.SetStepStartPart(v)
	return s
}

// SetStepFinishPart sets Part to StepFinishPart.
func (s *Part) SetStepFinishPart(v StepFinishPart) {
	s.Type = StepFinishPartPart
	s.StepFinishPart = v
}

// GetStepFinishPart returns StepFinishPart and true boolean if Part is StepFinishPart.
func (s Part) GetStepFinishPart() (v StepFinishPart, ok bool) {
	if !s.IsStepFinishPart() {
		return v, false
	}
	return s.StepFinishPart, true
}

// NewStepFinishPartPart returns new Part from StepFinishPart.
func NewStepFinishPartPart(v StepFinishPart) Part {
	var s Part
	s.SetStepFinishPart(v)
	return s
}

// SetSnapshotPart sets Part to SnapshotPart.
func (s *Part) SetSnapshotPart(v SnapshotPart) {
	s.Type = SnapshotPartPart
	s.SnapshotPart = v
}

// GetSnapshotPart returns SnapshotPart and true boolean if Part is SnapshotPart.
func (s Part) GetSnapshotPart() (v SnapshotPart, ok bool) {
	if !s.IsSnapshotPart() {
		return v, false
	}
	return s.SnapshotPart, true
}

// NewSnapshotPartPart returns new Part from SnapshotPart.
func NewSnapshotPartPart(v SnapshotPart) Part {
	var s Part
	s.SetSnapshotPart(v)
	return s
}

// SetPatchPart sets Part to PatchPart.
func (s *Part) SetPatchPart(v PatchPart) {
	s.Type = PatchPartPart
	s.PatchPart = v
}

// GetPatchPart returns PatchPart and true boolean if Part is PatchPart.
func (s Part) GetPatchPart() (v PatchPart, ok bool) {
	if !s.IsPatchPart() {
		return v, false
	}
	return s.PatchPart, true
}

// NewPatchPartPart returns new Part from PatchPart.
func NewPatchPartPart(v PatchPart) Part {
	var s Part
	s.SetPatchPart(v)
	return s
}

// SetAgentPart sets Part to AgentPart.
func (s *Part) SetAgentPart(v AgentPart) {
	s.Type = AgentPartPart
	s.AgentPart = v
}

// GetAgentPart returns AgentPart and true boolean if Part is AgentPart.
func (s Part) GetAgentPart() (v AgentPart, ok bool) {
	if !s.IsAgentPart() {
		return v, false
	}
	return s.AgentPart, true
}

// NewAgentPartPart returns new Part from AgentPart.
func NewAgentPartPart(v AgentPart) Part {
	var s Part
	s.SetAgentPart(v)
	return s
}

// Ref: #/components/schemas/PatchPart
type PatchPart struct {
	ID        string   `json:"id"`
	SessionID string   `json:"sessionID"`
	MessageID string   `json:"messageID"`
	Type      string   `json:"type"`
	Hash      string   `json:"hash"`
	Files     []string `json:"files"`
}

// GetID returns the value of ID.
func (s *PatchPart) GetID() string {
	return s.ID
}

// GetSessionID returns the value of SessionID.
func (s *PatchPart) GetSessionID() string {
	return s.SessionID
}

// GetMessageID returns the value of MessageID.
func (s *PatchPart) GetMessageID() string {
	return s.MessageID
}

// GetType returns the value of Type.
func (s *PatchPart) GetType() string {
	return s.Type
}

// GetHash returns the value of Hash.
func (s *PatchPart) GetHash() string {
	return s.Hash
}

// GetFiles returns the value of Files.
func (s *PatchPart) GetFiles() []string {
	return s.Files
}

// SetID sets the value of ID.
func (s *PatchPart) SetID(val string) {
	s.ID = val
}

// SetSessionID sets the value of SessionID.
func (s *PatchPart) SetSessionID(val string) {
	s.SessionID = val
}

// SetMessageID sets the value of MessageID.
func (s *PatchPart) SetMessageID(val string) {
	s.MessageID = val
}

// SetType sets the value of Type.
func (s *PatchPart) SetType(val string) {
	s.Type = val
}

// SetHash sets the value of Hash.
func (s *PatchPart) SetHash(val string) {
	s.Hash = val
}

// SetFiles sets the value of Files.
func (s *PatchPart) SetFiles(val []string) {
	s.Files = val
}

type PostSessionByIdPermissionsByPermissionIDReq struct {
	Response PostSessionByIdPermissionsByPermissionIDReqResponse `json:"response"`
}

// GetResponse returns the value of Response.
func (s *PostSessionByIdPermissionsByPermissionIDReq) GetResponse() PostSessionByIdPermissionsByPermissionIDReqResponse {
	return s.Response
}

// SetResponse sets the value of Response.
func (s *PostSessionByIdPermissionsByPermissionIDReq) SetResponse(val PostSessionByIdPermissionsByPermissionIDReqResponse) {
	s.Response = val
}

type PostSessionByIdPermissionsByPermissionIDReqResponse string

const (
	PostSessionByIdPermissionsByPermissionIDReqResponseOnce   PostSessionByIdPermissionsByPermissionIDReqResponse = "once"
	PostSessionByIdPermissionsByPermissionIDReqResponseAlways PostSessionByIdPermissionsByPermissionIDReqResponse = "always"
	PostSessionByIdPermissionsByPermissionIDReqResponseReject PostSessionByIdPermissionsByPermissionIDReqResponse = "reject"
)

// AllValues returns all PostSessionByIdPermissionsByPermissionIDReqResponse values.
func (PostSessionByIdPermissionsByPermissionIDReqResponse) AllValues() []PostSessionByIdPermissionsByPermissionIDReqResponse {
	return []PostSessionByIdPermissionsByPermissionIDReqResponse{
		PostSessionByIdPermissionsByPermissionIDReqResponseOnce,
		PostSessionByIdPermissionsByPermissionIDReqResponseAlways,
		PostSessionByIdPermissionsByPermissionIDReqResponseReject,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PostSessionByIdPermissionsByPermissionIDReqResponse) MarshalText() ([]byte, error) {
	switch s {
	case PostSessionByIdPermissionsByPermissionIDReqResponseOnce:
		return []byte(s), nil
	case PostSessionByIdPermissionsByPermissionIDReqResponseAlways:
		return []byte(s), nil
	case PostSessionByIdPermissionsByPermissionIDReqResponseReject:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PostSessionByIdPermissionsByPermissionIDReqResponse) UnmarshalText(data []byte) error {
	switch PostSessionByIdPermissionsByPermissionIDReqResponse(data) {
	case PostSessionByIdPermissionsByPermissionIDReqResponseOnce:
		*s = PostSessionByIdPermissionsByPermissionIDReqResponseOnce
		return nil
	case PostSessionByIdPermissionsByPermissionIDReqResponseAlways:
		*s = PostSessionByIdPermissionsByPermissionIDReqResponseAlways
		return nil
	case PostSessionByIdPermissionsByPermissionIDReqResponseReject:
		*s = PostSessionByIdPermissionsByPermissionIDReqResponseReject
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Provider
type Provider struct {
	API         OptString      `json:"api"`
	Name        string         `json:"name"`
	Env         []string       `json:"env"`
	ID          uuid.UUID      `json:"id"`
	Npm         OptString      `json:"npm"`
	Models      ProviderModels `json:"models"`
	Description OptNilString   `json:"description"`
}

// GetAPI returns the value of API.
func (s *Provider) GetAPI() OptString {
	return s.API
}

// GetName returns the value of Name.
func (s *Provider) GetName() string {
	return s.Name
}

// GetEnv returns the value of Env.
func (s *Provider) GetEnv() []string {
	return s.Env
}

// GetID returns the value of ID.
func (s *Provider) GetID() uuid.UUID {
	return s.ID
}

// GetNpm returns the value of Npm.
func (s *Provider) GetNpm() OptString {
	return s.Npm
}

// GetModels returns the value of Models.
func (s *Provider) GetModels() ProviderModels {
	return s.Models
}

// GetDescription returns the value of Description.
func (s *Provider) GetDescription() OptNilString {
	return s.Description
}

// SetAPI sets the value of API.
func (s *Provider) SetAPI(val OptString) {
	s.API = val
}

// SetName sets the value of Name.
func (s *Provider) SetName(val string) {
	s.Name = val
}

// SetEnv sets the value of Env.
func (s *Provider) SetEnv(val []string) {
	s.Env = val
}

// SetID sets the value of ID.
func (s *Provider) SetID(val uuid.UUID) {
	s.ID = val
}

// SetNpm sets the value of Npm.
func (s *Provider) SetNpm(val OptString) {
	s.Npm = val
}

// SetModels sets the value of Models.
func (s *Provider) SetModels(val ProviderModels) {
	s.Models = val
}

// SetDescription sets the value of Description.
func (s *Provider) SetDescription(val OptNilString) {
	s.Description = val
}

// Ref: #/components/schemas/ProviderAuthError
type ProviderAuthError struct {
	Name string                `json:"name"`
	Data ProviderAuthErrorData `json:"data"`
}

// GetName returns the value of Name.
func (s *ProviderAuthError) GetName() string {
	return s.Name
}

// GetData returns the value of Data.
func (s *ProviderAuthError) GetData() ProviderAuthErrorData {
	return s.Data
}

// SetName sets the value of Name.
func (s *ProviderAuthError) SetName(val string) {
	s.Name = val
}

// SetData sets the value of Data.
func (s *ProviderAuthError) SetData(val ProviderAuthErrorData) {
	s.Data = val
}

type ProviderAuthErrorData struct {
	ProviderID string `json:"providerID"`
	Message    string `json:"message"`
}

// GetProviderID returns the value of ProviderID.
func (s *ProviderAuthErrorData) GetProviderID() string {
	return s.ProviderID
}

// GetMessage returns the value of Message.
func (s *ProviderAuthErrorData) GetMessage() string {
	return s.Message
}

// SetProviderID sets the value of ProviderID.
func (s *ProviderAuthErrorData) SetProviderID(val string) {
	s.ProviderID = val
}

// SetMessage sets the value of Message.
func (s *ProviderAuthErrorData) SetMessage(val string) {
	s.Message = val
}

type ProviderModels map[string]Model

func (s *ProviderModels) init() ProviderModels {
	m := *s
	if m == nil {
		m = map[string]Model{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/Range
type Range struct {
	Start RangeStart `json:"start"`
	End   RangeEnd   `json:"end"`
}

// GetStart returns the value of Start.
func (s *Range) GetStart() RangeStart {
	return s.Start
}

// GetEnd returns the value of End.
func (s *Range) GetEnd() RangeEnd {
	return s.End
}

// SetStart sets the value of Start.
func (s *Range) SetStart(val RangeStart) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *Range) SetEnd(val RangeEnd) {
	s.End = val
}

type RangeEnd struct {
	Line      float64 `json:"line"`
	Character float64 `json:"character"`
}

// GetLine returns the value of Line.
func (s *RangeEnd) GetLine() float64 {
	return s.Line
}

// GetCharacter returns the value of Character.
func (s *RangeEnd) GetCharacter() float64 {
	return s.Character
}

// SetLine sets the value of Line.
func (s *RangeEnd) SetLine(val float64) {
	s.Line = val
}

// SetCharacter sets the value of Character.
func (s *RangeEnd) SetCharacter(val float64) {
	s.Character = val
}

type RangeStart struct {
	Line      float64 `json:"line"`
	Character float64 `json:"character"`
}

// GetLine returns the value of Line.
func (s *RangeStart) GetLine() float64 {
	return s.Line
}

// GetCharacter returns the value of Character.
func (s *RangeStart) GetCharacter() float64 {
	return s.Character
}

// SetLine sets the value of Line.
func (s *RangeStart) SetLine(val float64) {
	s.Line = val
}

// SetCharacter sets the value of Character.
func (s *RangeStart) SetCharacter(val float64) {
	s.Character = val
}

// Ref: #/components/schemas/ReasoningPart
type ReasoningPart struct {
	ID        string                   `json:"id"`
	SessionID string                   `json:"sessionID"`
	MessageID string                   `json:"messageID"`
	Type      string                   `json:"type"`
	Text      string                   `json:"text"`
	Metadata  OptReasoningPartMetadata `json:"metadata"`
	Time      ReasoningPartTime        `json:"time"`
}

// GetID returns the value of ID.
func (s *ReasoningPart) GetID() string {
	return s.ID
}

// GetSessionID returns the value of SessionID.
func (s *ReasoningPart) GetSessionID() string {
	return s.SessionID
}

// GetMessageID returns the value of MessageID.
func (s *ReasoningPart) GetMessageID() string {
	return s.MessageID
}

// GetType returns the value of Type.
func (s *ReasoningPart) GetType() string {
	return s.Type
}

// GetText returns the value of Text.
func (s *ReasoningPart) GetText() string {
	return s.Text
}

// GetMetadata returns the value of Metadata.
func (s *ReasoningPart) GetMetadata() OptReasoningPartMetadata {
	return s.Metadata
}

// GetTime returns the value of Time.
func (s *ReasoningPart) GetTime() ReasoningPartTime {
	return s.Time
}

// SetID sets the value of ID.
func (s *ReasoningPart) SetID(val string) {
	s.ID = val
}

// SetSessionID sets the value of SessionID.
func (s *ReasoningPart) SetSessionID(val string) {
	s.SessionID = val
}

// SetMessageID sets the value of MessageID.
func (s *ReasoningPart) SetMessageID(val string) {
	s.MessageID = val
}

// SetType sets the value of Type.
func (s *ReasoningPart) SetType(val string) {
	s.Type = val
}

// SetText sets the value of Text.
func (s *ReasoningPart) SetText(val string) {
	s.Text = val
}

// SetMetadata sets the value of Metadata.
func (s *ReasoningPart) SetMetadata(val OptReasoningPartMetadata) {
	s.Metadata = val
}

// SetTime sets the value of Time.
func (s *ReasoningPart) SetTime(val ReasoningPartTime) {
	s.Time = val
}

type ReasoningPartMetadata map[string]jx.Raw

func (s *ReasoningPartMetadata) init() ReasoningPartMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ReasoningPartTime struct {
	Start float64    `json:"start"`
	End   OptFloat64 `json:"end"`
}

// GetStart returns the value of Start.
func (s *ReasoningPartTime) GetStart() float64 {
	return s.Start
}

// GetEnd returns the value of End.
func (s *ReasoningPartTime) GetEnd() OptFloat64 {
	return s.End
}

// SetStart sets the value of Start.
func (s *ReasoningPartTime) SetStart(val float64) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *ReasoningPartTime) SetEnd(val OptFloat64) {
	s.End = val
}

// Ref: #/components/schemas/Session
type Session struct {
	ID       string           `json:"id"`
	ParentID OptString        `json:"parentID"`
	Share    OptSessionShare  `json:"share"`
	Title    string           `json:"title"`
	Version  string           `json:"version"`
	Time     SessionTime      `json:"time"`
	Revert   OptSessionRevert `json:"revert"`
}

// GetID returns the value of ID.
func (s *Session) GetID() string {
	return s.ID
}

// GetParentID returns the value of ParentID.
func (s *Session) GetParentID() OptString {
	return s.ParentID
}

// GetShare returns the value of Share.
func (s *Session) GetShare() OptSessionShare {
	return s.Share
}

// GetTitle returns the value of Title.
func (s *Session) GetTitle() string {
	return s.Title
}

// GetVersion returns the value of Version.
func (s *Session) GetVersion() string {
	return s.Version
}

// GetTime returns the value of Time.
func (s *Session) GetTime() SessionTime {
	return s.Time
}

// GetRevert returns the value of Revert.
func (s *Session) GetRevert() OptSessionRevert {
	return s.Revert
}

// SetID sets the value of ID.
func (s *Session) SetID(val string) {
	s.ID = val
}

// SetParentID sets the value of ParentID.
func (s *Session) SetParentID(val OptString) {
	s.ParentID = val
}

// SetShare sets the value of Share.
func (s *Session) SetShare(val OptSessionShare) {
	s.Share = val
}

// SetTitle sets the value of Title.
func (s *Session) SetTitle(val string) {
	s.Title = val
}

// SetVersion sets the value of Version.
func (s *Session) SetVersion(val string) {
	s.Version = val
}

// SetTime sets the value of Time.
func (s *Session) SetTime(val SessionTime) {
	s.Time = val
}

// SetRevert sets the value of Revert.
func (s *Session) SetRevert(val OptSessionRevert) {
	s.Revert = val
}

func (*Session) sessionCreateRes() {}

type SessionChatOK struct {
	Info  AssistantMessage `json:"info"`
	Parts []Part           `json:"parts"`
}

// GetInfo returns the value of Info.
func (s *SessionChatOK) GetInfo() AssistantMessage {
	return s.Info
}

// GetParts returns the value of Parts.
func (s *SessionChatOK) GetParts() []Part {
	return s.Parts
}

// SetInfo sets the value of Info.
func (s *SessionChatOK) SetInfo(val AssistantMessage) {
	s.Info = val
}

// SetParts sets the value of Parts.
func (s *SessionChatOK) SetParts(val []Part) {
	s.Parts = val
}

type SessionChatReq struct {
	MessageID  OptString                 `json:"messageID"`
	ProviderID string                    `json:"providerID"`
	ModelID    string                    `json:"modelID"`
	Agent      OptString                 `json:"agent"`
	System     OptString                 `json:"system"`
	Tools      OptSessionChatReqTools    `json:"tools"`
	Parts      []SessionChatReqPartsItem `json:"parts"`
}

// GetMessageID returns the value of MessageID.
func (s *SessionChatReq) GetMessageID() OptString {
	return s.MessageID
}

// GetProviderID returns the value of ProviderID.
func (s *SessionChatReq) GetProviderID() string {
	return s.ProviderID
}

// GetModelID returns the value of ModelID.
func (s *SessionChatReq) GetModelID() string {
	return s.ModelID
}

// GetAgent returns the value of Agent.
func (s *SessionChatReq) GetAgent() OptString {
	return s.Agent
}

// GetSystem returns the value of System.
func (s *SessionChatReq) GetSystem() OptString {
	return s.System
}

// GetTools returns the value of Tools.
func (s *SessionChatReq) GetTools() OptSessionChatReqTools {
	return s.Tools
}

// GetParts returns the value of Parts.
func (s *SessionChatReq) GetParts() []SessionChatReqPartsItem {
	return s.Parts
}

// SetMessageID sets the value of MessageID.
func (s *SessionChatReq) SetMessageID(val OptString) {
	s.MessageID = val
}

// SetProviderID sets the value of ProviderID.
func (s *SessionChatReq) SetProviderID(val string) {
	s.ProviderID = val
}

// SetModelID sets the value of ModelID.
func (s *SessionChatReq) SetModelID(val string) {
	s.ModelID = val
}

// SetAgent sets the value of Agent.
func (s *SessionChatReq) SetAgent(val OptString) {
	s.Agent = val
}

// SetSystem sets the value of System.
func (s *SessionChatReq) SetSystem(val OptString) {
	s.System = val
}

// SetTools sets the value of Tools.
func (s *SessionChatReq) SetTools(val OptSessionChatReqTools) {
	s.Tools = val
}

// SetParts sets the value of Parts.
func (s *SessionChatReq) SetParts(val []SessionChatReqPartsItem) {
	s.Parts = val
}

// SessionChatReqPartsItem represents sum type.
type SessionChatReqPartsItem struct {
	Type           SessionChatReqPartsItemType // switch on this field
	TextPartInput  TextPartInput
	FilePartInput  FilePartInput
	AgentPartInput AgentPartInput
}

// SessionChatReqPartsItemType is oneOf type of SessionChatReqPartsItem.
type SessionChatReqPartsItemType string

// Possible values for SessionChatReqPartsItemType.
const (
	TextPartInputSessionChatReqPartsItem  SessionChatReqPartsItemType = "text"
	FilePartInputSessionChatReqPartsItem  SessionChatReqPartsItemType = "file"
	AgentPartInputSessionChatReqPartsItem SessionChatReqPartsItemType = "agent"
)

// IsTextPartInput reports whether SessionChatReqPartsItem is TextPartInput.
func (s SessionChatReqPartsItem) IsTextPartInput() bool {
	return s.Type == TextPartInputSessionChatReqPartsItem
}

// IsFilePartInput reports whether SessionChatReqPartsItem is FilePartInput.
func (s SessionChatReqPartsItem) IsFilePartInput() bool {
	return s.Type == FilePartInputSessionChatReqPartsItem
}

// IsAgentPartInput reports whether SessionChatReqPartsItem is AgentPartInput.
func (s SessionChatReqPartsItem) IsAgentPartInput() bool {
	return s.Type == AgentPartInputSessionChatReqPartsItem
}

// SetTextPartInput sets SessionChatReqPartsItem to TextPartInput.
func (s *SessionChatReqPartsItem) SetTextPartInput(v TextPartInput) {
	s.Type = TextPartInputSessionChatReqPartsItem
	s.TextPartInput = v
}

// GetTextPartInput returns TextPartInput and true boolean if SessionChatReqPartsItem is TextPartInput.
func (s SessionChatReqPartsItem) GetTextPartInput() (v TextPartInput, ok bool) {
	if !s.IsTextPartInput() {
		return v, false
	}
	return s.TextPartInput, true
}

// NewTextPartInputSessionChatReqPartsItem returns new SessionChatReqPartsItem from TextPartInput.
func NewTextPartInputSessionChatReqPartsItem(v TextPartInput) SessionChatReqPartsItem {
	var s SessionChatReqPartsItem
	s.SetTextPartInput(v)
	return s
}

// SetFilePartInput sets SessionChatReqPartsItem to FilePartInput.
func (s *SessionChatReqPartsItem) SetFilePartInput(v FilePartInput) {
	s.Type = FilePartInputSessionChatReqPartsItem
	s.FilePartInput = v
}

// GetFilePartInput returns FilePartInput and true boolean if SessionChatReqPartsItem is FilePartInput.
func (s SessionChatReqPartsItem) GetFilePartInput() (v FilePartInput, ok bool) {
	if !s.IsFilePartInput() {
		return v, false
	}
	return s.FilePartInput, true
}

// NewFilePartInputSessionChatReqPartsItem returns new SessionChatReqPartsItem from FilePartInput.
func NewFilePartInputSessionChatReqPartsItem(v FilePartInput) SessionChatReqPartsItem {
	var s SessionChatReqPartsItem
	s.SetFilePartInput(v)
	return s
}

// SetAgentPartInput sets SessionChatReqPartsItem to AgentPartInput.
func (s *SessionChatReqPartsItem) SetAgentPartInput(v AgentPartInput) {
	s.Type = AgentPartInputSessionChatReqPartsItem
	s.AgentPartInput = v
}

// GetAgentPartInput returns AgentPartInput and true boolean if SessionChatReqPartsItem is AgentPartInput.
func (s SessionChatReqPartsItem) GetAgentPartInput() (v AgentPartInput, ok bool) {
	if !s.IsAgentPartInput() {
		return v, false
	}
	return s.AgentPartInput, true
}

// NewAgentPartInputSessionChatReqPartsItem returns new SessionChatReqPartsItem from AgentPartInput.
func NewAgentPartInputSessionChatReqPartsItem(v AgentPartInput) SessionChatReqPartsItem {
	var s SessionChatReqPartsItem
	s.SetAgentPartInput(v)
	return s
}

type SessionChatReqTools map[string]bool

func (s *SessionChatReqTools) init() SessionChatReqTools {
	m := *s
	if m == nil {
		m = map[string]bool{}
		*s = m
	}
	return m
}

type SessionCommandOK struct {
	Info  AssistantMessage `json:"info"`
	Parts []Part           `json:"parts"`
}

// GetInfo returns the value of Info.
func (s *SessionCommandOK) GetInfo() AssistantMessage {
	return s.Info
}

// GetParts returns the value of Parts.
func (s *SessionCommandOK) GetParts() []Part {
	return s.Parts
}

// SetInfo sets the value of Info.
func (s *SessionCommandOK) SetInfo(val AssistantMessage) {
	s.Info = val
}

// SetParts sets the value of Parts.
func (s *SessionCommandOK) SetParts(val []Part) {
	s.Parts = val
}

type SessionCommandReq struct {
	MessageID OptString `json:"messageID"`
	Agent     OptString `json:"agent"`
	Model     OptString `json:"model"`
	Arguments string    `json:"arguments"`
	Command   string    `json:"command"`
}

// GetMessageID returns the value of MessageID.
func (s *SessionCommandReq) GetMessageID() OptString {
	return s.MessageID
}

// GetAgent returns the value of Agent.
func (s *SessionCommandReq) GetAgent() OptString {
	return s.Agent
}

// GetModel returns the value of Model.
func (s *SessionCommandReq) GetModel() OptString {
	return s.Model
}

// GetArguments returns the value of Arguments.
func (s *SessionCommandReq) GetArguments() string {
	return s.Arguments
}

// GetCommand returns the value of Command.
func (s *SessionCommandReq) GetCommand() string {
	return s.Command
}

// SetMessageID sets the value of MessageID.
func (s *SessionCommandReq) SetMessageID(val OptString) {
	s.MessageID = val
}

// SetAgent sets the value of Agent.
func (s *SessionCommandReq) SetAgent(val OptString) {
	s.Agent = val
}

// SetModel sets the value of Model.
func (s *SessionCommandReq) SetModel(val OptString) {
	s.Model = val
}

// SetArguments sets the value of Arguments.
func (s *SessionCommandReq) SetArguments(val string) {
	s.Arguments = val
}

// SetCommand sets the value of Command.
func (s *SessionCommandReq) SetCommand(val string) {
	s.Command = val
}

type SessionCreateReq struct {
	ParentID OptString `json:"parentID"`
	Title    OptString `json:"title"`
}

// GetParentID returns the value of ParentID.
func (s *SessionCreateReq) GetParentID() OptString {
	return s.ParentID
}

// GetTitle returns the value of Title.
func (s *SessionCreateReq) GetTitle() OptString {
	return s.Title
}

// SetParentID sets the value of ParentID.
func (s *SessionCreateReq) SetParentID(val OptString) {
	s.ParentID = val
}

// SetTitle sets the value of Title.
func (s *SessionCreateReq) SetTitle(val OptString) {
	s.Title = val
}

type SessionInitReq struct {
	MessageID  string `json:"messageID"`
	ProviderID string `json:"providerID"`
	ModelID    string `json:"modelID"`
}

// GetMessageID returns the value of MessageID.
func (s *SessionInitReq) GetMessageID() string {
	return s.MessageID
}

// GetProviderID returns the value of ProviderID.
func (s *SessionInitReq) GetProviderID() string {
	return s.ProviderID
}

// GetModelID returns the value of ModelID.
func (s *SessionInitReq) GetModelID() string {
	return s.ModelID
}

// SetMessageID sets the value of MessageID.
func (s *SessionInitReq) SetMessageID(val string) {
	s.MessageID = val
}

// SetProviderID sets the value of ProviderID.
func (s *SessionInitReq) SetProviderID(val string) {
	s.ProviderID = val
}

// SetModelID sets the value of ModelID.
func (s *SessionInitReq) SetModelID(val string) {
	s.ModelID = val
}

type SessionMessageOK struct {
	Info  Message `json:"info"`
	Parts []Part  `json:"parts"`
}

// GetInfo returns the value of Info.
func (s *SessionMessageOK) GetInfo() Message {
	return s.Info
}

// GetParts returns the value of Parts.
func (s *SessionMessageOK) GetParts() []Part {
	return s.Parts
}

// SetInfo sets the value of Info.
func (s *SessionMessageOK) SetInfo(val Message) {
	s.Info = val
}

// SetParts sets the value of Parts.
func (s *SessionMessageOK) SetParts(val []Part) {
	s.Parts = val
}

type SessionMessagesOKItem struct {
	Info  Message `json:"info"`
	Parts []Part  `json:"parts"`
}

// GetInfo returns the value of Info.
func (s *SessionMessagesOKItem) GetInfo() Message {
	return s.Info
}

// GetParts returns the value of Parts.
func (s *SessionMessagesOKItem) GetParts() []Part {
	return s.Parts
}

// SetInfo sets the value of Info.
func (s *SessionMessagesOKItem) SetInfo(val Message) {
	s.Info = val
}

// SetParts sets the value of Parts.
func (s *SessionMessagesOKItem) SetParts(val []Part) {
	s.Parts = val
}

type SessionRevert struct {
	MessageID string    `json:"messageID"`
	PartID    OptString `json:"partID"`
	Snapshot  OptString `json:"snapshot"`
	Diff      OptString `json:"diff"`
}

// GetMessageID returns the value of MessageID.
func (s *SessionRevert) GetMessageID() string {
	return s.MessageID
}

// GetPartID returns the value of PartID.
func (s *SessionRevert) GetPartID() OptString {
	return s.PartID
}

// GetSnapshot returns the value of Snapshot.
func (s *SessionRevert) GetSnapshot() OptString {
	return s.Snapshot
}

// GetDiff returns the value of Diff.
func (s *SessionRevert) GetDiff() OptString {
	return s.Diff
}

// SetMessageID sets the value of MessageID.
func (s *SessionRevert) SetMessageID(val string) {
	s.MessageID = val
}

// SetPartID sets the value of PartID.
func (s *SessionRevert) SetPartID(val OptString) {
	s.PartID = val
}

// SetSnapshot sets the value of Snapshot.
func (s *SessionRevert) SetSnapshot(val OptString) {
	s.Snapshot = val
}

// SetDiff sets the value of Diff.
func (s *SessionRevert) SetDiff(val OptString) {
	s.Diff = val
}

type SessionRevertReq struct {
	MessageID string    `json:"messageID"`
	PartID    OptString `json:"partID"`
}

// GetMessageID returns the value of MessageID.
func (s *SessionRevertReq) GetMessageID() string {
	return s.MessageID
}

// GetPartID returns the value of PartID.
func (s *SessionRevertReq) GetPartID() OptString {
	return s.PartID
}

// SetMessageID sets the value of MessageID.
func (s *SessionRevertReq) SetMessageID(val string) {
	s.MessageID = val
}

// SetPartID sets the value of PartID.
func (s *SessionRevertReq) SetPartID(val OptString) {
	s.PartID = val
}

type SessionShare struct {
	URL string `json:"url"`
}

// GetURL returns the value of URL.
func (s *SessionShare) GetURL() string {
	return s.URL
}

// SetURL sets the value of URL.
func (s *SessionShare) SetURL(val string) {
	s.URL = val
}

type SessionShellReq struct {
	Agent   string `json:"agent"`
	Command string `json:"command"`
}

// GetAgent returns the value of Agent.
func (s *SessionShellReq) GetAgent() string {
	return s.Agent
}

// GetCommand returns the value of Command.
func (s *SessionShellReq) GetCommand() string {
	return s.Command
}

// SetAgent sets the value of Agent.
func (s *SessionShellReq) SetAgent(val string) {
	s.Agent = val
}

// SetCommand sets the value of Command.
func (s *SessionShellReq) SetCommand(val string) {
	s.Command = val
}

type SessionSummarizeReq struct {
	ProviderID string `json:"providerID"`
	ModelID    string `json:"modelID"`
}

// GetProviderID returns the value of ProviderID.
func (s *SessionSummarizeReq) GetProviderID() string {
	return s.ProviderID
}

// GetModelID returns the value of ModelID.
func (s *SessionSummarizeReq) GetModelID() string {
	return s.ModelID
}

// SetProviderID sets the value of ProviderID.
func (s *SessionSummarizeReq) SetProviderID(val string) {
	s.ProviderID = val
}

// SetModelID sets the value of ModelID.
func (s *SessionSummarizeReq) SetModelID(val string) {
	s.ModelID = val
}

type SessionTime struct {
	Created float64 `json:"created"`
	Updated float64 `json:"updated"`
}

// GetCreated returns the value of Created.
func (s *SessionTime) GetCreated() float64 {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *SessionTime) GetUpdated() float64 {
	return s.Updated
}

// SetCreated sets the value of Created.
func (s *SessionTime) SetCreated(val float64) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *SessionTime) SetUpdated(val float64) {
	s.Updated = val
}

type SessionUpdateReq struct {
	Title OptString `json:"title"`
}

// GetTitle returns the value of Title.
func (s *SessionUpdateReq) GetTitle() OptString {
	return s.Title
}

// SetTitle sets the value of Title.
func (s *SessionUpdateReq) SetTitle(val OptString) {
	s.Title = val
}

// Ref: #/components/schemas/SnapshotPart
type SnapshotPart struct {
	ID        string `json:"id"`
	SessionID string `json:"sessionID"`
	MessageID string `json:"messageID"`
	Type      string `json:"type"`
	Snapshot  string `json:"snapshot"`
}

// GetID returns the value of ID.
func (s *SnapshotPart) GetID() string {
	return s.ID
}

// GetSessionID returns the value of SessionID.
func (s *SnapshotPart) GetSessionID() string {
	return s.SessionID
}

// GetMessageID returns the value of MessageID.
func (s *SnapshotPart) GetMessageID() string {
	return s.MessageID
}

// GetType returns the value of Type.
func (s *SnapshotPart) GetType() string {
	return s.Type
}

// GetSnapshot returns the value of Snapshot.
func (s *SnapshotPart) GetSnapshot() string {
	return s.Snapshot
}

// SetID sets the value of ID.
func (s *SnapshotPart) SetID(val string) {
	s.ID = val
}

// SetSessionID sets the value of SessionID.
func (s *SnapshotPart) SetSessionID(val string) {
	s.SessionID = val
}

// SetMessageID sets the value of MessageID.
func (s *SnapshotPart) SetMessageID(val string) {
	s.MessageID = val
}

// SetType sets the value of Type.
func (s *SnapshotPart) SetType(val string) {
	s.Type = val
}

// SetSnapshot sets the value of Snapshot.
func (s *SnapshotPart) SetSnapshot(val string) {
	s.Snapshot = val
}

// Ref: #/components/schemas/StepFinishPart
type StepFinishPart struct {
	ID        string               `json:"id"`
	SessionID string               `json:"sessionID"`
	MessageID string               `json:"messageID"`
	Type      string               `json:"type"`
	Cost      float64              `json:"cost"`
	Tokens    StepFinishPartTokens `json:"tokens"`
}

// GetID returns the value of ID.
func (s *StepFinishPart) GetID() string {
	return s.ID
}

// GetSessionID returns the value of SessionID.
func (s *StepFinishPart) GetSessionID() string {
	return s.SessionID
}

// GetMessageID returns the value of MessageID.
func (s *StepFinishPart) GetMessageID() string {
	return s.MessageID
}

// GetType returns the value of Type.
func (s *StepFinishPart) GetType() string {
	return s.Type
}

// GetCost returns the value of Cost.
func (s *StepFinishPart) GetCost() float64 {
	return s.Cost
}

// GetTokens returns the value of Tokens.
func (s *StepFinishPart) GetTokens() StepFinishPartTokens {
	return s.Tokens
}

// SetID sets the value of ID.
func (s *StepFinishPart) SetID(val string) {
	s.ID = val
}

// SetSessionID sets the value of SessionID.
func (s *StepFinishPart) SetSessionID(val string) {
	s.SessionID = val
}

// SetMessageID sets the value of MessageID.
func (s *StepFinishPart) SetMessageID(val string) {
	s.MessageID = val
}

// SetType sets the value of Type.
func (s *StepFinishPart) SetType(val string) {
	s.Type = val
}

// SetCost sets the value of Cost.
func (s *StepFinishPart) SetCost(val float64) {
	s.Cost = val
}

// SetTokens sets the value of Tokens.
func (s *StepFinishPart) SetTokens(val StepFinishPartTokens) {
	s.Tokens = val
}

type StepFinishPartTokens struct {
	Input     float64                   `json:"input"`
	Output    float64                   `json:"output"`
	Reasoning float64                   `json:"reasoning"`
	Cache     StepFinishPartTokensCache `json:"cache"`
}

// GetInput returns the value of Input.
func (s *StepFinishPartTokens) GetInput() float64 {
	return s.Input
}

// GetOutput returns the value of Output.
func (s *StepFinishPartTokens) GetOutput() float64 {
	return s.Output
}

// GetReasoning returns the value of Reasoning.
func (s *StepFinishPartTokens) GetReasoning() float64 {
	return s.Reasoning
}

// GetCache returns the value of Cache.
func (s *StepFinishPartTokens) GetCache() StepFinishPartTokensCache {
	return s.Cache
}

// SetInput sets the value of Input.
func (s *StepFinishPartTokens) SetInput(val float64) {
	s.Input = val
}

// SetOutput sets the value of Output.
func (s *StepFinishPartTokens) SetOutput(val float64) {
	s.Output = val
}

// SetReasoning sets the value of Reasoning.
func (s *StepFinishPartTokens) SetReasoning(val float64) {
	s.Reasoning = val
}

// SetCache sets the value of Cache.
func (s *StepFinishPartTokens) SetCache(val StepFinishPartTokensCache) {
	s.Cache = val
}

type StepFinishPartTokensCache struct {
	Read  float64 `json:"read"`
	Write float64 `json:"write"`
}

// GetRead returns the value of Read.
func (s *StepFinishPartTokensCache) GetRead() float64 {
	return s.Read
}

// GetWrite returns the value of Write.
func (s *StepFinishPartTokensCache) GetWrite() float64 {
	return s.Write
}

// SetRead sets the value of Read.
func (s *StepFinishPartTokensCache) SetRead(val float64) {
	s.Read = val
}

// SetWrite sets the value of Write.
func (s *StepFinishPartTokensCache) SetWrite(val float64) {
	s.Write = val
}

// Ref: #/components/schemas/StepStartPart
type StepStartPart struct {
	ID        string `json:"id"`
	SessionID string `json:"sessionID"`
	MessageID string `json:"messageID"`
	Type      string `json:"type"`
}

// GetID returns the value of ID.
func (s *StepStartPart) GetID() string {
	return s.ID
}

// GetSessionID returns the value of SessionID.
func (s *StepStartPart) GetSessionID() string {
	return s.SessionID
}

// GetMessageID returns the value of MessageID.
func (s *StepStartPart) GetMessageID() string {
	return s.MessageID
}

// GetType returns the value of Type.
func (s *StepStartPart) GetType() string {
	return s.Type
}

// SetID sets the value of ID.
func (s *StepStartPart) SetID(val string) {
	s.ID = val
}

// SetSessionID sets the value of SessionID.
func (s *StepStartPart) SetSessionID(val string) {
	s.SessionID = val
}

// SetMessageID sets the value of MessageID.
func (s *StepStartPart) SetMessageID(val string) {
	s.MessageID = val
}

// SetType sets the value of Type.
func (s *StepStartPart) SetType(val string) {
	s.Type = val
}

// Ref: #/components/schemas/Symbol
type Symbol struct {
	Name     string         `json:"name"`
	Kind     float64        `json:"kind"`
	Location SymbolLocation `json:"location"`
}

// GetName returns the value of Name.
func (s *Symbol) GetName() string {
	return s.Name
}

// GetKind returns the value of Kind.
func (s *Symbol) GetKind() float64 {
	return s.Kind
}

// GetLocation returns the value of Location.
func (s *Symbol) GetLocation() SymbolLocation {
	return s.Location
}

// SetName sets the value of Name.
func (s *Symbol) SetName(val string) {
	s.Name = val
}

// SetKind sets the value of Kind.
func (s *Symbol) SetKind(val float64) {
	s.Kind = val
}

// SetLocation sets the value of Location.
func (s *Symbol) SetLocation(val SymbolLocation) {
	s.Location = val
}

type SymbolLocation struct {
	URI   string `json:"uri"`
	Range Range  `json:"range"`
}

// GetURI returns the value of URI.
func (s *SymbolLocation) GetURI() string {
	return s.URI
}

// GetRange returns the value of Range.
func (s *SymbolLocation) GetRange() Range {
	return s.Range
}

// SetURI sets the value of URI.
func (s *SymbolLocation) SetURI(val string) {
	s.URI = val
}

// SetRange sets the value of Range.
func (s *SymbolLocation) SetRange(val Range) {
	s.Range = val
}

// Ref: #/components/schemas/SymbolSource
type SymbolSource struct {
	Text  FilePartSourceText `json:"text"`
	Type  string             `json:"type"`
	Path  string             `json:"path"`
	Range Range              `json:"range"`
	Name  string             `json:"name"`
	Kind  int                `json:"kind"`
}

// GetText returns the value of Text.
func (s *SymbolSource) GetText() FilePartSourceText {
	return s.Text
}

// GetType returns the value of Type.
func (s *SymbolSource) GetType() string {
	return s.Type
}

// GetPath returns the value of Path.
func (s *SymbolSource) GetPath() string {
	return s.Path
}

// GetRange returns the value of Range.
func (s *SymbolSource) GetRange() Range {
	return s.Range
}

// GetName returns the value of Name.
func (s *SymbolSource) GetName() string {
	return s.Name
}

// GetKind returns the value of Kind.
func (s *SymbolSource) GetKind() int {
	return s.Kind
}

// SetText sets the value of Text.
func (s *SymbolSource) SetText(val FilePartSourceText) {
	s.Text = val
}

// SetType sets the value of Type.
func (s *SymbolSource) SetType(val string) {
	s.Type = val
}

// SetPath sets the value of Path.
func (s *SymbolSource) SetPath(val string) {
	s.Path = val
}

// SetRange sets the value of Range.
func (s *SymbolSource) SetRange(val Range) {
	s.Range = val
}

// SetName sets the value of Name.
func (s *SymbolSource) SetName(val string) {
	s.Name = val
}

// SetKind sets the value of Kind.
func (s *SymbolSource) SetKind(val int) {
	s.Kind = val
}

// Ref: #/components/schemas/TextPart
type TextPart struct {
	ID        string          `json:"id"`
	SessionID string          `json:"sessionID"`
	MessageID string          `json:"messageID"`
	Type      string          `json:"type"`
	Text      string          `json:"text"`
	Synthetic OptBool         `json:"synthetic"`
	Time      OptTextPartTime `json:"time"`
}

// GetID returns the value of ID.
func (s *TextPart) GetID() string {
	return s.ID
}

// GetSessionID returns the value of SessionID.
func (s *TextPart) GetSessionID() string {
	return s.SessionID
}

// GetMessageID returns the value of MessageID.
func (s *TextPart) GetMessageID() string {
	return s.MessageID
}

// GetType returns the value of Type.
func (s *TextPart) GetType() string {
	return s.Type
}

// GetText returns the value of Text.
func (s *TextPart) GetText() string {
	return s.Text
}

// GetSynthetic returns the value of Synthetic.
func (s *TextPart) GetSynthetic() OptBool {
	return s.Synthetic
}

// GetTime returns the value of Time.
func (s *TextPart) GetTime() OptTextPartTime {
	return s.Time
}

// SetID sets the value of ID.
func (s *TextPart) SetID(val string) {
	s.ID = val
}

// SetSessionID sets the value of SessionID.
func (s *TextPart) SetSessionID(val string) {
	s.SessionID = val
}

// SetMessageID sets the value of MessageID.
func (s *TextPart) SetMessageID(val string) {
	s.MessageID = val
}

// SetType sets the value of Type.
func (s *TextPart) SetType(val string) {
	s.Type = val
}

// SetText sets the value of Text.
func (s *TextPart) SetText(val string) {
	s.Text = val
}

// SetSynthetic sets the value of Synthetic.
func (s *TextPart) SetSynthetic(val OptBool) {
	s.Synthetic = val
}

// SetTime sets the value of Time.
func (s *TextPart) SetTime(val OptTextPartTime) {
	s.Time = val
}

// Ref: #/components/schemas/TextPartInput
type TextPartInput struct {
	ID        OptString            `json:"id"`
	Type      string               `json:"type"`
	Text      string               `json:"text"`
	Synthetic OptBool              `json:"synthetic"`
	Time      OptTextPartInputTime `json:"time"`
}

// GetID returns the value of ID.
func (s *TextPartInput) GetID() OptString {
	return s.ID
}

// GetType returns the value of Type.
func (s *TextPartInput) GetType() string {
	return s.Type
}

// GetText returns the value of Text.
func (s *TextPartInput) GetText() string {
	return s.Text
}

// GetSynthetic returns the value of Synthetic.
func (s *TextPartInput) GetSynthetic() OptBool {
	return s.Synthetic
}

// GetTime returns the value of Time.
func (s *TextPartInput) GetTime() OptTextPartInputTime {
	return s.Time
}

// SetID sets the value of ID.
func (s *TextPartInput) SetID(val OptString) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *TextPartInput) SetType(val string) {
	s.Type = val
}

// SetText sets the value of Text.
func (s *TextPartInput) SetText(val string) {
	s.Text = val
}

// SetSynthetic sets the value of Synthetic.
func (s *TextPartInput) SetSynthetic(val OptBool) {
	s.Synthetic = val
}

// SetTime sets the value of Time.
func (s *TextPartInput) SetTime(val OptTextPartInputTime) {
	s.Time = val
}

type TextPartInputTime struct {
	Start float64    `json:"start"`
	End   OptFloat64 `json:"end"`
}

// GetStart returns the value of Start.
func (s *TextPartInputTime) GetStart() float64 {
	return s.Start
}

// GetEnd returns the value of End.
func (s *TextPartInputTime) GetEnd() OptFloat64 {
	return s.End
}

// SetStart sets the value of Start.
func (s *TextPartInputTime) SetStart(val float64) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *TextPartInputTime) SetEnd(val OptFloat64) {
	s.End = val
}

type TextPartTime struct {
	Start float64    `json:"start"`
	End   OptFloat64 `json:"end"`
}

// GetStart returns the value of Start.
func (s *TextPartTime) GetStart() float64 {
	return s.Start
}

// GetEnd returns the value of End.
func (s *TextPartTime) GetEnd() OptFloat64 {
	return s.End
}

// SetStart sets the value of Start.
func (s *TextPartTime) SetStart(val float64) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *TextPartTime) SetEnd(val OptFloat64) {
	s.End = val
}

// Ref: #/components/schemas/ToolPart
type ToolPart struct {
	ID        string    `json:"id"`
	SessionID string    `json:"sessionID"`
	MessageID string    `json:"messageID"`
	Type      string    `json:"type"`
	CallID    string    `json:"callID"`
	Tool      string    `json:"tool"`
	State     ToolState `json:"state"`
}

// GetID returns the value of ID.
func (s *ToolPart) GetID() string {
	return s.ID
}

// GetSessionID returns the value of SessionID.
func (s *ToolPart) GetSessionID() string {
	return s.SessionID
}

// GetMessageID returns the value of MessageID.
func (s *ToolPart) GetMessageID() string {
	return s.MessageID
}

// GetType returns the value of Type.
func (s *ToolPart) GetType() string {
	return s.Type
}

// GetCallID returns the value of CallID.
func (s *ToolPart) GetCallID() string {
	return s.CallID
}

// GetTool returns the value of Tool.
func (s *ToolPart) GetTool() string {
	return s.Tool
}

// GetState returns the value of State.
func (s *ToolPart) GetState() ToolState {
	return s.State
}

// SetID sets the value of ID.
func (s *ToolPart) SetID(val string) {
	s.ID = val
}

// SetSessionID sets the value of SessionID.
func (s *ToolPart) SetSessionID(val string) {
	s.SessionID = val
}

// SetMessageID sets the value of MessageID.
func (s *ToolPart) SetMessageID(val string) {
	s.MessageID = val
}

// SetType sets the value of Type.
func (s *ToolPart) SetType(val string) {
	s.Type = val
}

// SetCallID sets the value of CallID.
func (s *ToolPart) SetCallID(val string) {
	s.CallID = val
}

// SetTool sets the value of Tool.
func (s *ToolPart) SetTool(val string) {
	s.Tool = val
}

// SetState sets the value of State.
func (s *ToolPart) SetState(val ToolState) {
	s.State = val
}

// Ref: #/components/schemas/ToolState
// ToolState represents sum type.
type ToolState struct {
	Type               ToolStateType // switch on this field
	ToolStatePending   ToolStatePending
	ToolStateRunning   ToolStateRunning
	ToolStateCompleted ToolStateCompleted
	ToolStateError     ToolStateError
}

// ToolStateType is oneOf type of ToolState.
type ToolStateType string

// Possible values for ToolStateType.
const (
	ToolStatePendingToolState   ToolStateType = "pending"
	ToolStateRunningToolState   ToolStateType = "running"
	ToolStateCompletedToolState ToolStateType = "completed"
	ToolStateErrorToolState     ToolStateType = "error"
)

// IsToolStatePending reports whether ToolState is ToolStatePending.
func (s ToolState) IsToolStatePending() bool { return s.Type == ToolStatePendingToolState }

// IsToolStateRunning reports whether ToolState is ToolStateRunning.
func (s ToolState) IsToolStateRunning() bool { return s.Type == ToolStateRunningToolState }

// IsToolStateCompleted reports whether ToolState is ToolStateCompleted.
func (s ToolState) IsToolStateCompleted() bool { return s.Type == ToolStateCompletedToolState }

// IsToolStateError reports whether ToolState is ToolStateError.
func (s ToolState) IsToolStateError() bool { return s.Type == ToolStateErrorToolState }

// SetToolStatePending sets ToolState to ToolStatePending.
func (s *ToolState) SetToolStatePending(v ToolStatePending) {
	s.Type = ToolStatePendingToolState
	s.ToolStatePending = v
}

// GetToolStatePending returns ToolStatePending and true boolean if ToolState is ToolStatePending.
func (s ToolState) GetToolStatePending() (v ToolStatePending, ok bool) {
	if !s.IsToolStatePending() {
		return v, false
	}
	return s.ToolStatePending, true
}

// NewToolStatePendingToolState returns new ToolState from ToolStatePending.
func NewToolStatePendingToolState(v ToolStatePending) ToolState {
	var s ToolState
	s.SetToolStatePending(v)
	return s
}

// SetToolStateRunning sets ToolState to ToolStateRunning.
func (s *ToolState) SetToolStateRunning(v ToolStateRunning) {
	s.Type = ToolStateRunningToolState
	s.ToolStateRunning = v
}

// GetToolStateRunning returns ToolStateRunning and true boolean if ToolState is ToolStateRunning.
func (s ToolState) GetToolStateRunning() (v ToolStateRunning, ok bool) {
	if !s.IsToolStateRunning() {
		return v, false
	}
	return s.ToolStateRunning, true
}

// NewToolStateRunningToolState returns new ToolState from ToolStateRunning.
func NewToolStateRunningToolState(v ToolStateRunning) ToolState {
	var s ToolState
	s.SetToolStateRunning(v)
	return s
}

// SetToolStateCompleted sets ToolState to ToolStateCompleted.
func (s *ToolState) SetToolStateCompleted(v ToolStateCompleted) {
	s.Type = ToolStateCompletedToolState
	s.ToolStateCompleted = v
}

// GetToolStateCompleted returns ToolStateCompleted and true boolean if ToolState is ToolStateCompleted.
func (s ToolState) GetToolStateCompleted() (v ToolStateCompleted, ok bool) {
	if !s.IsToolStateCompleted() {
		return v, false
	}
	return s.ToolStateCompleted, true
}

// NewToolStateCompletedToolState returns new ToolState from ToolStateCompleted.
func NewToolStateCompletedToolState(v ToolStateCompleted) ToolState {
	var s ToolState
	s.SetToolStateCompleted(v)
	return s
}

// SetToolStateError sets ToolState to ToolStateError.
func (s *ToolState) SetToolStateError(v ToolStateError) {
	s.Type = ToolStateErrorToolState
	s.ToolStateError = v
}

// GetToolStateError returns ToolStateError and true boolean if ToolState is ToolStateError.
func (s ToolState) GetToolStateError() (v ToolStateError, ok bool) {
	if !s.IsToolStateError() {
		return v, false
	}
	return s.ToolStateError, true
}

// NewToolStateErrorToolState returns new ToolState from ToolStateError.
func NewToolStateErrorToolState(v ToolStateError) ToolState {
	var s ToolState
	s.SetToolStateError(v)
	return s
}

// Ref: #/components/schemas/ToolStateCompleted
type ToolStateCompleted struct {
	Status   string                     `json:"status"`
	Input    ToolStateCompletedInput    `json:"input"`
	Output   string                     `json:"output"`
	Title    string                     `json:"title"`
	Metadata ToolStateCompletedMetadata `json:"metadata"`
	Time     ToolStateCompletedTime     `json:"time"`
}

// GetStatus returns the value of Status.
func (s *ToolStateCompleted) GetStatus() string {
	return s.Status
}

// GetInput returns the value of Input.
func (s *ToolStateCompleted) GetInput() ToolStateCompletedInput {
	return s.Input
}

// GetOutput returns the value of Output.
func (s *ToolStateCompleted) GetOutput() string {
	return s.Output
}

// GetTitle returns the value of Title.
func (s *ToolStateCompleted) GetTitle() string {
	return s.Title
}

// GetMetadata returns the value of Metadata.
func (s *ToolStateCompleted) GetMetadata() ToolStateCompletedMetadata {
	return s.Metadata
}

// GetTime returns the value of Time.
func (s *ToolStateCompleted) GetTime() ToolStateCompletedTime {
	return s.Time
}

// SetStatus sets the value of Status.
func (s *ToolStateCompleted) SetStatus(val string) {
	s.Status = val
}

// SetInput sets the value of Input.
func (s *ToolStateCompleted) SetInput(val ToolStateCompletedInput) {
	s.Input = val
}

// SetOutput sets the value of Output.
func (s *ToolStateCompleted) SetOutput(val string) {
	s.Output = val
}

// SetTitle sets the value of Title.
func (s *ToolStateCompleted) SetTitle(val string) {
	s.Title = val
}

// SetMetadata sets the value of Metadata.
func (s *ToolStateCompleted) SetMetadata(val ToolStateCompletedMetadata) {
	s.Metadata = val
}

// SetTime sets the value of Time.
func (s *ToolStateCompleted) SetTime(val ToolStateCompletedTime) {
	s.Time = val
}

type ToolStateCompletedInput map[string]jx.Raw

func (s *ToolStateCompletedInput) init() ToolStateCompletedInput {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ToolStateCompletedMetadata map[string]jx.Raw

func (s *ToolStateCompletedMetadata) init() ToolStateCompletedMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ToolStateCompletedTime struct {
	Start float64 `json:"start"`
	End   float64 `json:"end"`
}

// GetStart returns the value of Start.
func (s *ToolStateCompletedTime) GetStart() float64 {
	return s.Start
}

// GetEnd returns the value of End.
func (s *ToolStateCompletedTime) GetEnd() float64 {
	return s.End
}

// SetStart sets the value of Start.
func (s *ToolStateCompletedTime) SetStart(val float64) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *ToolStateCompletedTime) SetEnd(val float64) {
	s.End = val
}

// Ref: #/components/schemas/ToolStateError
type ToolStateError struct {
	Status   string                    `json:"status"`
	Input    ToolStateErrorInput       `json:"input"`
	Error    string                    `json:"error"`
	Metadata OptToolStateErrorMetadata `json:"metadata"`
	Time     ToolStateErrorTime        `json:"time"`
}

// GetStatus returns the value of Status.
func (s *ToolStateError) GetStatus() string {
	return s.Status
}

// GetInput returns the value of Input.
func (s *ToolStateError) GetInput() ToolStateErrorInput {
	return s.Input
}

// GetError returns the value of Error.
func (s *ToolStateError) GetError() string {
	return s.Error
}

// GetMetadata returns the value of Metadata.
func (s *ToolStateError) GetMetadata() OptToolStateErrorMetadata {
	return s.Metadata
}

// GetTime returns the value of Time.
func (s *ToolStateError) GetTime() ToolStateErrorTime {
	return s.Time
}

// SetStatus sets the value of Status.
func (s *ToolStateError) SetStatus(val string) {
	s.Status = val
}

// SetInput sets the value of Input.
func (s *ToolStateError) SetInput(val ToolStateErrorInput) {
	s.Input = val
}

// SetError sets the value of Error.
func (s *ToolStateError) SetError(val string) {
	s.Error = val
}

// SetMetadata sets the value of Metadata.
func (s *ToolStateError) SetMetadata(val OptToolStateErrorMetadata) {
	s.Metadata = val
}

// SetTime sets the value of Time.
func (s *ToolStateError) SetTime(val ToolStateErrorTime) {
	s.Time = val
}

type ToolStateErrorInput map[string]jx.Raw

func (s *ToolStateErrorInput) init() ToolStateErrorInput {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ToolStateErrorMetadata map[string]jx.Raw

func (s *ToolStateErrorMetadata) init() ToolStateErrorMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ToolStateErrorTime struct {
	Start float64 `json:"start"`
	End   float64 `json:"end"`
}

// GetStart returns the value of Start.
func (s *ToolStateErrorTime) GetStart() float64 {
	return s.Start
}

// GetEnd returns the value of End.
func (s *ToolStateErrorTime) GetEnd() float64 {
	return s.End
}

// SetStart sets the value of Start.
func (s *ToolStateErrorTime) SetStart(val float64) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *ToolStateErrorTime) SetEnd(val float64) {
	s.End = val
}

// Ref: #/components/schemas/ToolStatePending
type ToolStatePending struct {
	Status string `json:"status"`
}

// GetStatus returns the value of Status.
func (s *ToolStatePending) GetStatus() string {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *ToolStatePending) SetStatus(val string) {
	s.Status = val
}

// Ref: #/components/schemas/ToolStateRunning
type ToolStateRunning struct {
	Status   string                      `json:"status"`
	Input    jx.Raw                      `json:"input"`
	Title    OptString                   `json:"title"`
	Metadata OptToolStateRunningMetadata `json:"metadata"`
	Time     ToolStateRunningTime        `json:"time"`
}

// GetStatus returns the value of Status.
func (s *ToolStateRunning) GetStatus() string {
	return s.Status
}

// GetInput returns the value of Input.
func (s *ToolStateRunning) GetInput() jx.Raw {
	return s.Input
}

// GetTitle returns the value of Title.
func (s *ToolStateRunning) GetTitle() OptString {
	return s.Title
}

// GetMetadata returns the value of Metadata.
func (s *ToolStateRunning) GetMetadata() OptToolStateRunningMetadata {
	return s.Metadata
}

// GetTime returns the value of Time.
func (s *ToolStateRunning) GetTime() ToolStateRunningTime {
	return s.Time
}

// SetStatus sets the value of Status.
func (s *ToolStateRunning) SetStatus(val string) {
	s.Status = val
}

// SetInput sets the value of Input.
func (s *ToolStateRunning) SetInput(val jx.Raw) {
	s.Input = val
}

// SetTitle sets the value of Title.
func (s *ToolStateRunning) SetTitle(val OptString) {
	s.Title = val
}

// SetMetadata sets the value of Metadata.
func (s *ToolStateRunning) SetMetadata(val OptToolStateRunningMetadata) {
	s.Metadata = val
}

// SetTime sets the value of Time.
func (s *ToolStateRunning) SetTime(val ToolStateRunningTime) {
	s.Time = val
}

type ToolStateRunningMetadata map[string]jx.Raw

func (s *ToolStateRunningMetadata) init() ToolStateRunningMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ToolStateRunningTime struct {
	Start float64 `json:"start"`
}

// GetStart returns the value of Start.
func (s *ToolStateRunningTime) GetStart() float64 {
	return s.Start
}

// SetStart sets the value of Start.
func (s *ToolStateRunningTime) SetStart(val float64) {
	s.Start = val
}

type TuiAppendPromptReq struct {
	Text string `json:"text"`
}

// GetText returns the value of Text.
func (s *TuiAppendPromptReq) GetText() string {
	return s.Text
}

// SetText sets the value of Text.
func (s *TuiAppendPromptReq) SetText(val string) {
	s.Text = val
}

type TuiExecuteCommandReq struct {
	Command string `json:"command"`
}

// GetCommand returns the value of Command.
func (s *TuiExecuteCommandReq) GetCommand() string {
	return s.Command
}

// SetCommand sets the value of Command.
func (s *TuiExecuteCommandReq) SetCommand(val string) {
	s.Command = val
}

type TuiShowToastReq struct {
	Title   OptString              `json:"title"`
	Message string                 `json:"message"`
	Variant TuiShowToastReqVariant `json:"variant"`
}

// GetTitle returns the value of Title.
func (s *TuiShowToastReq) GetTitle() OptString {
	return s.Title
}

// GetMessage returns the value of Message.
func (s *TuiShowToastReq) GetMessage() string {
	return s.Message
}

// GetVariant returns the value of Variant.
func (s *TuiShowToastReq) GetVariant() TuiShowToastReqVariant {
	return s.Variant
}

// SetTitle sets the value of Title.
func (s *TuiShowToastReq) SetTitle(val OptString) {
	s.Title = val
}

// SetMessage sets the value of Message.
func (s *TuiShowToastReq) SetMessage(val string) {
	s.Message = val
}

// SetVariant sets the value of Variant.
func (s *TuiShowToastReq) SetVariant(val TuiShowToastReqVariant) {
	s.Variant = val
}

type TuiShowToastReqVariant string

const (
	TuiShowToastReqVariantInfo    TuiShowToastReqVariant = "info"
	TuiShowToastReqVariantSuccess TuiShowToastReqVariant = "success"
	TuiShowToastReqVariantWarning TuiShowToastReqVariant = "warning"
	TuiShowToastReqVariantError   TuiShowToastReqVariant = "error"
)

// AllValues returns all TuiShowToastReqVariant values.
func (TuiShowToastReqVariant) AllValues() []TuiShowToastReqVariant {
	return []TuiShowToastReqVariant{
		TuiShowToastReqVariantInfo,
		TuiShowToastReqVariantSuccess,
		TuiShowToastReqVariantWarning,
		TuiShowToastReqVariantError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TuiShowToastReqVariant) MarshalText() ([]byte, error) {
	switch s {
	case TuiShowToastReqVariantInfo:
		return []byte(s), nil
	case TuiShowToastReqVariantSuccess:
		return []byte(s), nil
	case TuiShowToastReqVariantWarning:
		return []byte(s), nil
	case TuiShowToastReqVariantError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TuiShowToastReqVariant) UnmarshalText(data []byte) error {
	switch TuiShowToastReqVariant(data) {
	case TuiShowToastReqVariantInfo:
		*s = TuiShowToastReqVariantInfo
		return nil
	case TuiShowToastReqVariantSuccess:
		*s = TuiShowToastReqVariantSuccess
		return nil
	case TuiShowToastReqVariantWarning:
		*s = TuiShowToastReqVariantWarning
		return nil
	case TuiShowToastReqVariantError:
		*s = TuiShowToastReqVariantError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UnknownError
type UnknownError struct {
	Name string           `json:"name"`
	Data UnknownErrorData `json:"data"`
}

// GetName returns the value of Name.
func (s *UnknownError) GetName() string {
	return s.Name
}

// GetData returns the value of Data.
func (s *UnknownError) GetData() UnknownErrorData {
	return s.Data
}

// SetName sets the value of Name.
func (s *UnknownError) SetName(val string) {
	s.Name = val
}

// SetData sets the value of Data.
func (s *UnknownError) SetData(val UnknownErrorData) {
	s.Data = val
}

type UnknownErrorData struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *UnknownErrorData) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *UnknownErrorData) SetMessage(val string) {
	s.Message = val
}

// Ref: #/components/schemas/UserMessage
type UserMessage struct {
	ID        string          `json:"id"`
	SessionID string          `json:"sessionID"`
	Role      string          `json:"role"`
	Time      UserMessageTime `json:"time"`
}

// GetID returns the value of ID.
func (s *UserMessage) GetID() string {
	return s.ID
}

// GetSessionID returns the value of SessionID.
func (s *UserMessage) GetSessionID() string {
	return s.SessionID
}

// GetRole returns the value of Role.
func (s *UserMessage) GetRole() string {
	return s.Role
}

// GetTime returns the value of Time.
func (s *UserMessage) GetTime() UserMessageTime {
	return s.Time
}

// SetID sets the value of ID.
func (s *UserMessage) SetID(val string) {
	s.ID = val
}

// SetSessionID sets the value of SessionID.
func (s *UserMessage) SetSessionID(val string) {
	s.SessionID = val
}

// SetRole sets the value of Role.
func (s *UserMessage) SetRole(val string) {
	s.Role = val
}

// SetTime sets the value of Time.
func (s *UserMessage) SetTime(val UserMessageTime) {
	s.Time = val
}

type UserMessageTime struct {
	Created float64 `json:"created"`
}

// GetCreated returns the value of Created.
func (s *UserMessageTime) GetCreated() float64 {
	return s.Created
}

// SetCreated sets the value of Created.
func (s *UserMessageTime) SetCreated(val float64) {
	s.Created = val
}

// Ref: #/components/schemas/WellKnownAuth
type WellKnownAuth struct {
	Type  string `json:"type"`
	Key   string `json:"key"`
	Token string `json:"token"`
}

// GetType returns the value of Type.
func (s *WellKnownAuth) GetType() string {
	return s.Type
}

// GetKey returns the value of Key.
func (s *WellKnownAuth) GetKey() string {
	return s.Key
}

// GetToken returns the value of Token.
func (s *WellKnownAuth) GetToken() string {
	return s.Token
}

// SetType sets the value of Type.
func (s *WellKnownAuth) SetType(val string) {
	s.Type = val
}

// SetKey sets the value of Key.
func (s *WellKnownAuth) SetKey(val string) {
	s.Key = val
}

// SetToken sets the value of Token.
func (s *WellKnownAuth) SetToken(val string) {
	s.Token = val
}
