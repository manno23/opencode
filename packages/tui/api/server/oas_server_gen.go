// Code generated by ogen, DO NOT EDIT.

package server

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AppGet implements app.get operation.
	//
	// Get app info.
	//
	// GET /app
	AppGet(ctx context.Context) (*App, error)
	// AppInit implements app.init operation.
	//
	// Initialize the app.
	//
	// POST /app/init
	AppInit(ctx context.Context) (bool, error)
	// AppLog implements app.log operation.
	//
	// Write a log entry to the server logs.
	//
	// POST /log
	AppLog(ctx context.Context, req OptAppLogReq) (bool, error)
	// AuthSet implements auth.set operation.
	//
	// Set authentication credentials.
	//
	// PUT /auth/{id}
	AuthSet(ctx context.Context, req OptAuth, params AuthSetParams) (AuthSetRes, error)
	// CommandList implements command.list operation.
	//
	// List all commands.
	//
	// GET /command
	CommandList(ctx context.Context) ([]Command, error)
	// ConfigProviders implements config.providers operation.
	//
	// List all providers.
	//
	// GET /config/providers
	ConfigProviders(ctx context.Context) (*ConfigProvidersOK, error)
	// EventSubscribe implements event.subscribe operation.
	//
	// Get events.
	//
	// GET /event
	EventSubscribe(ctx context.Context) (EventSubscribeOK, error)
	// FileRead implements file.read operation.
	//
	// Read a file.
	//
	// GET /file
	FileRead(ctx context.Context, params FileReadParams) (*FileReadOK, error)
	// FileStatus implements file.status operation.
	//
	// Get file status.
	//
	// GET /file/status
	FileStatus(ctx context.Context) ([]File, error)
	// FindFiles implements find.files operation.
	//
	// Find files.
	//
	// GET /find/file
	FindFiles(ctx context.Context, params FindFilesParams) ([]string, error)
	// FindSymbols implements find.symbols operation.
	//
	// Find workspace symbols.
	//
	// GET /find/symbol
	FindSymbols(ctx context.Context, params FindSymbolsParams) ([]Symbol, error)
	// FindText implements find.text operation.
	//
	// Find text in files.
	//
	// GET /find
	FindText(ctx context.Context, params FindTextParams) ([]FindTextOKItem, error)
	// PostSessionByIdPermissionsByPermissionID implements postSessionByIdPermissionsByPermissionID operation.
	//
	// Respond to a permission request.
	//
	// POST /session/{id}/permissions/{permissionID}
	PostSessionByIdPermissionsByPermissionID(ctx context.Context, req OptPostSessionByIdPermissionsByPermissionIDReq, params PostSessionByIdPermissionsByPermissionIDParams) (bool, error)
	// SessionAbort implements session.abort operation.
	//
	// Abort a session.
	//
	// POST /session/{id}/abort
	SessionAbort(ctx context.Context, params SessionAbortParams) (bool, error)
	// SessionChat implements session.chat operation.
	//
	// Create and send a new message to a session.
	//
	// POST /session/{id}/message
	SessionChat(ctx context.Context, req OptSessionChatReq, params SessionChatParams) (*SessionChatOK, error)
	// SessionChildren implements session.children operation.
	//
	// Get a session's children.
	//
	// GET /session/{id}/children
	SessionChildren(ctx context.Context, params SessionChildrenParams) ([]Session, error)
	// SessionCommand implements session.command operation.
	//
	// Send a new command to a session.
	//
	// POST /session/{id}/command
	SessionCommand(ctx context.Context, req OptSessionCommandReq, params SessionCommandParams) (*SessionCommandOK, error)
	// SessionCreate implements session.create operation.
	//
	// Create a new session.
	//
	// POST /session
	SessionCreate(ctx context.Context, req OptSessionCreateReq) (SessionCreateRes, error)
	// SessionDelete implements session.delete operation.
	//
	// Delete a session and all its data.
	//
	// DELETE /session/{id}
	SessionDelete(ctx context.Context, params SessionDeleteParams) (bool, error)
	// SessionGet implements session.get operation.
	//
	// Get session.
	//
	// GET /session/{id}
	SessionGet(ctx context.Context, params SessionGetParams) (*Session, error)
	// SessionInit implements session.init operation.
	//
	// Analyze the app and create an AGENTS.md file.
	//
	// POST /session/{id}/init
	SessionInit(ctx context.Context, req OptSessionInitReq, params SessionInitParams) (bool, error)
	// SessionList implements session.list operation.
	//
	// List all sessions.
	//
	// GET /session
	SessionList(ctx context.Context) ([]Session, error)
	// SessionMessage implements session.message operation.
	//
	// Get a message from a session.
	//
	// GET /session/{id}/message/{messageID}
	SessionMessage(ctx context.Context, params SessionMessageParams) (*SessionMessageOK, error)
	// SessionMessages implements session.messages operation.
	//
	// List messages for a session.
	//
	// GET /session/{id}/message
	SessionMessages(ctx context.Context, params SessionMessagesParams) ([]SessionMessagesOKItem, error)
	// SessionRevert implements session.revert operation.
	//
	// Revert a message.
	//
	// POST /session/{id}/revert
	SessionRevert(ctx context.Context, req OptSessionRevertReq, params SessionRevertParams) (*Session, error)
	// SessionShare implements session.share operation.
	//
	// Share a session.
	//
	// POST /session/{id}/share
	SessionShare(ctx context.Context, params SessionShareParams) (*Session, error)
	// SessionShell implements session.shell operation.
	//
	// Run a shell command.
	//
	// POST /session/{id}/shell
	SessionShell(ctx context.Context, req OptSessionShellReq, params SessionShellParams) (*AssistantMessage, error)
	// SessionSummarize implements session.summarize operation.
	//
	// Summarize the session.
	//
	// POST /session/{id}/summarize
	SessionSummarize(ctx context.Context, req OptSessionSummarizeReq, params SessionSummarizeParams) (bool, error)
	// SessionUnrevert implements session.unrevert operation.
	//
	// Restore all reverted messages.
	//
	// POST /session/{id}/unrevert
	SessionUnrevert(ctx context.Context, params SessionUnrevertParams) (*Session, error)
	// SessionUnshare implements session.unshare operation.
	//
	// Unshare the session.
	//
	// DELETE /session/{id}/share
	SessionUnshare(ctx context.Context, params SessionUnshareParams) (*Session, error)
	// SessionUpdate implements session.update operation.
	//
	// Update session properties.
	//
	// PATCH /session/{id}
	SessionUpdate(ctx context.Context, req OptSessionUpdateReq, params SessionUpdateParams) (*Session, error)
	// TuiAppendPrompt implements tui.appendPrompt operation.
	//
	// Append prompt to the TUI.
	//
	// POST /tui/append-prompt
	TuiAppendPrompt(ctx context.Context, req OptTuiAppendPromptReq) (bool, error)
	// TuiClearPrompt implements tui.clearPrompt operation.
	//
	// Clear the prompt.
	//
	// POST /tui/clear-prompt
	TuiClearPrompt(ctx context.Context) (bool, error)
	// TuiExecuteCommand implements tui.executeCommand operation.
	//
	// Execute a TUI command (e.g. agent_cycle).
	//
	// POST /tui/execute-command
	TuiExecuteCommand(ctx context.Context, req OptTuiExecuteCommandReq) (bool, error)
	// TuiOpenHelp implements tui.openHelp operation.
	//
	// Open the help dialog.
	//
	// POST /tui/open-help
	TuiOpenHelp(ctx context.Context) (bool, error)
	// TuiOpenModels implements tui.openModels operation.
	//
	// Open the model dialog.
	//
	// POST /tui/open-models
	TuiOpenModels(ctx context.Context) (bool, error)
	// TuiOpenSessions implements tui.openSessions operation.
	//
	// Open the session dialog.
	//
	// POST /tui/open-sessions
	TuiOpenSessions(ctx context.Context) (bool, error)
	// TuiOpenThemes implements tui.openThemes operation.
	//
	// Open the theme dialog.
	//
	// POST /tui/open-themes
	TuiOpenThemes(ctx context.Context) (bool, error)
	// TuiShowToast implements tui.showToast operation.
	//
	// Show a toast notification in the TUI.
	//
	// POST /tui/show-toast
	TuiShowToast(ctx context.Context, req OptTuiShowToastReq) (bool, error)
	// TuiSubmitPrompt implements tui.submitPrompt operation.
	//
	// Submit the prompt.
	//
	// POST /tui/submit-prompt
	TuiSubmitPrompt(ctx context.Context) (bool, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
