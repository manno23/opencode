// Code generated by ogen, DO NOT EDIT.

package server

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"

				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "pp"

					if l := len("pp"); len(elem) >= l && elem[0:l] == "pp" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleAppGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/init"

						if l := len("/init"); len(elem) >= l && elem[0:l] == "/init" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleAppInitRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				case 'u': // Prefix: "uth/"

					if l := len("uth/"); len(elem) >= l && elem[0:l] == "uth/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "PUT":
							s.handleAuthSetRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "PUT")
						}

						return
					}

				}

			case 'c': // Prefix: "co"

				if l := len("co"); len(elem) >= l && elem[0:l] == "co" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'm': // Prefix: "mmand"

					if l := len("mmand"); len(elem) >= l && elem[0:l] == "mmand" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleCommandListRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				case 'n': // Prefix: "nfig/providers"

					if l := len("nfig/providers"); len(elem) >= l && elem[0:l] == "nfig/providers" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleConfigProvidersRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				}

			case 'e': // Prefix: "event"

				if l := len("event"); len(elem) >= l && elem[0:l] == "event" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleEventSubscribeRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case 'f': // Prefix: "fi"

				if l := len("fi"); len(elem) >= l && elem[0:l] == "fi" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "le"

					if l := len("le"); len(elem) >= l && elem[0:l] == "le" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleFileReadRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/status"

						if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleFileStatusRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					}

				case 'n': // Prefix: "nd"

					if l := len("nd"); len(elem) >= l && elem[0:l] == "nd" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleFindTextRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'f': // Prefix: "file"

							if l := len("file"); len(elem) >= l && elem[0:l] == "file" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleFindFilesRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						case 's': // Prefix: "symbol"

							if l := len("symbol"); len(elem) >= l && elem[0:l] == "symbol" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleFindSymbolsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						}

					}

				}

			case 'l': // Prefix: "log"

				if l := len("log"); len(elem) >= l && elem[0:l] == "log" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleAppLogRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

			case 's': // Prefix: "session"

				if l := len("session"); len(elem) >= l && elem[0:l] == "session" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleSessionListRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleSessionCreateRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleSessionDeleteRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleSessionGetRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handleSessionUpdateRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "abort"

							if l := len("abort"); len(elem) >= l && elem[0:l] == "abort" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleSessionAbortRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'c': // Prefix: "c"

							if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hildren"

								if l := len("hildren"); len(elem) >= l && elem[0:l] == "hildren" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleSessionChildrenRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

							case 'o': // Prefix: "ommand"

								if l := len("ommand"); len(elem) >= l && elem[0:l] == "ommand" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSessionCommandRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							}

						case 'i': // Prefix: "init"

							if l := len("init"); len(elem) >= l && elem[0:l] == "init" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleSessionInitRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'm': // Prefix: "message"

							if l := len("message"); len(elem) >= l && elem[0:l] == "message" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleSessionMessagesRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "POST":
									s.handleSessionChatRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "messageID"
								// Leaf parameter, slashes are prohibited
								idx := strings.IndexByte(elem, '/')
								if idx >= 0 {
									break
								}
								args[1] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleSessionMessageRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

							}

						case 'p': // Prefix: "permissions/"

							if l := len("permissions/"); len(elem) >= l && elem[0:l] == "permissions/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "permissionID"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handlePostSessionByIdPermissionsByPermissionIDRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'r': // Prefix: "revert"

							if l := len("revert"); len(elem) >= l && elem[0:l] == "revert" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleSessionRevertRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 's': // Prefix: "s"

							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "h"

								if l := len("h"); len(elem) >= l && elem[0:l] == "h" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "are"

									if l := len("are"); len(elem) >= l && elem[0:l] == "are" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleSessionUnshareRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										case "POST":
											s.handleSessionShareRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,POST")
										}

										return
									}

								case 'e': // Prefix: "ell"

									if l := len("ell"); len(elem) >= l && elem[0:l] == "ell" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleSessionShellRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								}

							case 'u': // Prefix: "ummarize"

								if l := len("ummarize"); len(elem) >= l && elem[0:l] == "ummarize" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSessionSummarizeRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							}

						case 'u': // Prefix: "unrevert"

							if l := len("unrevert"); len(elem) >= l && elem[0:l] == "unrevert" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleSessionUnrevertRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						}

					}

				}

			case 't': // Prefix: "tui/"

				if l := len("tui/"); len(elem) >= l && elem[0:l] == "tui/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "append-prompt"

					if l := len("append-prompt"); len(elem) >= l && elem[0:l] == "append-prompt" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleTuiAppendPromptRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'c': // Prefix: "clear-prompt"

					if l := len("clear-prompt"); len(elem) >= l && elem[0:l] == "clear-prompt" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleTuiClearPromptRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'e': // Prefix: "execute-command"

					if l := len("execute-command"); len(elem) >= l && elem[0:l] == "execute-command" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleTuiExecuteCommandRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'o': // Prefix: "open-"

					if l := len("open-"); len(elem) >= l && elem[0:l] == "open-" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'h': // Prefix: "help"

						if l := len("help"); len(elem) >= l && elem[0:l] == "help" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTuiOpenHelpRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'm': // Prefix: "models"

						if l := len("models"); len(elem) >= l && elem[0:l] == "models" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTuiOpenModelsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 's': // Prefix: "sessions"

						if l := len("sessions"); len(elem) >= l && elem[0:l] == "sessions" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTuiOpenSessionsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 't': // Prefix: "themes"

						if l := len("themes"); len(elem) >= l && elem[0:l] == "themes" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTuiOpenThemesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'h': // Prefix: "how-toast"

						if l := len("how-toast"); len(elem) >= l && elem[0:l] == "how-toast" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTuiShowToastRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'u': // Prefix: "ubmit-prompt"

						if l := len("ubmit-prompt"); len(elem) >= l && elem[0:l] == "ubmit-prompt" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTuiSubmitPromptRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"

				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "pp"

					if l := len("pp"); len(elem) >= l && elem[0:l] == "pp" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = AppGetOperation
							r.summary = ""
							r.operationID = "app.get"
							r.pathPattern = "/app"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/init"

						if l := len("/init"); len(elem) >= l && elem[0:l] == "/init" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = AppInitOperation
								r.summary = ""
								r.operationID = "app.init"
								r.pathPattern = "/app/init"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					}

				case 'u': // Prefix: "uth/"

					if l := len("uth/"); len(elem) >= l && elem[0:l] == "uth/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "PUT":
							r.name = AuthSetOperation
							r.summary = ""
							r.operationID = "auth.set"
							r.pathPattern = "/auth/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				}

			case 'c': // Prefix: "co"

				if l := len("co"); len(elem) >= l && elem[0:l] == "co" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'm': // Prefix: "mmand"

					if l := len("mmand"); len(elem) >= l && elem[0:l] == "mmand" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = CommandListOperation
							r.summary = ""
							r.operationID = "command.list"
							r.pathPattern = "/command"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'n': // Prefix: "nfig/providers"

					if l := len("nfig/providers"); len(elem) >= l && elem[0:l] == "nfig/providers" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = ConfigProvidersOperation
							r.summary = ""
							r.operationID = "config.providers"
							r.pathPattern = "/config/providers"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			case 'e': // Prefix: "event"

				if l := len("event"); len(elem) >= l && elem[0:l] == "event" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = EventSubscribeOperation
						r.summary = ""
						r.operationID = "event.subscribe"
						r.pathPattern = "/event"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'f': // Prefix: "fi"

				if l := len("fi"); len(elem) >= l && elem[0:l] == "fi" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "le"

					if l := len("le"); len(elem) >= l && elem[0:l] == "le" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = FileReadOperation
							r.summary = ""
							r.operationID = "file.read"
							r.pathPattern = "/file"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/status"

						if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = FileStatusOperation
								r.summary = ""
								r.operationID = "file.status"
								r.pathPattern = "/file/status"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					}

				case 'n': // Prefix: "nd"

					if l := len("nd"); len(elem) >= l && elem[0:l] == "nd" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = FindTextOperation
							r.summary = ""
							r.operationID = "find.text"
							r.pathPattern = "/find"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'f': // Prefix: "file"

							if l := len("file"); len(elem) >= l && elem[0:l] == "file" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = FindFilesOperation
									r.summary = ""
									r.operationID = "find.files"
									r.pathPattern = "/find/file"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 's': // Prefix: "symbol"

							if l := len("symbol"); len(elem) >= l && elem[0:l] == "symbol" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = FindSymbolsOperation
									r.summary = ""
									r.operationID = "find.symbols"
									r.pathPattern = "/find/symbol"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					}

				}

			case 'l': // Prefix: "log"

				if l := len("log"); len(elem) >= l && elem[0:l] == "log" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = AppLogOperation
						r.summary = ""
						r.operationID = "app.log"
						r.pathPattern = "/log"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 's': // Prefix: "session"

				if l := len("session"); len(elem) >= l && elem[0:l] == "session" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = SessionListOperation
						r.summary = ""
						r.operationID = "session.list"
						r.pathPattern = "/session"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = SessionCreateOperation
						r.summary = ""
						r.operationID = "session.create"
						r.pathPattern = "/session"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = SessionDeleteOperation
							r.summary = ""
							r.operationID = "session.delete"
							r.pathPattern = "/session/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = SessionGetOperation
							r.summary = ""
							r.operationID = "session.get"
							r.pathPattern = "/session/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = SessionUpdateOperation
							r.summary = ""
							r.operationID = "session.update"
							r.pathPattern = "/session/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "abort"

							if l := len("abort"); len(elem) >= l && elem[0:l] == "abort" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = SessionAbortOperation
									r.summary = ""
									r.operationID = "session.abort"
									r.pathPattern = "/session/{id}/abort"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						case 'c': // Prefix: "c"

							if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hildren"

								if l := len("hildren"); len(elem) >= l && elem[0:l] == "hildren" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = SessionChildrenOperation
										r.summary = ""
										r.operationID = "session.children"
										r.pathPattern = "/session/{id}/children"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							case 'o': // Prefix: "ommand"

								if l := len("ommand"); len(elem) >= l && elem[0:l] == "ommand" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SessionCommandOperation
										r.summary = ""
										r.operationID = "session.command"
										r.pathPattern = "/session/{id}/command"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							}

						case 'i': // Prefix: "init"

							if l := len("init"); len(elem) >= l && elem[0:l] == "init" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = SessionInitOperation
									r.summary = ""
									r.operationID = "session.init"
									r.pathPattern = "/session/{id}/init"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						case 'm': // Prefix: "message"

							if l := len("message"); len(elem) >= l && elem[0:l] == "message" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = SessionMessagesOperation
									r.summary = ""
									r.operationID = "session.messages"
									r.pathPattern = "/session/{id}/message"
									r.args = args
									r.count = 1
									return r, true
								case "POST":
									r.name = SessionChatOperation
									r.summary = ""
									r.operationID = "session.chat"
									r.pathPattern = "/session/{id}/message"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "messageID"
								// Leaf parameter, slashes are prohibited
								idx := strings.IndexByte(elem, '/')
								if idx >= 0 {
									break
								}
								args[1] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = SessionMessageOperation
										r.summary = ""
										r.operationID = "session.message"
										r.pathPattern = "/session/{id}/message/{messageID}"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

							}

						case 'p': // Prefix: "permissions/"

							if l := len("permissions/"); len(elem) >= l && elem[0:l] == "permissions/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "permissionID"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = PostSessionByIdPermissionsByPermissionIDOperation
									r.summary = ""
									r.operationID = "postSessionByIdPermissionsByPermissionID"
									r.pathPattern = "/session/{id}/permissions/{permissionID}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}

						case 'r': // Prefix: "revert"

							if l := len("revert"); len(elem) >= l && elem[0:l] == "revert" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = SessionRevertOperation
									r.summary = ""
									r.operationID = "session.revert"
									r.pathPattern = "/session/{id}/revert"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						case 's': // Prefix: "s"

							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "h"

								if l := len("h"); len(elem) >= l && elem[0:l] == "h" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "are"

									if l := len("are"); len(elem) >= l && elem[0:l] == "are" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = SessionUnshareOperation
											r.summary = ""
											r.operationID = "session.unshare"
											r.pathPattern = "/session/{id}/share"
											r.args = args
											r.count = 1
											return r, true
										case "POST":
											r.name = SessionShareOperation
											r.summary = ""
											r.operationID = "session.share"
											r.pathPattern = "/session/{id}/share"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								case 'e': // Prefix: "ell"

									if l := len("ell"); len(elem) >= l && elem[0:l] == "ell" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = SessionShellOperation
											r.summary = ""
											r.operationID = "session.shell"
											r.pathPattern = "/session/{id}/shell"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								}

							case 'u': // Prefix: "ummarize"

								if l := len("ummarize"); len(elem) >= l && elem[0:l] == "ummarize" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SessionSummarizeOperation
										r.summary = ""
										r.operationID = "session.summarize"
										r.pathPattern = "/session/{id}/summarize"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							}

						case 'u': // Prefix: "unrevert"

							if l := len("unrevert"); len(elem) >= l && elem[0:l] == "unrevert" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = SessionUnrevertOperation
									r.summary = ""
									r.operationID = "session.unrevert"
									r.pathPattern = "/session/{id}/unrevert"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						}

					}

				}

			case 't': // Prefix: "tui/"

				if l := len("tui/"); len(elem) >= l && elem[0:l] == "tui/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "append-prompt"

					if l := len("append-prompt"); len(elem) >= l && elem[0:l] == "append-prompt" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = TuiAppendPromptOperation
							r.summary = ""
							r.operationID = "tui.appendPrompt"
							r.pathPattern = "/tui/append-prompt"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'c': // Prefix: "clear-prompt"

					if l := len("clear-prompt"); len(elem) >= l && elem[0:l] == "clear-prompt" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = TuiClearPromptOperation
							r.summary = ""
							r.operationID = "tui.clearPrompt"
							r.pathPattern = "/tui/clear-prompt"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'e': // Prefix: "execute-command"

					if l := len("execute-command"); len(elem) >= l && elem[0:l] == "execute-command" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = TuiExecuteCommandOperation
							r.summary = ""
							r.operationID = "tui.executeCommand"
							r.pathPattern = "/tui/execute-command"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'o': // Prefix: "open-"

					if l := len("open-"); len(elem) >= l && elem[0:l] == "open-" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'h': // Prefix: "help"

						if l := len("help"); len(elem) >= l && elem[0:l] == "help" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = TuiOpenHelpOperation
								r.summary = ""
								r.operationID = "tui.openHelp"
								r.pathPattern = "/tui/open-help"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'm': // Prefix: "models"

						if l := len("models"); len(elem) >= l && elem[0:l] == "models" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = TuiOpenModelsOperation
								r.summary = ""
								r.operationID = "tui.openModels"
								r.pathPattern = "/tui/open-models"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 's': // Prefix: "sessions"

						if l := len("sessions"); len(elem) >= l && elem[0:l] == "sessions" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = TuiOpenSessionsOperation
								r.summary = ""
								r.operationID = "tui.openSessions"
								r.pathPattern = "/tui/open-sessions"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 't': // Prefix: "themes"

						if l := len("themes"); len(elem) >= l && elem[0:l] == "themes" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = TuiOpenThemesOperation
								r.summary = ""
								r.operationID = "tui.openThemes"
								r.pathPattern = "/tui/open-themes"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					}

				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'h': // Prefix: "how-toast"

						if l := len("how-toast"); len(elem) >= l && elem[0:l] == "how-toast" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = TuiShowToastOperation
								r.summary = ""
								r.operationID = "tui.showToast"
								r.pathPattern = "/tui/show-toast"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'u': // Prefix: "ubmit-prompt"

						if l := len("ubmit-prompt"); len(elem) >= l && elem[0:l] == "ubmit-prompt" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = TuiSubmitPromptOperation
								r.summary = ""
								r.operationID = "tui.submitPrompt"
								r.pathPattern = "/tui/submit-prompt"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					}

				}

			}

		}
	}
	return r, false
}
