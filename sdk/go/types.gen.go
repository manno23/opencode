// Package opencode provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package opencode

import (
	"encoding/json"
	"errors"
	"fmt"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ConfigShare.
const (
	ConfigShareAuto     ConfigShare = "auto"
	ConfigShareDisabled ConfigShare = "disabled"
	ConfigShareManual   ConfigShare = "manual"
)

// Defines values for FileStatus.
const (
	Added    FileStatus = "added"
	Deleted  FileStatus = "deleted"
	Modified FileStatus = "modified"
)

// Defines values for FileNodeType.
const (
	FileNodeTypeDirectory FileNodeType = "directory"
	FileNodeTypeFile      FileNodeType = "file"
)

// Defines values for LayoutConfig.
const (
	LayoutConfigAuto    LayoutConfig = "auto"
	LayoutConfigStretch LayoutConfig = "stretch"
)

// Defines values for AppLogJSONBodyLevel.
const (
	AppLogJSONBodyLevelDebug AppLogJSONBodyLevel = "debug"
	AppLogJSONBodyLevelError AppLogJSONBodyLevel = "error"
	AppLogJSONBodyLevelInfo  AppLogJSONBodyLevel = "info"
	AppLogJSONBodyLevelWarn  AppLogJSONBodyLevel = "warn"
)

// Defines values for PostSessionByIdPermissionsByPermissionIDJSONBodyResponse.
const (
	Always PostSessionByIdPermissionsByPermissionIDJSONBodyResponse = "always"
	Once   PostSessionByIdPermissionsByPermissionIDJSONBodyResponse = "once"
	Reject PostSessionByIdPermissionsByPermissionIDJSONBodyResponse = "reject"
)

// Defines values for TuiShowToastJSONBodyVariant.
const (
	TuiShowToastJSONBodyVariantError   TuiShowToastJSONBodyVariant = "error"
	TuiShowToastJSONBodyVariantInfo    TuiShowToastJSONBodyVariant = "info"
	TuiShowToastJSONBodyVariantSuccess TuiShowToastJSONBodyVariant = "success"
	TuiShowToastJSONBodyVariantWarning TuiShowToastJSONBodyVariant = "warning"
)

// Agent defines model for Agent.
type Agent struct {
	BuiltIn     bool       `json:"builtIn"`
	Description *string    `json:"description,omitempty"`
	Mode        Agent_Mode `json:"mode"`
	Model       *struct {
		ModelID    string `json:"modelID"`
		ProviderID string `json:"providerID"`
	} `json:"model,omitempty"`
	Name       string                 `json:"name"`
	Options    map[string]interface{} `json:"options"`
	Permission struct {
		Bash     map[string]Agent_Permission_Bash_AdditionalProperties `json:"bash"`
		Edit     Agent_Permission_Edit                                 `json:"edit"`
		Webfetch *Agent_Permission_Webfetch                            `json:"webfetch,omitempty"`
	} `json:"permission"`
	Prompt      *string         `json:"prompt,omitempty"`
	Temperature *float32        `json:"temperature,omitempty"`
	Tools       map[string]bool `json:"tools"`
	TopP        *float32        `json:"topP,omitempty"`
}

// AgentMode0 defines model for .
type AgentMode0 = string

// AgentMode1 defines model for .
type AgentMode1 = string

// AgentMode2 defines model for .
type AgentMode2 = string

// Agent_Mode defines model for Agent.Mode.
type Agent_Mode struct {
	union json.RawMessage
}

// AgentPermissionBash0 defines model for .
type AgentPermissionBash0 = string

// AgentPermissionBash1 defines model for .
type AgentPermissionBash1 = string

// AgentPermissionBash2 defines model for .
type AgentPermissionBash2 = string

// Agent_Permission_Bash_AdditionalProperties defines model for Agent.Permission.Bash.AdditionalProperties.
type Agent_Permission_Bash_AdditionalProperties struct {
	union json.RawMessage
}

// AgentPermissionEdit0 defines model for .
type AgentPermissionEdit0 = string

// AgentPermissionEdit1 defines model for .
type AgentPermissionEdit1 = string

// AgentPermissionEdit2 defines model for .
type AgentPermissionEdit2 = string

// Agent_Permission_Edit defines model for Agent.Permission.Edit.
type Agent_Permission_Edit struct {
	union json.RawMessage
}

// AgentPermissionWebfetch0 defines model for .
type AgentPermissionWebfetch0 = string

// AgentPermissionWebfetch1 defines model for .
type AgentPermissionWebfetch1 = string

// AgentPermissionWebfetch2 defines model for .
type AgentPermissionWebfetch2 = string

// Agent_Permission_Webfetch defines model for Agent.Permission.Webfetch.
type Agent_Permission_Webfetch struct {
	union json.RawMessage
}

// AgentConfig defines model for AgentConfig.
type AgentConfig struct {
	// Description Description of when to use the agent
	Description *string           `json:"description,omitempty"`
	Disable     *bool             `json:"disable,omitempty"`
	Mode        *AgentConfig_Mode `json:"mode,omitempty"`
	Model       *string           `json:"model,omitempty"`
	Permission  *struct {
		Bash     *AgentConfig_Permission_Bash     `json:"bash,omitempty"`
		Edit     *AgentConfig_Permission_Edit     `json:"edit,omitempty"`
		Webfetch *AgentConfig_Permission_Webfetch `json:"webfetch,omitempty"`
	} `json:"permission,omitempty"`
	Prompt               *string                `json:"prompt,omitempty"`
	Temperature          *float32               `json:"temperature,omitempty"`
	Tools                *map[string]bool       `json:"tools,omitempty"`
	TopP                 *float32               `json:"top_p,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AgentConfigMode0 defines model for .
type AgentConfigMode0 = string

// AgentConfigMode1 defines model for .
type AgentConfigMode1 = string

// AgentConfigMode2 defines model for .
type AgentConfigMode2 = string

// AgentConfig_Mode defines model for AgentConfig.Mode.
type AgentConfig_Mode struct {
	union json.RawMessage
}

// AgentConfigPermissionBash0 defines model for .
type AgentConfigPermissionBash0 struct {
	union json.RawMessage
}

// AgentConfigPermissionBash00 defines model for .
type AgentConfigPermissionBash00 = string

// AgentConfigPermissionBash01 defines model for .
type AgentConfigPermissionBash01 = string

// AgentConfigPermissionBash02 defines model for .
type AgentConfigPermissionBash02 = string

// AgentConfigPermissionBash1 defines model for .
type AgentConfigPermissionBash1 map[string]AgentConfig_Permission_Bash_1_AdditionalProperties

// AgentConfigPermissionBash10 defines model for .
type AgentConfigPermissionBash10 = string

// AgentConfigPermissionBash11 defines model for .
type AgentConfigPermissionBash11 = string

// AgentConfigPermissionBash12 defines model for .
type AgentConfigPermissionBash12 = string

// AgentConfig_Permission_Bash_1_AdditionalProperties defines model for AgentConfig.Permission.Bash.1.AdditionalProperties.
type AgentConfig_Permission_Bash_1_AdditionalProperties struct {
	union json.RawMessage
}

// AgentConfig_Permission_Bash defines model for AgentConfig.Permission.Bash.
type AgentConfig_Permission_Bash struct {
	union json.RawMessage
}

// AgentConfigPermissionEdit0 defines model for .
type AgentConfigPermissionEdit0 = string

// AgentConfigPermissionEdit1 defines model for .
type AgentConfigPermissionEdit1 = string

// AgentConfigPermissionEdit2 defines model for .
type AgentConfigPermissionEdit2 = string

// AgentConfig_Permission_Edit defines model for AgentConfig.Permission.Edit.
type AgentConfig_Permission_Edit struct {
	union json.RawMessage
}

// AgentConfigPermissionWebfetch0 defines model for .
type AgentConfigPermissionWebfetch0 = string

// AgentConfigPermissionWebfetch1 defines model for .
type AgentConfigPermissionWebfetch1 = string

// AgentConfigPermissionWebfetch2 defines model for .
type AgentConfigPermissionWebfetch2 = string

// AgentConfig_Permission_Webfetch defines model for AgentConfig.Permission.Webfetch.
type AgentConfig_Permission_Webfetch struct {
	union json.RawMessage
}

// AgentPart defines model for AgentPart.
type AgentPart struct {
	Id        string `json:"id"`
	MessageID string `json:"messageID"`
	Name      string `json:"name"`
	SessionID string `json:"sessionID"`
	Source    *struct {
		End   int    `json:"end"`
		Start int    `json:"start"`
		Value string `json:"value"`
	} `json:"source,omitempty"`
	Type string `json:"type"`
}

// AgentPartInput defines model for AgentPartInput.
type AgentPartInput struct {
	Id     *string `json:"id,omitempty"`
	Name   string  `json:"name"`
	Source *struct {
		End   int    `json:"end"`
		Start int    `json:"start"`
		Value string `json:"value"`
	} `json:"source,omitempty"`
	Type string `json:"type"`
}

// ApiAuth defines model for ApiAuth.
type ApiAuth struct {
	Key  string `json:"key"`
	Type string `json:"type"`
}

// App defines model for App.
type App struct {
	Git      bool   `json:"git"`
	Hostname string `json:"hostname"`
	Path     struct {
		Config string `json:"config"`
		Cwd    string `json:"cwd"`
		Data   string `json:"data"`
		Home   string `json:"home"`
		Root   string `json:"root"`
		State  string `json:"state"`
	} `json:"path"`
	Time struct {
		Initialized *float32 `json:"initialized,omitempty"`
	} `json:"time"`
}

// AssistantMessage defines model for AssistantMessage.
type AssistantMessage struct {
	Cost    float32                 `json:"cost"`
	Error   *AssistantMessage_Error `json:"error,omitempty"`
	Id      string                  `json:"id"`
	Mode    string                  `json:"mode"`
	ModelID string                  `json:"modelID"`
	Path    struct {
		Cwd  string `json:"cwd"`
		Root string `json:"root"`
	} `json:"path"`
	ProviderID string   `json:"providerID"`
	Role       string   `json:"role"`
	SessionID  string   `json:"sessionID"`
	Summary    *bool    `json:"summary,omitempty"`
	System     []string `json:"system"`
	Time       struct {
		Completed *float32 `json:"completed,omitempty"`
		Created   float32  `json:"created"`
	} `json:"time"`
	Tokens struct {
		Cache struct {
			Read  float32 `json:"read"`
			Write float32 `json:"write"`
		} `json:"cache"`
		Input     float32 `json:"input"`
		Output    float32 `json:"output"`
		Reasoning float32 `json:"reasoning"`
	} `json:"tokens"`
}

// AssistantMessage_Error defines model for AssistantMessage.Error.
type AssistantMessage_Error struct {
	union json.RawMessage
}

// Auth defines model for Auth.
type Auth struct {
	union json.RawMessage
}

// Command defines model for Command.
type Command struct {
	Agent       *string `json:"agent,omitempty"`
	Description *string `json:"description,omitempty"`
	Model       *string `json:"model,omitempty"`
	Name        string  `json:"name"`
	Template    string  `json:"template"`
}

// Config defines model for Config.
type Config struct {
	// Schema JSON schema reference for configuration validation
	Schema *string `json:"$schema,omitempty"`

	// Agent Agent configuration, see https://opencode.ai/docs/agent
	Agent *Config_Agent `json:"agent,omitempty"`

	// Autoshare @deprecated Use 'share' field instead. Share newly created sessions automatically
	Autoshare *bool `json:"autoshare,omitempty"`

	// Autoupdate Automatically update to the latest version
	Autoupdate *bool `json:"autoupdate,omitempty"`

	// Command Command configuration, see https://opencode.ai/docs/commands
	Command *map[string]struct {
		Agent       *string `json:"agent,omitempty"`
		Description *string `json:"description,omitempty"`
		Model       *string `json:"model,omitempty"`
		Template    string  `json:"template"`
	} `json:"command,omitempty"`

	// DisabledProviders Disable providers that are loaded automatically
	DisabledProviders *[]string `json:"disabled_providers,omitempty"`
	Experimental      *struct {
		Hook *struct {
			FileEdited *map[string][]struct {
				Command     []string           `json:"command"`
				Environment *map[string]string `json:"environment,omitempty"`
			} `json:"file_edited,omitempty"`
			SessionCompleted *[]struct {
				Command     []string           `json:"command"`
				Environment *map[string]string `json:"environment,omitempty"`
			} `json:"session_completed,omitempty"`
		} `json:"hook,omitempty"`
		PromptOptimization *struct {
			Enabled bool `json:"enabled"`
			Model   *struct {
				ModelID    string `json:"modelID"`
				ProviderID string `json:"providerID"`
			} `json:"model,omitempty"`
		} `json:"promptOptimization,omitempty"`
	} `json:"experimental,omitempty"`
	Formatter *map[string]struct {
		Command     *[]string          `json:"command,omitempty"`
		Disabled    *bool              `json:"disabled,omitempty"`
		Environment *map[string]string `json:"environment,omitempty"`
		Extensions  *[]string          `json:"extensions,omitempty"`
	} `json:"formatter,omitempty"`

	// Instructions Additional instruction files or patterns to include
	Instructions *[]string                                   `json:"instructions,omitempty"`
	Keybinds     *KeybindsConfig                             `json:"keybinds,omitempty"`
	Layout       *LayoutConfig                               `json:"layout,omitempty"`
	Lsp          *map[string]Config_Lsp_AdditionalProperties `json:"lsp,omitempty"`

	// Mcp MCP (Model Context Protocol) server configurations
	Mcp *map[string]Config_Mcp_AdditionalProperties `json:"mcp,omitempty"`

	// Mode @deprecated Use `agent` field instead.
	Mode *Config_Mode `json:"mode,omitempty"`

	// Model Model to use in the format of provider/model, eg anthropic/claude-2
	Model      *string `json:"model,omitempty"`
	Permission *struct {
		Bash     *Config_Permission_Bash     `json:"bash,omitempty"`
		Edit     *Config_Permission_Edit     `json:"edit,omitempty"`
		Webfetch *Config_Permission_Webfetch `json:"webfetch,omitempty"`
	} `json:"permission,omitempty"`
	Plugin *[]string `json:"plugin,omitempty"`

	// Provider Custom provider configurations and model overrides
	Provider *map[string]struct {
		Api    *string   `json:"api,omitempty"`
		Env    *[]string `json:"env,omitempty"`
		Id     *string   `json:"id,omitempty"`
		Models *map[string]struct {
			Attachment *bool `json:"attachment,omitempty"`
			Cost       *struct {
				CacheRead  *float32 `json:"cache_read,omitempty"`
				CacheWrite *float32 `json:"cache_write,omitempty"`
				Input      float32  `json:"input"`
				Output     float32  `json:"output"`
			} `json:"cost,omitempty"`
			Id    *string `json:"id,omitempty"`
			Limit *struct {
				Context float32 `json:"context"`
				Output  float32 `json:"output"`
			} `json:"limit,omitempty"`
			Name        *string                 `json:"name,omitempty"`
			Options     *map[string]interface{} `json:"options,omitempty"`
			Reasoning   *bool                   `json:"reasoning,omitempty"`
			ReleaseDate *string                 `json:"release_date,omitempty"`
			Temperature *bool                   `json:"temperature,omitempty"`
			ToolCall    *bool                   `json:"tool_call,omitempty"`
		} `json:"models,omitempty"`
		Name    *string                  `json:"name,omitempty"`
		Npm     *string                  `json:"npm,omitempty"`
		Options *Config_Provider_Options `json:"options,omitempty"`
	} `json:"provider,omitempty"`

	// Share Control sharing behavior:'manual' allows manual sharing via commands, 'auto' enables automatic sharing, 'disabled' disables all sharing
	Share *ConfigShare `json:"share,omitempty"`

	// SmallModel Small model to use for tasks like title generation in the format of provider/model
	SmallModel *string `json:"small_model,omitempty"`
	Snapshot   *bool   `json:"snapshot,omitempty"`

	// Theme Theme name to use for the interface
	Theme *string          `json:"theme,omitempty"`
	Tools *map[string]bool `json:"tools,omitempty"`

	// Tui TUI specific settings
	Tui *struct {
		// ScrollSpeed TUI scroll speed
		ScrollSpeed float32 `json:"scroll_speed"`
	} `json:"tui,omitempty"`

	// Username Custom username to display in conversations instead of system username
	Username *string `json:"username,omitempty"`
}

// Config_Agent Agent configuration, see https://opencode.ai/docs/agent
type Config_Agent struct {
	Build                *AgentConfig           `json:"build,omitempty"`
	General              *AgentConfig           `json:"general,omitempty"`
	Plan                 *AgentConfig           `json:"plan,omitempty"`
	AdditionalProperties map[string]AgentConfig `json:"-"`
}

// ConfigLsp0 defines model for .
type ConfigLsp0 struct {
	Disabled bool `json:"disabled"`
}

// ConfigLsp1 defines model for .
type ConfigLsp1 struct {
	Command        []string                `json:"command"`
	Disabled       *bool                   `json:"disabled,omitempty"`
	Env            *map[string]string      `json:"env,omitempty"`
	Extensions     *[]string               `json:"extensions,omitempty"`
	Initialization *map[string]interface{} `json:"initialization,omitempty"`
}

// Config_Lsp_AdditionalProperties defines model for Config.lsp.AdditionalProperties.
type Config_Lsp_AdditionalProperties struct {
	union json.RawMessage
}

// Config_Mcp_AdditionalProperties defines model for Config.mcp.AdditionalProperties.
type Config_Mcp_AdditionalProperties struct {
	union json.RawMessage
}

// Config_Mode @deprecated Use `agent` field instead.
type Config_Mode struct {
	Build                *AgentConfig           `json:"build,omitempty"`
	Plan                 *AgentConfig           `json:"plan,omitempty"`
	AdditionalProperties map[string]AgentConfig `json:"-"`
}

// ConfigPermissionBash0 defines model for .
type ConfigPermissionBash0 struct {
	union json.RawMessage
}

// ConfigPermissionBash00 defines model for .
type ConfigPermissionBash00 = string

// ConfigPermissionBash01 defines model for .
type ConfigPermissionBash01 = string

// ConfigPermissionBash02 defines model for .
type ConfigPermissionBash02 = string

// ConfigPermissionBash1 defines model for .
type ConfigPermissionBash1 map[string]Config_Permission_Bash_1_AdditionalProperties

// ConfigPermissionBash10 defines model for .
type ConfigPermissionBash10 = string

// ConfigPermissionBash11 defines model for .
type ConfigPermissionBash11 = string

// ConfigPermissionBash12 defines model for .
type ConfigPermissionBash12 = string

// Config_Permission_Bash_1_AdditionalProperties defines model for Config.Permission.Bash.1.AdditionalProperties.
type Config_Permission_Bash_1_AdditionalProperties struct {
	union json.RawMessage
}

// Config_Permission_Bash defines model for Config.Permission.Bash.
type Config_Permission_Bash struct {
	union json.RawMessage
}

// ConfigPermissionEdit0 defines model for .
type ConfigPermissionEdit0 = string

// ConfigPermissionEdit1 defines model for .
type ConfigPermissionEdit1 = string

// ConfigPermissionEdit2 defines model for .
type ConfigPermissionEdit2 = string

// Config_Permission_Edit defines model for Config.Permission.Edit.
type Config_Permission_Edit struct {
	union json.RawMessage
}

// ConfigPermissionWebfetch0 defines model for .
type ConfigPermissionWebfetch0 = string

// ConfigPermissionWebfetch1 defines model for .
type ConfigPermissionWebfetch1 = string

// ConfigPermissionWebfetch2 defines model for .
type ConfigPermissionWebfetch2 = string

// Config_Permission_Webfetch defines model for Config.Permission.Webfetch.
type Config_Permission_Webfetch struct {
	union json.RawMessage
}

// Config_Provider_Options defines model for Config.Provider.Options.
type Config_Provider_Options struct {
	ApiKey               *string                `json:"apiKey,omitempty"`
	BaseURL              *string                `json:"baseURL,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ConfigShare Control sharing behavior:'manual' allows manual sharing via commands, 'auto' enables automatic sharing, 'disabled' disables all sharing
type ConfigShare string

// Error defines model for Error.
type Error struct {
	Data map[string]interface{} `json:"data"`
}

// Event defines model for Event.
type Event struct {
	union json.RawMessage
}

// EventFileEdited defines model for Event.file.edited.
type EventFileEdited struct {
	Properties struct {
		File string `json:"file"`
	} `json:"properties"`
	Type string `json:"type"`
}

// EventFileWatcherUpdated defines model for Event.file.watcher.updated.
type EventFileWatcherUpdated struct {
	Properties struct {
		Event EventFileWatcherUpdated_Properties_Event `json:"event"`
		File  string                                   `json:"file"`
	} `json:"properties"`
	Type string `json:"type"`
}

// EventFileWatcherUpdatedPropertiesEvent0 defines model for .
type EventFileWatcherUpdatedPropertiesEvent0 = string

// EventFileWatcherUpdatedPropertiesEvent1 defines model for .
type EventFileWatcherUpdatedPropertiesEvent1 = string

// EventFileWatcherUpdated_Properties_Event defines model for EventFileWatcherUpdated.Properties.Event.
type EventFileWatcherUpdated_Properties_Event struct {
	union json.RawMessage
}

// EventIdeInstalled defines model for Event.ide.installed.
type EventIdeInstalled struct {
	Properties struct {
		Ide string `json:"ide"`
	} `json:"properties"`
	Type string `json:"type"`
}

// EventInstallationUpdated defines model for Event.installation.updated.
type EventInstallationUpdated struct {
	Properties struct {
		Version string `json:"version"`
	} `json:"properties"`
	Type string `json:"type"`
}

// EventLspClientDiagnostics defines model for Event.lsp.client.diagnostics.
type EventLspClientDiagnostics struct {
	Properties struct {
		Path     string `json:"path"`
		ServerID string `json:"serverID"`
	} `json:"properties"`
	Type string `json:"type"`
}

// EventMessagePartRemoved defines model for Event.message.part.removed.
type EventMessagePartRemoved struct {
	Properties struct {
		MessageID string `json:"messageID"`
		PartID    string `json:"partID"`
		SessionID string `json:"sessionID"`
	} `json:"properties"`
	Type string `json:"type"`
}

// EventMessagePartUpdated defines model for Event.message.part.updated.
type EventMessagePartUpdated struct {
	Properties struct {
		Part Part `json:"part"`
	} `json:"properties"`
	Type string `json:"type"`
}

// EventMessageRemoved defines model for Event.message.removed.
type EventMessageRemoved struct {
	Properties struct {
		MessageID string `json:"messageID"`
		SessionID string `json:"sessionID"`
	} `json:"properties"`
	Type string `json:"type"`
}

// EventMessageUpdated defines model for Event.message.updated.
type EventMessageUpdated struct {
	Properties struct {
		Info Message `json:"info"`
	} `json:"properties"`
	Type string `json:"type"`
}

// EventPermissionReplied defines model for Event.permission.replied.
type EventPermissionReplied struct {
	Properties struct {
		PermissionID string `json:"permissionID"`
		Response     string `json:"response"`
		SessionID    string `json:"sessionID"`
	} `json:"properties"`
	Type string `json:"type"`
}

// EventPermissionUpdated defines model for Event.permission.updated.
type EventPermissionUpdated struct {
	Properties Permission `json:"properties"`
	Type       string     `json:"type"`
}

// EventServerConnected defines model for Event.server.connected.
type EventServerConnected struct {
	Properties map[string]interface{} `json:"properties"`
	Type       string                 `json:"type"`
}

// EventSessionDeleted defines model for Event.session.deleted.
type EventSessionDeleted struct {
	Properties struct {
		Info Session `json:"info"`
	} `json:"properties"`
	Type string `json:"type"`
}

// EventSessionError defines model for Event.session.error.
type EventSessionError struct {
	Properties struct {
		Error     *EventSessionError_Properties_Error `json:"error,omitempty"`
		SessionID *string                             `json:"sessionID,omitempty"`
	} `json:"properties"`
	Type string `json:"type"`
}

// EventSessionError_Properties_Error defines model for EventSessionError.Properties.Error.
type EventSessionError_Properties_Error struct {
	union json.RawMessage
}

// EventSessionIdle defines model for Event.session.idle.
type EventSessionIdle struct {
	Properties struct {
		SessionID string `json:"sessionID"`
	} `json:"properties"`
	Type string `json:"type"`
}

// EventSessionUpdated defines model for Event.session.updated.
type EventSessionUpdated struct {
	Properties struct {
		Info Session `json:"info"`
	} `json:"properties"`
	Type string `json:"type"`
}

// EventStorageWrite defines model for Event.storage.write.
type EventStorageWrite struct {
	Properties struct {
		Content interface{} `json:"content,omitempty"`
		Key     string      `json:"key"`
	} `json:"properties"`
	Type string `json:"type"`
}

// File defines model for File.
type File struct {
	Added   int        `json:"added"`
	Path    string     `json:"path"`
	Removed int        `json:"removed"`
	Status  FileStatus `json:"status"`
}

// FileStatus defines model for File.Status.
type FileStatus string

// FileNode defines model for FileNode.
type FileNode struct {
	Ignored bool         `json:"ignored"`
	Name    string       `json:"name"`
	Path    string       `json:"path"`
	Type    FileNodeType `json:"type"`
}

// FileNodeType defines model for FileNode.Type.
type FileNodeType string

// FilePart defines model for FilePart.
type FilePart struct {
	Filename  *string         `json:"filename,omitempty"`
	Id        string          `json:"id"`
	MessageID string          `json:"messageID"`
	Mime      string          `json:"mime"`
	SessionID string          `json:"sessionID"`
	Source    *FilePartSource `json:"source,omitempty"`
	Type      string          `json:"type"`
	Url       string          `json:"url"`
}

// FilePartInput defines model for FilePartInput.
type FilePartInput struct {
	Filename *string         `json:"filename,omitempty"`
	Id       *string         `json:"id,omitempty"`
	Mime     string          `json:"mime"`
	Source   *FilePartSource `json:"source,omitempty"`
	Type     string          `json:"type"`
	Url      string          `json:"url"`
}

// FilePartSource defines model for FilePartSource.
type FilePartSource struct {
	union json.RawMessage
}

// FilePartSourceText defines model for FilePartSourceText.
type FilePartSourceText struct {
	End   int    `json:"end"`
	Start int    `json:"start"`
	Value string `json:"value"`
}

// FileSource defines model for FileSource.
type FileSource struct {
	Path string             `json:"path"`
	Text FilePartSourceText `json:"text"`
	Type string             `json:"type"`
}

// KeybindsConfig defines model for KeybindsConfig.
type KeybindsConfig struct {
	// AgentCycle Next agent
	AgentCycle string `json:"agent_cycle"`

	// AgentCycleReverse Previous agent
	AgentCycleReverse string `json:"agent_cycle_reverse"`

	// AgentList List agents
	AgentList string `json:"agent_list"`

	// AppExit Exit the application
	AppExit string `json:"app_exit"`

	// AppHelp Show help dialog
	AppHelp string `json:"app_help"`

	// EditorOpen Open external editor
	EditorOpen string `json:"editor_open"`

	// FileClose @deprecated Close file
	FileClose string `json:"file_close"`

	// FileDiffToggle @deprecated Split/unified diff
	FileDiffToggle string `json:"file_diff_toggle"`

	// FileList @deprecated Currently not available. List files
	FileList string `json:"file_list"`

	// FileSearch @deprecated Search file
	FileSearch string `json:"file_search"`

	// InputClear Clear input field
	InputClear string `json:"input_clear"`

	// InputNewline Insert newline in input
	InputNewline string `json:"input_newline"`

	// InputPaste Paste from clipboard
	InputPaste string `json:"input_paste"`

	// InputSubmit Submit input
	InputSubmit string `json:"input_submit"`

	// Leader Leader key for keybind combinations
	Leader string `json:"leader"`

	// MessagesCopy Copy message
	MessagesCopy string `json:"messages_copy"`

	// MessagesFirst Navigate to first message
	MessagesFirst string `json:"messages_first"`

	// MessagesHalfPageDown Scroll messages down by half page
	MessagesHalfPageDown string `json:"messages_half_page_down"`

	// MessagesHalfPageUp Scroll messages up by half page
	MessagesHalfPageUp string `json:"messages_half_page_up"`

	// MessagesLast Navigate to last message
	MessagesLast string `json:"messages_last"`

	// MessagesLayoutToggle @deprecated Toggle layout
	MessagesLayoutToggle string `json:"messages_layout_toggle"`

	// MessagesNext @deprecated Navigate to next message
	MessagesNext string `json:"messages_next"`

	// MessagesPageDown Scroll messages down by one page
	MessagesPageDown string `json:"messages_page_down"`

	// MessagesPageUp Scroll messages up by one page
	MessagesPageUp string `json:"messages_page_up"`

	// MessagesPrevious @deprecated Navigate to previous message
	MessagesPrevious string `json:"messages_previous"`

	// MessagesRedo Redo message
	MessagesRedo string `json:"messages_redo"`

	// MessagesRevert @deprecated use messages_undo. Revert message
	MessagesRevert string `json:"messages_revert"`

	// MessagesUndo Undo message
	MessagesUndo string `json:"messages_undo"`

	// ModelCycleRecent Next recent model
	ModelCycleRecent string `json:"model_cycle_recent"`

	// ModelCycleRecentReverse Previous recent model
	ModelCycleRecentReverse string `json:"model_cycle_recent_reverse"`

	// ModelList List available models
	ModelList string `json:"model_list"`

	// ProjectInit Create/update AGENTS.md
	ProjectInit string `json:"project_init"`

	// SessionChildCycle Cycle to next child session
	SessionChildCycle string `json:"session_child_cycle"`

	// SessionChildCycleReverse Cycle to previous child session
	SessionChildCycleReverse string `json:"session_child_cycle_reverse"`

	// SessionCompact Compact the session
	SessionCompact string `json:"session_compact"`

	// SessionExport Export session to editor
	SessionExport string `json:"session_export"`

	// SessionInterrupt Interrupt current session
	SessionInterrupt string `json:"session_interrupt"`

	// SessionList List all sessions
	SessionList string `json:"session_list"`

	// SessionNew Create a new session
	SessionNew string `json:"session_new"`

	// SessionShare Share current session
	SessionShare string `json:"session_share"`

	// SessionTimeline Show session timeline
	SessionTimeline string `json:"session_timeline"`

	// SessionUnshare Unshare current session
	SessionUnshare string `json:"session_unshare"`

	// SwitchAgent @deprecated use agent_cycle. Next agent
	SwitchAgent string `json:"switch_agent"`

	// SwitchAgentReverse @deprecated use agent_cycle_reverse. Previous agent
	SwitchAgentReverse string `json:"switch_agent_reverse"`

	// SwitchMode @deprecated use agent_cycle. Next mode
	SwitchMode string `json:"switch_mode"`

	// SwitchModeReverse @deprecated use agent_cycle_reverse. Previous mode
	SwitchModeReverse string `json:"switch_mode_reverse"`

	// ThemeList List available themes
	ThemeList string `json:"theme_list"`

	// ThinkingBlocks Toggle thinking blocks
	ThinkingBlocks string `json:"thinking_blocks"`

	// ToolDetails Toggle tool details
	ToolDetails string `json:"tool_details"`
}

// LayoutConfig defines model for LayoutConfig.
type LayoutConfig string

// McpLocalConfig defines model for McpLocalConfig.
type McpLocalConfig struct {
	// Command Command and arguments to run the MCP server
	Command []string `json:"command"`

	// Enabled Enable or disable the MCP server on startup
	Enabled *bool `json:"enabled,omitempty"`

	// Environment Environment variables to set when running the MCP server
	Environment *map[string]string `json:"environment,omitempty"`

	// Type Type of MCP server connection
	Type string `json:"type"`
}

// McpRemoteConfig defines model for McpRemoteConfig.
type McpRemoteConfig struct {
	// Enabled Enable or disable the MCP server on startup
	Enabled *bool `json:"enabled,omitempty"`

	// Headers Headers to send with the request
	Headers *map[string]string `json:"headers,omitempty"`

	// Type Type of MCP server connection
	Type string `json:"type"`

	// Url URL of the remote MCP server
	Url string `json:"url"`
}

// Message defines model for Message.
type Message struct {
	union json.RawMessage
}

// MessageAbortedError defines model for MessageAbortedError.
type MessageAbortedError struct {
	Data map[string]interface{} `json:"data"`
	Name string                 `json:"name"`
}

// MessageOutputLengthError defines model for MessageOutputLengthError.
type MessageOutputLengthError struct {
	Data map[string]interface{} `json:"data"`
	Name string                 `json:"name"`
}

// Model defines model for Model.
type Model struct {
	Attachment bool `json:"attachment"`
	Cost       struct {
		CacheRead  *float32 `json:"cache_read,omitempty"`
		CacheWrite *float32 `json:"cache_write,omitempty"`
		Input      float32  `json:"input"`
		Output     float32  `json:"output"`
	} `json:"cost"`
	Id    string `json:"id"`
	Limit struct {
		Context float32 `json:"context"`
		Output  float32 `json:"output"`
	} `json:"limit"`
	Name        string                 `json:"name"`
	Options     map[string]interface{} `json:"options"`
	Reasoning   bool                   `json:"reasoning"`
	ReleaseDate string                 `json:"release_date"`
	Temperature bool                   `json:"temperature"`
	ToolCall    bool                   `json:"tool_call"`
}

// OAuth defines model for OAuth.
type OAuth struct {
	Access  string  `json:"access"`
	Expires float32 `json:"expires"`
	Refresh string  `json:"refresh"`
	Type    string  `json:"type"`
}

// Part defines model for Part.
type Part struct {
	union json.RawMessage
}

// PatchPart defines model for PatchPart.
type PatchPart struct {
	Files     []string `json:"files"`
	Hash      string   `json:"hash"`
	Id        string   `json:"id"`
	MessageID string   `json:"messageID"`
	SessionID string   `json:"sessionID"`
	Type      string   `json:"type"`
}

// Permission defines model for Permission.
type Permission struct {
	CallID    *string                `json:"callID,omitempty"`
	Id        string                 `json:"id"`
	MessageID string                 `json:"messageID"`
	Metadata  map[string]interface{} `json:"metadata"`
	Pattern   *string                `json:"pattern,omitempty"`
	SessionID string                 `json:"sessionID"`
	Time      struct {
		Created float32 `json:"created"`
	} `json:"time"`
	Title string `json:"title"`
	Type  string `json:"type"`
}

// Provider defines model for Provider.
type Provider struct {
	Api    *string          `json:"api,omitempty"`
	Env    []string         `json:"env"`
	Id     string           `json:"id"`
	Models map[string]Model `json:"models"`
	Name   string           `json:"name"`
	Npm    *string          `json:"npm,omitempty"`
}

// ProviderAuthError defines model for ProviderAuthError.
type ProviderAuthError struct {
	Data struct {
		Message    string `json:"message"`
		ProviderID string `json:"providerID"`
	} `json:"data"`
	Name string `json:"name"`
}

// Range defines model for Range.
type Range struct {
	End struct {
		Character float32 `json:"character"`
		Line      float32 `json:"line"`
	} `json:"end"`
	Start struct {
		Character float32 `json:"character"`
		Line      float32 `json:"line"`
	} `json:"start"`
}

// ReasoningPart defines model for ReasoningPart.
type ReasoningPart struct {
	Id        string                  `json:"id"`
	MessageID string                  `json:"messageID"`
	Metadata  *map[string]interface{} `json:"metadata,omitempty"`
	SessionID string                  `json:"sessionID"`
	Text      string                  `json:"text"`
	Time      struct {
		End   *float32 `json:"end,omitempty"`
		Start float32  `json:"start"`
	} `json:"time"`
	Type string `json:"type"`
}

// Session defines model for Session.
type Session struct {
	Id       string  `json:"id"`
	ParentID *string `json:"parentID,omitempty"`
	Revert   *struct {
		Diff      *string `json:"diff,omitempty"`
		MessageID string  `json:"messageID"`
		PartID    *string `json:"partID,omitempty"`
		Snapshot  *string `json:"snapshot,omitempty"`
	} `json:"revert,omitempty"`
	Share *struct {
		Url string `json:"url"`
	} `json:"share,omitempty"`
	Time struct {
		Created float32 `json:"created"`
		Updated float32 `json:"updated"`
	} `json:"time"`
	Title   string `json:"title"`
	Version string `json:"version"`
}

// SnapshotPart defines model for SnapshotPart.
type SnapshotPart struct {
	Id        string `json:"id"`
	MessageID string `json:"messageID"`
	SessionID string `json:"sessionID"`
	Snapshot  string `json:"snapshot"`
	Type      string `json:"type"`
}

// StepFinishPart defines model for StepFinishPart.
type StepFinishPart struct {
	Cost      float32 `json:"cost"`
	Id        string  `json:"id"`
	MessageID string  `json:"messageID"`
	SessionID string  `json:"sessionID"`
	Tokens    struct {
		Cache struct {
			Read  float32 `json:"read"`
			Write float32 `json:"write"`
		} `json:"cache"`
		Input     float32 `json:"input"`
		Output    float32 `json:"output"`
		Reasoning float32 `json:"reasoning"`
	} `json:"tokens"`
	Type string `json:"type"`
}

// StepStartPart defines model for StepStartPart.
type StepStartPart struct {
	Id        string `json:"id"`
	MessageID string `json:"messageID"`
	SessionID string `json:"sessionID"`
	Type      string `json:"type"`
}

// Symbol defines model for Symbol.
type Symbol struct {
	Kind     float32 `json:"kind"`
	Location struct {
		Range Range  `json:"range"`
		Uri   string `json:"uri"`
	} `json:"location"`
	Name string `json:"name"`
}

// SymbolSource defines model for SymbolSource.
type SymbolSource struct {
	Kind  int                `json:"kind"`
	Name  string             `json:"name"`
	Path  string             `json:"path"`
	Range Range              `json:"range"`
	Text  FilePartSourceText `json:"text"`
	Type  string             `json:"type"`
}

// TextPart defines model for TextPart.
type TextPart struct {
	Id        string `json:"id"`
	MessageID string `json:"messageID"`
	SessionID string `json:"sessionID"`
	Synthetic *bool  `json:"synthetic,omitempty"`
	Text      string `json:"text"`
	Time      *struct {
		End   *float32 `json:"end,omitempty"`
		Start float32  `json:"start"`
	} `json:"time,omitempty"`
	Type string `json:"type"`
}

// TextPartInput defines model for TextPartInput.
type TextPartInput struct {
	Id        *string `json:"id,omitempty"`
	Synthetic *bool   `json:"synthetic,omitempty"`
	Text      string  `json:"text"`
	Time      *struct {
		End   *float32 `json:"end,omitempty"`
		Start float32  `json:"start"`
	} `json:"time,omitempty"`
	Type string `json:"type"`
}

// ToolPart defines model for ToolPart.
type ToolPart struct {
	CallID    string    `json:"callID"`
	Id        string    `json:"id"`
	MessageID string    `json:"messageID"`
	SessionID string    `json:"sessionID"`
	State     ToolState `json:"state"`
	Tool      string    `json:"tool"`
	Type      string    `json:"type"`
}

// ToolState defines model for ToolState.
type ToolState struct {
	union json.RawMessage
}

// ToolStateCompleted defines model for ToolStateCompleted.
type ToolStateCompleted struct {
	Input    map[string]interface{} `json:"input"`
	Metadata map[string]interface{} `json:"metadata"`
	Output   string                 `json:"output"`
	Status   string                 `json:"status"`
	Time     struct {
		End   float32 `json:"end"`
		Start float32 `json:"start"`
	} `json:"time"`
	Title string `json:"title"`
}

// ToolStateError defines model for ToolStateError.
type ToolStateError struct {
	Error    string                  `json:"error"`
	Input    map[string]interface{}  `json:"input"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
	Status   string                  `json:"status"`
	Time     struct {
		End   float32 `json:"end"`
		Start float32 `json:"start"`
	} `json:"time"`
}

// ToolStatePending defines model for ToolStatePending.
type ToolStatePending struct {
	Status string `json:"status"`
}

// ToolStateRunning defines model for ToolStateRunning.
type ToolStateRunning struct {
	Input    interface{}             `json:"input,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
	Status   string                  `json:"status"`
	Time     struct {
		Start float32 `json:"start"`
	} `json:"time"`
	Title *string `json:"title,omitempty"`
}

// UnknownError defines model for UnknownError.
type UnknownError struct {
	Data struct {
		Message string `json:"message"`
	} `json:"data"`
	Name string `json:"name"`
}

// UserMessage defines model for UserMessage.
type UserMessage struct {
	Id        string `json:"id"`
	Role      string `json:"role"`
	SessionID string `json:"sessionID"`
	Time      struct {
		Created float32 `json:"created"`
	} `json:"time"`
}

// WellKnownAuth defines model for WellKnownAuth.
type WellKnownAuth struct {
	Key   string `json:"key"`
	Token string `json:"token"`
	Type  string `json:"type"`
}

// FileListParams defines parameters for FileList.
type FileListParams struct {
	Path string `form:"path" json:"path"`
}

// FileReadParams defines parameters for FileRead.
type FileReadParams struct {
	Path string `form:"path" json:"path"`
}

// FindTextParams defines parameters for FindText.
type FindTextParams struct {
	Pattern string `form:"pattern" json:"pattern"`
}

// FindFilesParams defines parameters for FindFiles.
type FindFilesParams struct {
	Query string `form:"query" json:"query"`
}

// FindSymbolsParams defines parameters for FindSymbols.
type FindSymbolsParams struct {
	Query string `form:"query" json:"query"`
}

// AppLogJSONBody defines parameters for AppLog.
type AppLogJSONBody struct {
	// Extra Additional metadata for the log entry
	Extra *map[string]interface{} `json:"extra,omitempty"`

	// Level Log level
	Level AppLogJSONBodyLevel `json:"level"`

	// Message Log message
	Message string `json:"message"`

	// Service Service name for the log entry
	Service string `json:"service"`
}

// AppLogJSONBodyLevel defines parameters for AppLog.
type AppLogJSONBodyLevel string

// SessionCreateJSONBody defines parameters for SessionCreate.
type SessionCreateJSONBody struct {
	ParentID *string `json:"parentID,omitempty"`
	Title    *string `json:"title,omitempty"`
}

// SessionUpdateJSONBody defines parameters for SessionUpdate.
type SessionUpdateJSONBody struct {
	Title *string `json:"title,omitempty"`
}

// SessionCommandJSONBody defines parameters for SessionCommand.
type SessionCommandJSONBody struct {
	Agent     *string `json:"agent,omitempty"`
	Arguments string  `json:"arguments"`
	Command   string  `json:"command"`
	MessageID *string `json:"messageID,omitempty"`
	Model     *string `json:"model,omitempty"`
}

// SessionInitJSONBody defines parameters for SessionInit.
type SessionInitJSONBody struct {
	MessageID  string `json:"messageID"`
	ModelID    string `json:"modelID"`
	ProviderID string `json:"providerID"`
}

// SessionChatJSONBody defines parameters for SessionChat.
type SessionChatJSONBody struct {
	Agent      *string                          `json:"agent,omitempty"`
	MessageID  *string                          `json:"messageID,omitempty"`
	ModelID    string                           `json:"modelID"`
	Parts      []SessionChatJSONBody_Parts_Item `json:"parts"`
	ProviderID string                           `json:"providerID"`
	System     *string                          `json:"system,omitempty"`
	Tools      *map[string]bool                 `json:"tools,omitempty"`
}

// SessionChatJSONBody_Parts_Item defines parameters for SessionChat.
type SessionChatJSONBody_Parts_Item struct {
	union json.RawMessage
}

// PostSessionByIdPermissionsByPermissionIDJSONBody defines parameters for PostSessionByIdPermissionsByPermissionID.
type PostSessionByIdPermissionsByPermissionIDJSONBody struct {
	Response PostSessionByIdPermissionsByPermissionIDJSONBodyResponse `json:"response"`
}

// PostSessionByIdPermissionsByPermissionIDJSONBodyResponse defines parameters for PostSessionByIdPermissionsByPermissionID.
type PostSessionByIdPermissionsByPermissionIDJSONBodyResponse string

// SessionRevertJSONBody defines parameters for SessionRevert.
type SessionRevertJSONBody struct {
	MessageID string  `json:"messageID"`
	PartID    *string `json:"partID,omitempty"`
}

// SessionShellJSONBody defines parameters for SessionShell.
type SessionShellJSONBody struct {
	Agent   string `json:"agent"`
	Command string `json:"command"`
}

// SessionSummarizeJSONBody defines parameters for SessionSummarize.
type SessionSummarizeJSONBody struct {
	ModelID    string `json:"modelID"`
	ProviderID string `json:"providerID"`
}

// TuiAppendPromptJSONBody defines parameters for TuiAppendPrompt.
type TuiAppendPromptJSONBody struct {
	Text string `json:"text"`
}

// TuiExecuteCommandJSONBody defines parameters for TuiExecuteCommand.
type TuiExecuteCommandJSONBody struct {
	Command string `json:"command"`
}

// TuiShowToastJSONBody defines parameters for TuiShowToast.
type TuiShowToastJSONBody struct {
	Message string                      `json:"message"`
	Title   *string                     `json:"title,omitempty"`
	Variant TuiShowToastJSONBodyVariant `json:"variant"`
}

// TuiShowToastJSONBodyVariant defines parameters for TuiShowToast.
type TuiShowToastJSONBodyVariant string

// AuthSetJSONRequestBody defines body for AuthSet for application/json ContentType.
type AuthSetJSONRequestBody = Auth

// AppLogJSONRequestBody defines body for AppLog for application/json ContentType.
type AppLogJSONRequestBody AppLogJSONBody

// SessionCreateJSONRequestBody defines body for SessionCreate for application/json ContentType.
type SessionCreateJSONRequestBody SessionCreateJSONBody

// SessionUpdateJSONRequestBody defines body for SessionUpdate for application/json ContentType.
type SessionUpdateJSONRequestBody SessionUpdateJSONBody

// SessionCommandJSONRequestBody defines body for SessionCommand for application/json ContentType.
type SessionCommandJSONRequestBody SessionCommandJSONBody

// SessionInitJSONRequestBody defines body for SessionInit for application/json ContentType.
type SessionInitJSONRequestBody SessionInitJSONBody

// SessionChatJSONRequestBody defines body for SessionChat for application/json ContentType.
type SessionChatJSONRequestBody SessionChatJSONBody

// PostSessionByIdPermissionsByPermissionIDJSONRequestBody defines body for PostSessionByIdPermissionsByPermissionID for application/json ContentType.
type PostSessionByIdPermissionsByPermissionIDJSONRequestBody PostSessionByIdPermissionsByPermissionIDJSONBody

// SessionRevertJSONRequestBody defines body for SessionRevert for application/json ContentType.
type SessionRevertJSONRequestBody SessionRevertJSONBody

// SessionShellJSONRequestBody defines body for SessionShell for application/json ContentType.
type SessionShellJSONRequestBody SessionShellJSONBody

// SessionSummarizeJSONRequestBody defines body for SessionSummarize for application/json ContentType.
type SessionSummarizeJSONRequestBody SessionSummarizeJSONBody

// TuiAppendPromptJSONRequestBody defines body for TuiAppendPrompt for application/json ContentType.
type TuiAppendPromptJSONRequestBody TuiAppendPromptJSONBody

// TuiExecuteCommandJSONRequestBody defines body for TuiExecuteCommand for application/json ContentType.
type TuiExecuteCommandJSONRequestBody TuiExecuteCommandJSONBody

// TuiShowToastJSONRequestBody defines body for TuiShowToast for application/json ContentType.
type TuiShowToastJSONRequestBody TuiShowToastJSONBody

// Getter for additional properties for AgentConfig. Returns the specified
// element and whether it was found
func (a AgentConfig) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AgentConfig
func (a *AgentConfig) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AgentConfig to handle AdditionalProperties
func (a *AgentConfig) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
		delete(object, "description")
	}

	if raw, found := object["disable"]; found {
		err = json.Unmarshal(raw, &a.Disable)
		if err != nil {
			return fmt.Errorf("error reading 'disable': %w", err)
		}
		delete(object, "disable")
	}

	if raw, found := object["mode"]; found {
		err = json.Unmarshal(raw, &a.Mode)
		if err != nil {
			return fmt.Errorf("error reading 'mode': %w", err)
		}
		delete(object, "mode")
	}

	if raw, found := object["model"]; found {
		err = json.Unmarshal(raw, &a.Model)
		if err != nil {
			return fmt.Errorf("error reading 'model': %w", err)
		}
		delete(object, "model")
	}

	if raw, found := object["permission"]; found {
		err = json.Unmarshal(raw, &a.Permission)
		if err != nil {
			return fmt.Errorf("error reading 'permission': %w", err)
		}
		delete(object, "permission")
	}

	if raw, found := object["prompt"]; found {
		err = json.Unmarshal(raw, &a.Prompt)
		if err != nil {
			return fmt.Errorf("error reading 'prompt': %w", err)
		}
		delete(object, "prompt")
	}

	if raw, found := object["temperature"]; found {
		err = json.Unmarshal(raw, &a.Temperature)
		if err != nil {
			return fmt.Errorf("error reading 'temperature': %w", err)
		}
		delete(object, "temperature")
	}

	if raw, found := object["tools"]; found {
		err = json.Unmarshal(raw, &a.Tools)
		if err != nil {
			return fmt.Errorf("error reading 'tools': %w", err)
		}
		delete(object, "tools")
	}

	if raw, found := object["top_p"]; found {
		err = json.Unmarshal(raw, &a.TopP)
		if err != nil {
			return fmt.Errorf("error reading 'top_p': %w", err)
		}
		delete(object, "top_p")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AgentConfig to handle AdditionalProperties
func (a AgentConfig) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	if a.Disable != nil {
		object["disable"], err = json.Marshal(a.Disable)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'disable': %w", err)
		}
	}

	if a.Mode != nil {
		object["mode"], err = json.Marshal(a.Mode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mode': %w", err)
		}
	}

	if a.Model != nil {
		object["model"], err = json.Marshal(a.Model)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'model': %w", err)
		}
	}

	if a.Permission != nil {
		object["permission"], err = json.Marshal(a.Permission)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'permission': %w", err)
		}
	}

	if a.Prompt != nil {
		object["prompt"], err = json.Marshal(a.Prompt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'prompt': %w", err)
		}
	}

	if a.Temperature != nil {
		object["temperature"], err = json.Marshal(a.Temperature)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'temperature': %w", err)
		}
	}

	if a.Tools != nil {
		object["tools"], err = json.Marshal(a.Tools)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tools': %w", err)
		}
	}

	if a.TopP != nil {
		object["top_p"], err = json.Marshal(a.TopP)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'top_p': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Config_Agent. Returns the specified
// element and whether it was found
func (a Config_Agent) Get(fieldName string) (value AgentConfig, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Config_Agent
func (a *Config_Agent) Set(fieldName string, value AgentConfig) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AgentConfig)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Config_Agent to handle AdditionalProperties
func (a *Config_Agent) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["build"]; found {
		err = json.Unmarshal(raw, &a.Build)
		if err != nil {
			return fmt.Errorf("error reading 'build': %w", err)
		}
		delete(object, "build")
	}

	if raw, found := object["general"]; found {
		err = json.Unmarshal(raw, &a.General)
		if err != nil {
			return fmt.Errorf("error reading 'general': %w", err)
		}
		delete(object, "general")
	}

	if raw, found := object["plan"]; found {
		err = json.Unmarshal(raw, &a.Plan)
		if err != nil {
			return fmt.Errorf("error reading 'plan': %w", err)
		}
		delete(object, "plan")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AgentConfig)
		for fieldName, fieldBuf := range object {
			var fieldVal AgentConfig
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Config_Agent to handle AdditionalProperties
func (a Config_Agent) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Build != nil {
		object["build"], err = json.Marshal(a.Build)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'build': %w", err)
		}
	}

	if a.General != nil {
		object["general"], err = json.Marshal(a.General)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'general': %w", err)
		}
	}

	if a.Plan != nil {
		object["plan"], err = json.Marshal(a.Plan)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plan': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Config_Mode. Returns the specified
// element and whether it was found
func (a Config_Mode) Get(fieldName string) (value AgentConfig, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Config_Mode
func (a *Config_Mode) Set(fieldName string, value AgentConfig) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AgentConfig)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Config_Mode to handle AdditionalProperties
func (a *Config_Mode) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["build"]; found {
		err = json.Unmarshal(raw, &a.Build)
		if err != nil {
			return fmt.Errorf("error reading 'build': %w", err)
		}
		delete(object, "build")
	}

	if raw, found := object["plan"]; found {
		err = json.Unmarshal(raw, &a.Plan)
		if err != nil {
			return fmt.Errorf("error reading 'plan': %w", err)
		}
		delete(object, "plan")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AgentConfig)
		for fieldName, fieldBuf := range object {
			var fieldVal AgentConfig
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Config_Mode to handle AdditionalProperties
func (a Config_Mode) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Build != nil {
		object["build"], err = json.Marshal(a.Build)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'build': %w", err)
		}
	}

	if a.Plan != nil {
		object["plan"], err = json.Marshal(a.Plan)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plan': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Config_Provider_Options. Returns the specified
// element and whether it was found
func (a Config_Provider_Options) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Config_Provider_Options
func (a *Config_Provider_Options) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Config_Provider_Options to handle AdditionalProperties
func (a *Config_Provider_Options) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["apiKey"]; found {
		err = json.Unmarshal(raw, &a.ApiKey)
		if err != nil {
			return fmt.Errorf("error reading 'apiKey': %w", err)
		}
		delete(object, "apiKey")
	}

	if raw, found := object["baseURL"]; found {
		err = json.Unmarshal(raw, &a.BaseURL)
		if err != nil {
			return fmt.Errorf("error reading 'baseURL': %w", err)
		}
		delete(object, "baseURL")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Config_Provider_Options to handle AdditionalProperties
func (a Config_Provider_Options) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ApiKey != nil {
		object["apiKey"], err = json.Marshal(a.ApiKey)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'apiKey': %w", err)
		}
	}

	if a.BaseURL != nil {
		object["baseURL"], err = json.Marshal(a.BaseURL)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'baseURL': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsAgentMode0 returns the union data inside the Agent_Mode as a AgentMode0
func (t Agent_Mode) AsAgentMode0() (AgentMode0, error) {
	var body AgentMode0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentMode0 overwrites any union data inside the Agent_Mode as the provided AgentMode0
func (t *Agent_Mode) FromAgentMode0(v AgentMode0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentMode0 performs a merge with any union data inside the Agent_Mode, using the provided AgentMode0
func (t *Agent_Mode) MergeAgentMode0(v AgentMode0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentMode1 returns the union data inside the Agent_Mode as a AgentMode1
func (t Agent_Mode) AsAgentMode1() (AgentMode1, error) {
	var body AgentMode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentMode1 overwrites any union data inside the Agent_Mode as the provided AgentMode1
func (t *Agent_Mode) FromAgentMode1(v AgentMode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentMode1 performs a merge with any union data inside the Agent_Mode, using the provided AgentMode1
func (t *Agent_Mode) MergeAgentMode1(v AgentMode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentMode2 returns the union data inside the Agent_Mode as a AgentMode2
func (t Agent_Mode) AsAgentMode2() (AgentMode2, error) {
	var body AgentMode2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentMode2 overwrites any union data inside the Agent_Mode as the provided AgentMode2
func (t *Agent_Mode) FromAgentMode2(v AgentMode2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentMode2 performs a merge with any union data inside the Agent_Mode, using the provided AgentMode2
func (t *Agent_Mode) MergeAgentMode2(v AgentMode2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Agent_Mode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Agent_Mode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAgentPermissionBash0 returns the union data inside the Agent_Permission_Bash_AdditionalProperties as a AgentPermissionBash0
func (t Agent_Permission_Bash_AdditionalProperties) AsAgentPermissionBash0() (AgentPermissionBash0, error) {
	var body AgentPermissionBash0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentPermissionBash0 overwrites any union data inside the Agent_Permission_Bash_AdditionalProperties as the provided AgentPermissionBash0
func (t *Agent_Permission_Bash_AdditionalProperties) FromAgentPermissionBash0(v AgentPermissionBash0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentPermissionBash0 performs a merge with any union data inside the Agent_Permission_Bash_AdditionalProperties, using the provided AgentPermissionBash0
func (t *Agent_Permission_Bash_AdditionalProperties) MergeAgentPermissionBash0(v AgentPermissionBash0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentPermissionBash1 returns the union data inside the Agent_Permission_Bash_AdditionalProperties as a AgentPermissionBash1
func (t Agent_Permission_Bash_AdditionalProperties) AsAgentPermissionBash1() (AgentPermissionBash1, error) {
	var body AgentPermissionBash1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentPermissionBash1 overwrites any union data inside the Agent_Permission_Bash_AdditionalProperties as the provided AgentPermissionBash1
func (t *Agent_Permission_Bash_AdditionalProperties) FromAgentPermissionBash1(v AgentPermissionBash1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentPermissionBash1 performs a merge with any union data inside the Agent_Permission_Bash_AdditionalProperties, using the provided AgentPermissionBash1
func (t *Agent_Permission_Bash_AdditionalProperties) MergeAgentPermissionBash1(v AgentPermissionBash1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentPermissionBash2 returns the union data inside the Agent_Permission_Bash_AdditionalProperties as a AgentPermissionBash2
func (t Agent_Permission_Bash_AdditionalProperties) AsAgentPermissionBash2() (AgentPermissionBash2, error) {
	var body AgentPermissionBash2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentPermissionBash2 overwrites any union data inside the Agent_Permission_Bash_AdditionalProperties as the provided AgentPermissionBash2
func (t *Agent_Permission_Bash_AdditionalProperties) FromAgentPermissionBash2(v AgentPermissionBash2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentPermissionBash2 performs a merge with any union data inside the Agent_Permission_Bash_AdditionalProperties, using the provided AgentPermissionBash2
func (t *Agent_Permission_Bash_AdditionalProperties) MergeAgentPermissionBash2(v AgentPermissionBash2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Agent_Permission_Bash_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Agent_Permission_Bash_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAgentPermissionEdit0 returns the union data inside the Agent_Permission_Edit as a AgentPermissionEdit0
func (t Agent_Permission_Edit) AsAgentPermissionEdit0() (AgentPermissionEdit0, error) {
	var body AgentPermissionEdit0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentPermissionEdit0 overwrites any union data inside the Agent_Permission_Edit as the provided AgentPermissionEdit0
func (t *Agent_Permission_Edit) FromAgentPermissionEdit0(v AgentPermissionEdit0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentPermissionEdit0 performs a merge with any union data inside the Agent_Permission_Edit, using the provided AgentPermissionEdit0
func (t *Agent_Permission_Edit) MergeAgentPermissionEdit0(v AgentPermissionEdit0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentPermissionEdit1 returns the union data inside the Agent_Permission_Edit as a AgentPermissionEdit1
func (t Agent_Permission_Edit) AsAgentPermissionEdit1() (AgentPermissionEdit1, error) {
	var body AgentPermissionEdit1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentPermissionEdit1 overwrites any union data inside the Agent_Permission_Edit as the provided AgentPermissionEdit1
func (t *Agent_Permission_Edit) FromAgentPermissionEdit1(v AgentPermissionEdit1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentPermissionEdit1 performs a merge with any union data inside the Agent_Permission_Edit, using the provided AgentPermissionEdit1
func (t *Agent_Permission_Edit) MergeAgentPermissionEdit1(v AgentPermissionEdit1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentPermissionEdit2 returns the union data inside the Agent_Permission_Edit as a AgentPermissionEdit2
func (t Agent_Permission_Edit) AsAgentPermissionEdit2() (AgentPermissionEdit2, error) {
	var body AgentPermissionEdit2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentPermissionEdit2 overwrites any union data inside the Agent_Permission_Edit as the provided AgentPermissionEdit2
func (t *Agent_Permission_Edit) FromAgentPermissionEdit2(v AgentPermissionEdit2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentPermissionEdit2 performs a merge with any union data inside the Agent_Permission_Edit, using the provided AgentPermissionEdit2
func (t *Agent_Permission_Edit) MergeAgentPermissionEdit2(v AgentPermissionEdit2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Agent_Permission_Edit) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Agent_Permission_Edit) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAgentPermissionWebfetch0 returns the union data inside the Agent_Permission_Webfetch as a AgentPermissionWebfetch0
func (t Agent_Permission_Webfetch) AsAgentPermissionWebfetch0() (AgentPermissionWebfetch0, error) {
	var body AgentPermissionWebfetch0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentPermissionWebfetch0 overwrites any union data inside the Agent_Permission_Webfetch as the provided AgentPermissionWebfetch0
func (t *Agent_Permission_Webfetch) FromAgentPermissionWebfetch0(v AgentPermissionWebfetch0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentPermissionWebfetch0 performs a merge with any union data inside the Agent_Permission_Webfetch, using the provided AgentPermissionWebfetch0
func (t *Agent_Permission_Webfetch) MergeAgentPermissionWebfetch0(v AgentPermissionWebfetch0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentPermissionWebfetch1 returns the union data inside the Agent_Permission_Webfetch as a AgentPermissionWebfetch1
func (t Agent_Permission_Webfetch) AsAgentPermissionWebfetch1() (AgentPermissionWebfetch1, error) {
	var body AgentPermissionWebfetch1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentPermissionWebfetch1 overwrites any union data inside the Agent_Permission_Webfetch as the provided AgentPermissionWebfetch1
func (t *Agent_Permission_Webfetch) FromAgentPermissionWebfetch1(v AgentPermissionWebfetch1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentPermissionWebfetch1 performs a merge with any union data inside the Agent_Permission_Webfetch, using the provided AgentPermissionWebfetch1
func (t *Agent_Permission_Webfetch) MergeAgentPermissionWebfetch1(v AgentPermissionWebfetch1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentPermissionWebfetch2 returns the union data inside the Agent_Permission_Webfetch as a AgentPermissionWebfetch2
func (t Agent_Permission_Webfetch) AsAgentPermissionWebfetch2() (AgentPermissionWebfetch2, error) {
	var body AgentPermissionWebfetch2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentPermissionWebfetch2 overwrites any union data inside the Agent_Permission_Webfetch as the provided AgentPermissionWebfetch2
func (t *Agent_Permission_Webfetch) FromAgentPermissionWebfetch2(v AgentPermissionWebfetch2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentPermissionWebfetch2 performs a merge with any union data inside the Agent_Permission_Webfetch, using the provided AgentPermissionWebfetch2
func (t *Agent_Permission_Webfetch) MergeAgentPermissionWebfetch2(v AgentPermissionWebfetch2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Agent_Permission_Webfetch) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Agent_Permission_Webfetch) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAgentConfigMode0 returns the union data inside the AgentConfig_Mode as a AgentConfigMode0
func (t AgentConfig_Mode) AsAgentConfigMode0() (AgentConfigMode0, error) {
	var body AgentConfigMode0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentConfigMode0 overwrites any union data inside the AgentConfig_Mode as the provided AgentConfigMode0
func (t *AgentConfig_Mode) FromAgentConfigMode0(v AgentConfigMode0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentConfigMode0 performs a merge with any union data inside the AgentConfig_Mode, using the provided AgentConfigMode0
func (t *AgentConfig_Mode) MergeAgentConfigMode0(v AgentConfigMode0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentConfigMode1 returns the union data inside the AgentConfig_Mode as a AgentConfigMode1
func (t AgentConfig_Mode) AsAgentConfigMode1() (AgentConfigMode1, error) {
	var body AgentConfigMode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentConfigMode1 overwrites any union data inside the AgentConfig_Mode as the provided AgentConfigMode1
func (t *AgentConfig_Mode) FromAgentConfigMode1(v AgentConfigMode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentConfigMode1 performs a merge with any union data inside the AgentConfig_Mode, using the provided AgentConfigMode1
func (t *AgentConfig_Mode) MergeAgentConfigMode1(v AgentConfigMode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentConfigMode2 returns the union data inside the AgentConfig_Mode as a AgentConfigMode2
func (t AgentConfig_Mode) AsAgentConfigMode2() (AgentConfigMode2, error) {
	var body AgentConfigMode2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentConfigMode2 overwrites any union data inside the AgentConfig_Mode as the provided AgentConfigMode2
func (t *AgentConfig_Mode) FromAgentConfigMode2(v AgentConfigMode2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentConfigMode2 performs a merge with any union data inside the AgentConfig_Mode, using the provided AgentConfigMode2
func (t *AgentConfig_Mode) MergeAgentConfigMode2(v AgentConfigMode2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AgentConfig_Mode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AgentConfig_Mode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAgentConfigPermissionBash00 returns the union data inside the AgentConfigPermissionBash0 as a AgentConfigPermissionBash00
func (t AgentConfigPermissionBash0) AsAgentConfigPermissionBash00() (AgentConfigPermissionBash00, error) {
	var body AgentConfigPermissionBash00
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentConfigPermissionBash00 overwrites any union data inside the AgentConfigPermissionBash0 as the provided AgentConfigPermissionBash00
func (t *AgentConfigPermissionBash0) FromAgentConfigPermissionBash00(v AgentConfigPermissionBash00) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentConfigPermissionBash00 performs a merge with any union data inside the AgentConfigPermissionBash0, using the provided AgentConfigPermissionBash00
func (t *AgentConfigPermissionBash0) MergeAgentConfigPermissionBash00(v AgentConfigPermissionBash00) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentConfigPermissionBash01 returns the union data inside the AgentConfigPermissionBash0 as a AgentConfigPermissionBash01
func (t AgentConfigPermissionBash0) AsAgentConfigPermissionBash01() (AgentConfigPermissionBash01, error) {
	var body AgentConfigPermissionBash01
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentConfigPermissionBash01 overwrites any union data inside the AgentConfigPermissionBash0 as the provided AgentConfigPermissionBash01
func (t *AgentConfigPermissionBash0) FromAgentConfigPermissionBash01(v AgentConfigPermissionBash01) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentConfigPermissionBash01 performs a merge with any union data inside the AgentConfigPermissionBash0, using the provided AgentConfigPermissionBash01
func (t *AgentConfigPermissionBash0) MergeAgentConfigPermissionBash01(v AgentConfigPermissionBash01) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentConfigPermissionBash02 returns the union data inside the AgentConfigPermissionBash0 as a AgentConfigPermissionBash02
func (t AgentConfigPermissionBash0) AsAgentConfigPermissionBash02() (AgentConfigPermissionBash02, error) {
	var body AgentConfigPermissionBash02
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentConfigPermissionBash02 overwrites any union data inside the AgentConfigPermissionBash0 as the provided AgentConfigPermissionBash02
func (t *AgentConfigPermissionBash0) FromAgentConfigPermissionBash02(v AgentConfigPermissionBash02) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentConfigPermissionBash02 performs a merge with any union data inside the AgentConfigPermissionBash0, using the provided AgentConfigPermissionBash02
func (t *AgentConfigPermissionBash0) MergeAgentConfigPermissionBash02(v AgentConfigPermissionBash02) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AgentConfigPermissionBash0) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AgentConfigPermissionBash0) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAgentConfigPermissionBash10 returns the union data inside the AgentConfig_Permission_Bash_1_AdditionalProperties as a AgentConfigPermissionBash10
func (t AgentConfig_Permission_Bash_1_AdditionalProperties) AsAgentConfigPermissionBash10() (AgentConfigPermissionBash10, error) {
	var body AgentConfigPermissionBash10
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentConfigPermissionBash10 overwrites any union data inside the AgentConfig_Permission_Bash_1_AdditionalProperties as the provided AgentConfigPermissionBash10
func (t *AgentConfig_Permission_Bash_1_AdditionalProperties) FromAgentConfigPermissionBash10(v AgentConfigPermissionBash10) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentConfigPermissionBash10 performs a merge with any union data inside the AgentConfig_Permission_Bash_1_AdditionalProperties, using the provided AgentConfigPermissionBash10
func (t *AgentConfig_Permission_Bash_1_AdditionalProperties) MergeAgentConfigPermissionBash10(v AgentConfigPermissionBash10) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentConfigPermissionBash11 returns the union data inside the AgentConfig_Permission_Bash_1_AdditionalProperties as a AgentConfigPermissionBash11
func (t AgentConfig_Permission_Bash_1_AdditionalProperties) AsAgentConfigPermissionBash11() (AgentConfigPermissionBash11, error) {
	var body AgentConfigPermissionBash11
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentConfigPermissionBash11 overwrites any union data inside the AgentConfig_Permission_Bash_1_AdditionalProperties as the provided AgentConfigPermissionBash11
func (t *AgentConfig_Permission_Bash_1_AdditionalProperties) FromAgentConfigPermissionBash11(v AgentConfigPermissionBash11) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentConfigPermissionBash11 performs a merge with any union data inside the AgentConfig_Permission_Bash_1_AdditionalProperties, using the provided AgentConfigPermissionBash11
func (t *AgentConfig_Permission_Bash_1_AdditionalProperties) MergeAgentConfigPermissionBash11(v AgentConfigPermissionBash11) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentConfigPermissionBash12 returns the union data inside the AgentConfig_Permission_Bash_1_AdditionalProperties as a AgentConfigPermissionBash12
func (t AgentConfig_Permission_Bash_1_AdditionalProperties) AsAgentConfigPermissionBash12() (AgentConfigPermissionBash12, error) {
	var body AgentConfigPermissionBash12
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentConfigPermissionBash12 overwrites any union data inside the AgentConfig_Permission_Bash_1_AdditionalProperties as the provided AgentConfigPermissionBash12
func (t *AgentConfig_Permission_Bash_1_AdditionalProperties) FromAgentConfigPermissionBash12(v AgentConfigPermissionBash12) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentConfigPermissionBash12 performs a merge with any union data inside the AgentConfig_Permission_Bash_1_AdditionalProperties, using the provided AgentConfigPermissionBash12
func (t *AgentConfig_Permission_Bash_1_AdditionalProperties) MergeAgentConfigPermissionBash12(v AgentConfigPermissionBash12) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AgentConfig_Permission_Bash_1_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AgentConfig_Permission_Bash_1_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAgentConfigPermissionBash0 returns the union data inside the AgentConfig_Permission_Bash as a AgentConfigPermissionBash0
func (t AgentConfig_Permission_Bash) AsAgentConfigPermissionBash0() (AgentConfigPermissionBash0, error) {
	var body AgentConfigPermissionBash0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentConfigPermissionBash0 overwrites any union data inside the AgentConfig_Permission_Bash as the provided AgentConfigPermissionBash0
func (t *AgentConfig_Permission_Bash) FromAgentConfigPermissionBash0(v AgentConfigPermissionBash0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentConfigPermissionBash0 performs a merge with any union data inside the AgentConfig_Permission_Bash, using the provided AgentConfigPermissionBash0
func (t *AgentConfig_Permission_Bash) MergeAgentConfigPermissionBash0(v AgentConfigPermissionBash0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentConfigPermissionBash1 returns the union data inside the AgentConfig_Permission_Bash as a AgentConfigPermissionBash1
func (t AgentConfig_Permission_Bash) AsAgentConfigPermissionBash1() (AgentConfigPermissionBash1, error) {
	var body AgentConfigPermissionBash1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentConfigPermissionBash1 overwrites any union data inside the AgentConfig_Permission_Bash as the provided AgentConfigPermissionBash1
func (t *AgentConfig_Permission_Bash) FromAgentConfigPermissionBash1(v AgentConfigPermissionBash1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentConfigPermissionBash1 performs a merge with any union data inside the AgentConfig_Permission_Bash, using the provided AgentConfigPermissionBash1
func (t *AgentConfig_Permission_Bash) MergeAgentConfigPermissionBash1(v AgentConfigPermissionBash1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AgentConfig_Permission_Bash) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AgentConfig_Permission_Bash) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAgentConfigPermissionEdit0 returns the union data inside the AgentConfig_Permission_Edit as a AgentConfigPermissionEdit0
func (t AgentConfig_Permission_Edit) AsAgentConfigPermissionEdit0() (AgentConfigPermissionEdit0, error) {
	var body AgentConfigPermissionEdit0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentConfigPermissionEdit0 overwrites any union data inside the AgentConfig_Permission_Edit as the provided AgentConfigPermissionEdit0
func (t *AgentConfig_Permission_Edit) FromAgentConfigPermissionEdit0(v AgentConfigPermissionEdit0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentConfigPermissionEdit0 performs a merge with any union data inside the AgentConfig_Permission_Edit, using the provided AgentConfigPermissionEdit0
func (t *AgentConfig_Permission_Edit) MergeAgentConfigPermissionEdit0(v AgentConfigPermissionEdit0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentConfigPermissionEdit1 returns the union data inside the AgentConfig_Permission_Edit as a AgentConfigPermissionEdit1
func (t AgentConfig_Permission_Edit) AsAgentConfigPermissionEdit1() (AgentConfigPermissionEdit1, error) {
	var body AgentConfigPermissionEdit1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentConfigPermissionEdit1 overwrites any union data inside the AgentConfig_Permission_Edit as the provided AgentConfigPermissionEdit1
func (t *AgentConfig_Permission_Edit) FromAgentConfigPermissionEdit1(v AgentConfigPermissionEdit1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentConfigPermissionEdit1 performs a merge with any union data inside the AgentConfig_Permission_Edit, using the provided AgentConfigPermissionEdit1
func (t *AgentConfig_Permission_Edit) MergeAgentConfigPermissionEdit1(v AgentConfigPermissionEdit1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentConfigPermissionEdit2 returns the union data inside the AgentConfig_Permission_Edit as a AgentConfigPermissionEdit2
func (t AgentConfig_Permission_Edit) AsAgentConfigPermissionEdit2() (AgentConfigPermissionEdit2, error) {
	var body AgentConfigPermissionEdit2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentConfigPermissionEdit2 overwrites any union data inside the AgentConfig_Permission_Edit as the provided AgentConfigPermissionEdit2
func (t *AgentConfig_Permission_Edit) FromAgentConfigPermissionEdit2(v AgentConfigPermissionEdit2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentConfigPermissionEdit2 performs a merge with any union data inside the AgentConfig_Permission_Edit, using the provided AgentConfigPermissionEdit2
func (t *AgentConfig_Permission_Edit) MergeAgentConfigPermissionEdit2(v AgentConfigPermissionEdit2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AgentConfig_Permission_Edit) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AgentConfig_Permission_Edit) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAgentConfigPermissionWebfetch0 returns the union data inside the AgentConfig_Permission_Webfetch as a AgentConfigPermissionWebfetch0
func (t AgentConfig_Permission_Webfetch) AsAgentConfigPermissionWebfetch0() (AgentConfigPermissionWebfetch0, error) {
	var body AgentConfigPermissionWebfetch0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentConfigPermissionWebfetch0 overwrites any union data inside the AgentConfig_Permission_Webfetch as the provided AgentConfigPermissionWebfetch0
func (t *AgentConfig_Permission_Webfetch) FromAgentConfigPermissionWebfetch0(v AgentConfigPermissionWebfetch0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentConfigPermissionWebfetch0 performs a merge with any union data inside the AgentConfig_Permission_Webfetch, using the provided AgentConfigPermissionWebfetch0
func (t *AgentConfig_Permission_Webfetch) MergeAgentConfigPermissionWebfetch0(v AgentConfigPermissionWebfetch0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentConfigPermissionWebfetch1 returns the union data inside the AgentConfig_Permission_Webfetch as a AgentConfigPermissionWebfetch1
func (t AgentConfig_Permission_Webfetch) AsAgentConfigPermissionWebfetch1() (AgentConfigPermissionWebfetch1, error) {
	var body AgentConfigPermissionWebfetch1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentConfigPermissionWebfetch1 overwrites any union data inside the AgentConfig_Permission_Webfetch as the provided AgentConfigPermissionWebfetch1
func (t *AgentConfig_Permission_Webfetch) FromAgentConfigPermissionWebfetch1(v AgentConfigPermissionWebfetch1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentConfigPermissionWebfetch1 performs a merge with any union data inside the AgentConfig_Permission_Webfetch, using the provided AgentConfigPermissionWebfetch1
func (t *AgentConfig_Permission_Webfetch) MergeAgentConfigPermissionWebfetch1(v AgentConfigPermissionWebfetch1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentConfigPermissionWebfetch2 returns the union data inside the AgentConfig_Permission_Webfetch as a AgentConfigPermissionWebfetch2
func (t AgentConfig_Permission_Webfetch) AsAgentConfigPermissionWebfetch2() (AgentConfigPermissionWebfetch2, error) {
	var body AgentConfigPermissionWebfetch2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentConfigPermissionWebfetch2 overwrites any union data inside the AgentConfig_Permission_Webfetch as the provided AgentConfigPermissionWebfetch2
func (t *AgentConfig_Permission_Webfetch) FromAgentConfigPermissionWebfetch2(v AgentConfigPermissionWebfetch2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentConfigPermissionWebfetch2 performs a merge with any union data inside the AgentConfig_Permission_Webfetch, using the provided AgentConfigPermissionWebfetch2
func (t *AgentConfig_Permission_Webfetch) MergeAgentConfigPermissionWebfetch2(v AgentConfigPermissionWebfetch2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AgentConfig_Permission_Webfetch) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AgentConfig_Permission_Webfetch) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsProviderAuthError returns the union data inside the AssistantMessage_Error as a ProviderAuthError
func (t AssistantMessage_Error) AsProviderAuthError() (ProviderAuthError, error) {
	var body ProviderAuthError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProviderAuthError overwrites any union data inside the AssistantMessage_Error as the provided ProviderAuthError
func (t *AssistantMessage_Error) FromProviderAuthError(v ProviderAuthError) error {
	v.Name = "ProviderAuthError"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProviderAuthError performs a merge with any union data inside the AssistantMessage_Error, using the provided ProviderAuthError
func (t *AssistantMessage_Error) MergeProviderAuthError(v ProviderAuthError) error {
	v.Name = "ProviderAuthError"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnknownError returns the union data inside the AssistantMessage_Error as a UnknownError
func (t AssistantMessage_Error) AsUnknownError() (UnknownError, error) {
	var body UnknownError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnknownError overwrites any union data inside the AssistantMessage_Error as the provided UnknownError
func (t *AssistantMessage_Error) FromUnknownError(v UnknownError) error {
	v.Name = "UnknownError"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnknownError performs a merge with any union data inside the AssistantMessage_Error, using the provided UnknownError
func (t *AssistantMessage_Error) MergeUnknownError(v UnknownError) error {
	v.Name = "UnknownError"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageOutputLengthError returns the union data inside the AssistantMessage_Error as a MessageOutputLengthError
func (t AssistantMessage_Error) AsMessageOutputLengthError() (MessageOutputLengthError, error) {
	var body MessageOutputLengthError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageOutputLengthError overwrites any union data inside the AssistantMessage_Error as the provided MessageOutputLengthError
func (t *AssistantMessage_Error) FromMessageOutputLengthError(v MessageOutputLengthError) error {
	v.Name = "MessageOutputLengthError"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageOutputLengthError performs a merge with any union data inside the AssistantMessage_Error, using the provided MessageOutputLengthError
func (t *AssistantMessage_Error) MergeMessageOutputLengthError(v MessageOutputLengthError) error {
	v.Name = "MessageOutputLengthError"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageAbortedError returns the union data inside the AssistantMessage_Error as a MessageAbortedError
func (t AssistantMessage_Error) AsMessageAbortedError() (MessageAbortedError, error) {
	var body MessageAbortedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageAbortedError overwrites any union data inside the AssistantMessage_Error as the provided MessageAbortedError
func (t *AssistantMessage_Error) FromMessageAbortedError(v MessageAbortedError) error {
	v.Name = "MessageAbortedError"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageAbortedError performs a merge with any union data inside the AssistantMessage_Error, using the provided MessageAbortedError
func (t *AssistantMessage_Error) MergeMessageAbortedError(v MessageAbortedError) error {
	v.Name = "MessageAbortedError"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AssistantMessage_Error) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"name"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t AssistantMessage_Error) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "MessageAbortedError":
		return t.AsMessageAbortedError()
	case "MessageOutputLengthError":
		return t.AsMessageOutputLengthError()
	case "ProviderAuthError":
		return t.AsProviderAuthError()
	case "UnknownError":
		return t.AsUnknownError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t AssistantMessage_Error) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AssistantMessage_Error) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOAuth returns the union data inside the Auth as a OAuth
func (t Auth) AsOAuth() (OAuth, error) {
	var body OAuth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOAuth overwrites any union data inside the Auth as the provided OAuth
func (t *Auth) FromOAuth(v OAuth) error {
	v.Type = "oauth"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOAuth performs a merge with any union data inside the Auth, using the provided OAuth
func (t *Auth) MergeOAuth(v OAuth) error {
	v.Type = "oauth"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsApiAuth returns the union data inside the Auth as a ApiAuth
func (t Auth) AsApiAuth() (ApiAuth, error) {
	var body ApiAuth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiAuth overwrites any union data inside the Auth as the provided ApiAuth
func (t *Auth) FromApiAuth(v ApiAuth) error {
	v.Type = "api"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiAuth performs a merge with any union data inside the Auth, using the provided ApiAuth
func (t *Auth) MergeApiAuth(v ApiAuth) error {
	v.Type = "api"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWellKnownAuth returns the union data inside the Auth as a WellKnownAuth
func (t Auth) AsWellKnownAuth() (WellKnownAuth, error) {
	var body WellKnownAuth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWellKnownAuth overwrites any union data inside the Auth as the provided WellKnownAuth
func (t *Auth) FromWellKnownAuth(v WellKnownAuth) error {
	v.Type = "wellknown"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWellKnownAuth performs a merge with any union data inside the Auth, using the provided WellKnownAuth
func (t *Auth) MergeWellKnownAuth(v WellKnownAuth) error {
	v.Type = "wellknown"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Auth) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Auth) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "api":
		return t.AsApiAuth()
	case "oauth":
		return t.AsOAuth()
	case "wellknown":
		return t.AsWellKnownAuth()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Auth) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Auth) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsConfigLsp0 returns the union data inside the Config_Lsp_AdditionalProperties as a ConfigLsp0
func (t Config_Lsp_AdditionalProperties) AsConfigLsp0() (ConfigLsp0, error) {
	var body ConfigLsp0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigLsp0 overwrites any union data inside the Config_Lsp_AdditionalProperties as the provided ConfigLsp0
func (t *Config_Lsp_AdditionalProperties) FromConfigLsp0(v ConfigLsp0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigLsp0 performs a merge with any union data inside the Config_Lsp_AdditionalProperties, using the provided ConfigLsp0
func (t *Config_Lsp_AdditionalProperties) MergeConfigLsp0(v ConfigLsp0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsConfigLsp1 returns the union data inside the Config_Lsp_AdditionalProperties as a ConfigLsp1
func (t Config_Lsp_AdditionalProperties) AsConfigLsp1() (ConfigLsp1, error) {
	var body ConfigLsp1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigLsp1 overwrites any union data inside the Config_Lsp_AdditionalProperties as the provided ConfigLsp1
func (t *Config_Lsp_AdditionalProperties) FromConfigLsp1(v ConfigLsp1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigLsp1 performs a merge with any union data inside the Config_Lsp_AdditionalProperties, using the provided ConfigLsp1
func (t *Config_Lsp_AdditionalProperties) MergeConfigLsp1(v ConfigLsp1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Config_Lsp_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Config_Lsp_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMcpLocalConfig returns the union data inside the Config_Mcp_AdditionalProperties as a McpLocalConfig
func (t Config_Mcp_AdditionalProperties) AsMcpLocalConfig() (McpLocalConfig, error) {
	var body McpLocalConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMcpLocalConfig overwrites any union data inside the Config_Mcp_AdditionalProperties as the provided McpLocalConfig
func (t *Config_Mcp_AdditionalProperties) FromMcpLocalConfig(v McpLocalConfig) error {
	v.Type = "local"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMcpLocalConfig performs a merge with any union data inside the Config_Mcp_AdditionalProperties, using the provided McpLocalConfig
func (t *Config_Mcp_AdditionalProperties) MergeMcpLocalConfig(v McpLocalConfig) error {
	v.Type = "local"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMcpRemoteConfig returns the union data inside the Config_Mcp_AdditionalProperties as a McpRemoteConfig
func (t Config_Mcp_AdditionalProperties) AsMcpRemoteConfig() (McpRemoteConfig, error) {
	var body McpRemoteConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMcpRemoteConfig overwrites any union data inside the Config_Mcp_AdditionalProperties as the provided McpRemoteConfig
func (t *Config_Mcp_AdditionalProperties) FromMcpRemoteConfig(v McpRemoteConfig) error {
	v.Type = "remote"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMcpRemoteConfig performs a merge with any union data inside the Config_Mcp_AdditionalProperties, using the provided McpRemoteConfig
func (t *Config_Mcp_AdditionalProperties) MergeMcpRemoteConfig(v McpRemoteConfig) error {
	v.Type = "remote"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Config_Mcp_AdditionalProperties) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Config_Mcp_AdditionalProperties) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "local":
		return t.AsMcpLocalConfig()
	case "remote":
		return t.AsMcpRemoteConfig()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Config_Mcp_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Config_Mcp_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsConfigPermissionBash00 returns the union data inside the ConfigPermissionBash0 as a ConfigPermissionBash00
func (t ConfigPermissionBash0) AsConfigPermissionBash00() (ConfigPermissionBash00, error) {
	var body ConfigPermissionBash00
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigPermissionBash00 overwrites any union data inside the ConfigPermissionBash0 as the provided ConfigPermissionBash00
func (t *ConfigPermissionBash0) FromConfigPermissionBash00(v ConfigPermissionBash00) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigPermissionBash00 performs a merge with any union data inside the ConfigPermissionBash0, using the provided ConfigPermissionBash00
func (t *ConfigPermissionBash0) MergeConfigPermissionBash00(v ConfigPermissionBash00) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsConfigPermissionBash01 returns the union data inside the ConfigPermissionBash0 as a ConfigPermissionBash01
func (t ConfigPermissionBash0) AsConfigPermissionBash01() (ConfigPermissionBash01, error) {
	var body ConfigPermissionBash01
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigPermissionBash01 overwrites any union data inside the ConfigPermissionBash0 as the provided ConfigPermissionBash01
func (t *ConfigPermissionBash0) FromConfigPermissionBash01(v ConfigPermissionBash01) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigPermissionBash01 performs a merge with any union data inside the ConfigPermissionBash0, using the provided ConfigPermissionBash01
func (t *ConfigPermissionBash0) MergeConfigPermissionBash01(v ConfigPermissionBash01) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsConfigPermissionBash02 returns the union data inside the ConfigPermissionBash0 as a ConfigPermissionBash02
func (t ConfigPermissionBash0) AsConfigPermissionBash02() (ConfigPermissionBash02, error) {
	var body ConfigPermissionBash02
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigPermissionBash02 overwrites any union data inside the ConfigPermissionBash0 as the provided ConfigPermissionBash02
func (t *ConfigPermissionBash0) FromConfigPermissionBash02(v ConfigPermissionBash02) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigPermissionBash02 performs a merge with any union data inside the ConfigPermissionBash0, using the provided ConfigPermissionBash02
func (t *ConfigPermissionBash0) MergeConfigPermissionBash02(v ConfigPermissionBash02) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ConfigPermissionBash0) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ConfigPermissionBash0) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsConfigPermissionBash10 returns the union data inside the Config_Permission_Bash_1_AdditionalProperties as a ConfigPermissionBash10
func (t Config_Permission_Bash_1_AdditionalProperties) AsConfigPermissionBash10() (ConfigPermissionBash10, error) {
	var body ConfigPermissionBash10
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigPermissionBash10 overwrites any union data inside the Config_Permission_Bash_1_AdditionalProperties as the provided ConfigPermissionBash10
func (t *Config_Permission_Bash_1_AdditionalProperties) FromConfigPermissionBash10(v ConfigPermissionBash10) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigPermissionBash10 performs a merge with any union data inside the Config_Permission_Bash_1_AdditionalProperties, using the provided ConfigPermissionBash10
func (t *Config_Permission_Bash_1_AdditionalProperties) MergeConfigPermissionBash10(v ConfigPermissionBash10) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsConfigPermissionBash11 returns the union data inside the Config_Permission_Bash_1_AdditionalProperties as a ConfigPermissionBash11
func (t Config_Permission_Bash_1_AdditionalProperties) AsConfigPermissionBash11() (ConfigPermissionBash11, error) {
	var body ConfigPermissionBash11
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigPermissionBash11 overwrites any union data inside the Config_Permission_Bash_1_AdditionalProperties as the provided ConfigPermissionBash11
func (t *Config_Permission_Bash_1_AdditionalProperties) FromConfigPermissionBash11(v ConfigPermissionBash11) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigPermissionBash11 performs a merge with any union data inside the Config_Permission_Bash_1_AdditionalProperties, using the provided ConfigPermissionBash11
func (t *Config_Permission_Bash_1_AdditionalProperties) MergeConfigPermissionBash11(v ConfigPermissionBash11) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsConfigPermissionBash12 returns the union data inside the Config_Permission_Bash_1_AdditionalProperties as a ConfigPermissionBash12
func (t Config_Permission_Bash_1_AdditionalProperties) AsConfigPermissionBash12() (ConfigPermissionBash12, error) {
	var body ConfigPermissionBash12
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigPermissionBash12 overwrites any union data inside the Config_Permission_Bash_1_AdditionalProperties as the provided ConfigPermissionBash12
func (t *Config_Permission_Bash_1_AdditionalProperties) FromConfigPermissionBash12(v ConfigPermissionBash12) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigPermissionBash12 performs a merge with any union data inside the Config_Permission_Bash_1_AdditionalProperties, using the provided ConfigPermissionBash12
func (t *Config_Permission_Bash_1_AdditionalProperties) MergeConfigPermissionBash12(v ConfigPermissionBash12) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Config_Permission_Bash_1_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Config_Permission_Bash_1_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsConfigPermissionBash0 returns the union data inside the Config_Permission_Bash as a ConfigPermissionBash0
func (t Config_Permission_Bash) AsConfigPermissionBash0() (ConfigPermissionBash0, error) {
	var body ConfigPermissionBash0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigPermissionBash0 overwrites any union data inside the Config_Permission_Bash as the provided ConfigPermissionBash0
func (t *Config_Permission_Bash) FromConfigPermissionBash0(v ConfigPermissionBash0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigPermissionBash0 performs a merge with any union data inside the Config_Permission_Bash, using the provided ConfigPermissionBash0
func (t *Config_Permission_Bash) MergeConfigPermissionBash0(v ConfigPermissionBash0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsConfigPermissionBash1 returns the union data inside the Config_Permission_Bash as a ConfigPermissionBash1
func (t Config_Permission_Bash) AsConfigPermissionBash1() (ConfigPermissionBash1, error) {
	var body ConfigPermissionBash1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigPermissionBash1 overwrites any union data inside the Config_Permission_Bash as the provided ConfigPermissionBash1
func (t *Config_Permission_Bash) FromConfigPermissionBash1(v ConfigPermissionBash1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigPermissionBash1 performs a merge with any union data inside the Config_Permission_Bash, using the provided ConfigPermissionBash1
func (t *Config_Permission_Bash) MergeConfigPermissionBash1(v ConfigPermissionBash1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Config_Permission_Bash) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Config_Permission_Bash) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsConfigPermissionEdit0 returns the union data inside the Config_Permission_Edit as a ConfigPermissionEdit0
func (t Config_Permission_Edit) AsConfigPermissionEdit0() (ConfigPermissionEdit0, error) {
	var body ConfigPermissionEdit0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigPermissionEdit0 overwrites any union data inside the Config_Permission_Edit as the provided ConfigPermissionEdit0
func (t *Config_Permission_Edit) FromConfigPermissionEdit0(v ConfigPermissionEdit0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigPermissionEdit0 performs a merge with any union data inside the Config_Permission_Edit, using the provided ConfigPermissionEdit0
func (t *Config_Permission_Edit) MergeConfigPermissionEdit0(v ConfigPermissionEdit0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsConfigPermissionEdit1 returns the union data inside the Config_Permission_Edit as a ConfigPermissionEdit1
func (t Config_Permission_Edit) AsConfigPermissionEdit1() (ConfigPermissionEdit1, error) {
	var body ConfigPermissionEdit1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigPermissionEdit1 overwrites any union data inside the Config_Permission_Edit as the provided ConfigPermissionEdit1
func (t *Config_Permission_Edit) FromConfigPermissionEdit1(v ConfigPermissionEdit1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigPermissionEdit1 performs a merge with any union data inside the Config_Permission_Edit, using the provided ConfigPermissionEdit1
func (t *Config_Permission_Edit) MergeConfigPermissionEdit1(v ConfigPermissionEdit1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsConfigPermissionEdit2 returns the union data inside the Config_Permission_Edit as a ConfigPermissionEdit2
func (t Config_Permission_Edit) AsConfigPermissionEdit2() (ConfigPermissionEdit2, error) {
	var body ConfigPermissionEdit2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigPermissionEdit2 overwrites any union data inside the Config_Permission_Edit as the provided ConfigPermissionEdit2
func (t *Config_Permission_Edit) FromConfigPermissionEdit2(v ConfigPermissionEdit2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigPermissionEdit2 performs a merge with any union data inside the Config_Permission_Edit, using the provided ConfigPermissionEdit2
func (t *Config_Permission_Edit) MergeConfigPermissionEdit2(v ConfigPermissionEdit2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Config_Permission_Edit) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Config_Permission_Edit) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsConfigPermissionWebfetch0 returns the union data inside the Config_Permission_Webfetch as a ConfigPermissionWebfetch0
func (t Config_Permission_Webfetch) AsConfigPermissionWebfetch0() (ConfigPermissionWebfetch0, error) {
	var body ConfigPermissionWebfetch0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigPermissionWebfetch0 overwrites any union data inside the Config_Permission_Webfetch as the provided ConfigPermissionWebfetch0
func (t *Config_Permission_Webfetch) FromConfigPermissionWebfetch0(v ConfigPermissionWebfetch0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigPermissionWebfetch0 performs a merge with any union data inside the Config_Permission_Webfetch, using the provided ConfigPermissionWebfetch0
func (t *Config_Permission_Webfetch) MergeConfigPermissionWebfetch0(v ConfigPermissionWebfetch0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsConfigPermissionWebfetch1 returns the union data inside the Config_Permission_Webfetch as a ConfigPermissionWebfetch1
func (t Config_Permission_Webfetch) AsConfigPermissionWebfetch1() (ConfigPermissionWebfetch1, error) {
	var body ConfigPermissionWebfetch1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigPermissionWebfetch1 overwrites any union data inside the Config_Permission_Webfetch as the provided ConfigPermissionWebfetch1
func (t *Config_Permission_Webfetch) FromConfigPermissionWebfetch1(v ConfigPermissionWebfetch1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigPermissionWebfetch1 performs a merge with any union data inside the Config_Permission_Webfetch, using the provided ConfigPermissionWebfetch1
func (t *Config_Permission_Webfetch) MergeConfigPermissionWebfetch1(v ConfigPermissionWebfetch1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsConfigPermissionWebfetch2 returns the union data inside the Config_Permission_Webfetch as a ConfigPermissionWebfetch2
func (t Config_Permission_Webfetch) AsConfigPermissionWebfetch2() (ConfigPermissionWebfetch2, error) {
	var body ConfigPermissionWebfetch2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigPermissionWebfetch2 overwrites any union data inside the Config_Permission_Webfetch as the provided ConfigPermissionWebfetch2
func (t *Config_Permission_Webfetch) FromConfigPermissionWebfetch2(v ConfigPermissionWebfetch2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigPermissionWebfetch2 performs a merge with any union data inside the Config_Permission_Webfetch, using the provided ConfigPermissionWebfetch2
func (t *Config_Permission_Webfetch) MergeConfigPermissionWebfetch2(v ConfigPermissionWebfetch2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Config_Permission_Webfetch) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Config_Permission_Webfetch) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEventInstallationUpdated returns the union data inside the Event as a EventInstallationUpdated
func (t Event) AsEventInstallationUpdated() (EventInstallationUpdated, error) {
	var body EventInstallationUpdated
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventInstallationUpdated overwrites any union data inside the Event as the provided EventInstallationUpdated
func (t *Event) FromEventInstallationUpdated(v EventInstallationUpdated) error {
	v.Type = "installation.updated"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventInstallationUpdated performs a merge with any union data inside the Event, using the provided EventInstallationUpdated
func (t *Event) MergeEventInstallationUpdated(v EventInstallationUpdated) error {
	v.Type = "installation.updated"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventLspClientDiagnostics returns the union data inside the Event as a EventLspClientDiagnostics
func (t Event) AsEventLspClientDiagnostics() (EventLspClientDiagnostics, error) {
	var body EventLspClientDiagnostics
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventLspClientDiagnostics overwrites any union data inside the Event as the provided EventLspClientDiagnostics
func (t *Event) FromEventLspClientDiagnostics(v EventLspClientDiagnostics) error {
	v.Type = "lsp.client.diagnostics"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventLspClientDiagnostics performs a merge with any union data inside the Event, using the provided EventLspClientDiagnostics
func (t *Event) MergeEventLspClientDiagnostics(v EventLspClientDiagnostics) error {
	v.Type = "lsp.client.diagnostics"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventMessageUpdated returns the union data inside the Event as a EventMessageUpdated
func (t Event) AsEventMessageUpdated() (EventMessageUpdated, error) {
	var body EventMessageUpdated
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventMessageUpdated overwrites any union data inside the Event as the provided EventMessageUpdated
func (t *Event) FromEventMessageUpdated(v EventMessageUpdated) error {
	v.Type = "message.updated"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventMessageUpdated performs a merge with any union data inside the Event, using the provided EventMessageUpdated
func (t *Event) MergeEventMessageUpdated(v EventMessageUpdated) error {
	v.Type = "message.updated"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventMessageRemoved returns the union data inside the Event as a EventMessageRemoved
func (t Event) AsEventMessageRemoved() (EventMessageRemoved, error) {
	var body EventMessageRemoved
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventMessageRemoved overwrites any union data inside the Event as the provided EventMessageRemoved
func (t *Event) FromEventMessageRemoved(v EventMessageRemoved) error {
	v.Type = "message.removed"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventMessageRemoved performs a merge with any union data inside the Event, using the provided EventMessageRemoved
func (t *Event) MergeEventMessageRemoved(v EventMessageRemoved) error {
	v.Type = "message.removed"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventMessagePartUpdated returns the union data inside the Event as a EventMessagePartUpdated
func (t Event) AsEventMessagePartUpdated() (EventMessagePartUpdated, error) {
	var body EventMessagePartUpdated
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventMessagePartUpdated overwrites any union data inside the Event as the provided EventMessagePartUpdated
func (t *Event) FromEventMessagePartUpdated(v EventMessagePartUpdated) error {
	v.Type = "message.part.updated"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventMessagePartUpdated performs a merge with any union data inside the Event, using the provided EventMessagePartUpdated
func (t *Event) MergeEventMessagePartUpdated(v EventMessagePartUpdated) error {
	v.Type = "message.part.updated"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventMessagePartRemoved returns the union data inside the Event as a EventMessagePartRemoved
func (t Event) AsEventMessagePartRemoved() (EventMessagePartRemoved, error) {
	var body EventMessagePartRemoved
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventMessagePartRemoved overwrites any union data inside the Event as the provided EventMessagePartRemoved
func (t *Event) FromEventMessagePartRemoved(v EventMessagePartRemoved) error {
	v.Type = "message.part.removed"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventMessagePartRemoved performs a merge with any union data inside the Event, using the provided EventMessagePartRemoved
func (t *Event) MergeEventMessagePartRemoved(v EventMessagePartRemoved) error {
	v.Type = "message.part.removed"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventStorageWrite returns the union data inside the Event as a EventStorageWrite
func (t Event) AsEventStorageWrite() (EventStorageWrite, error) {
	var body EventStorageWrite
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventStorageWrite overwrites any union data inside the Event as the provided EventStorageWrite
func (t *Event) FromEventStorageWrite(v EventStorageWrite) error {
	v.Type = "storage.write"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventStorageWrite performs a merge with any union data inside the Event, using the provided EventStorageWrite
func (t *Event) MergeEventStorageWrite(v EventStorageWrite) error {
	v.Type = "storage.write"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventPermissionUpdated returns the union data inside the Event as a EventPermissionUpdated
func (t Event) AsEventPermissionUpdated() (EventPermissionUpdated, error) {
	var body EventPermissionUpdated
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventPermissionUpdated overwrites any union data inside the Event as the provided EventPermissionUpdated
func (t *Event) FromEventPermissionUpdated(v EventPermissionUpdated) error {
	v.Type = "permission.updated"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventPermissionUpdated performs a merge with any union data inside the Event, using the provided EventPermissionUpdated
func (t *Event) MergeEventPermissionUpdated(v EventPermissionUpdated) error {
	v.Type = "permission.updated"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventPermissionReplied returns the union data inside the Event as a EventPermissionReplied
func (t Event) AsEventPermissionReplied() (EventPermissionReplied, error) {
	var body EventPermissionReplied
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventPermissionReplied overwrites any union data inside the Event as the provided EventPermissionReplied
func (t *Event) FromEventPermissionReplied(v EventPermissionReplied) error {
	v.Type = "permission.replied"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventPermissionReplied performs a merge with any union data inside the Event, using the provided EventPermissionReplied
func (t *Event) MergeEventPermissionReplied(v EventPermissionReplied) error {
	v.Type = "permission.replied"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventFileEdited returns the union data inside the Event as a EventFileEdited
func (t Event) AsEventFileEdited() (EventFileEdited, error) {
	var body EventFileEdited
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventFileEdited overwrites any union data inside the Event as the provided EventFileEdited
func (t *Event) FromEventFileEdited(v EventFileEdited) error {
	v.Type = "file.edited"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventFileEdited performs a merge with any union data inside the Event, using the provided EventFileEdited
func (t *Event) MergeEventFileEdited(v EventFileEdited) error {
	v.Type = "file.edited"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventSessionUpdated returns the union data inside the Event as a EventSessionUpdated
func (t Event) AsEventSessionUpdated() (EventSessionUpdated, error) {
	var body EventSessionUpdated
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventSessionUpdated overwrites any union data inside the Event as the provided EventSessionUpdated
func (t *Event) FromEventSessionUpdated(v EventSessionUpdated) error {
	v.Type = "session.updated"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventSessionUpdated performs a merge with any union data inside the Event, using the provided EventSessionUpdated
func (t *Event) MergeEventSessionUpdated(v EventSessionUpdated) error {
	v.Type = "session.updated"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventSessionDeleted returns the union data inside the Event as a EventSessionDeleted
func (t Event) AsEventSessionDeleted() (EventSessionDeleted, error) {
	var body EventSessionDeleted
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventSessionDeleted overwrites any union data inside the Event as the provided EventSessionDeleted
func (t *Event) FromEventSessionDeleted(v EventSessionDeleted) error {
	v.Type = "session.deleted"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventSessionDeleted performs a merge with any union data inside the Event, using the provided EventSessionDeleted
func (t *Event) MergeEventSessionDeleted(v EventSessionDeleted) error {
	v.Type = "session.deleted"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventSessionIdle returns the union data inside the Event as a EventSessionIdle
func (t Event) AsEventSessionIdle() (EventSessionIdle, error) {
	var body EventSessionIdle
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventSessionIdle overwrites any union data inside the Event as the provided EventSessionIdle
func (t *Event) FromEventSessionIdle(v EventSessionIdle) error {
	v.Type = "session.idle"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventSessionIdle performs a merge with any union data inside the Event, using the provided EventSessionIdle
func (t *Event) MergeEventSessionIdle(v EventSessionIdle) error {
	v.Type = "session.idle"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventSessionError returns the union data inside the Event as a EventSessionError
func (t Event) AsEventSessionError() (EventSessionError, error) {
	var body EventSessionError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventSessionError overwrites any union data inside the Event as the provided EventSessionError
func (t *Event) FromEventSessionError(v EventSessionError) error {
	v.Type = "session.error"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventSessionError performs a merge with any union data inside the Event, using the provided EventSessionError
func (t *Event) MergeEventSessionError(v EventSessionError) error {
	v.Type = "session.error"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventServerConnected returns the union data inside the Event as a EventServerConnected
func (t Event) AsEventServerConnected() (EventServerConnected, error) {
	var body EventServerConnected
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventServerConnected overwrites any union data inside the Event as the provided EventServerConnected
func (t *Event) FromEventServerConnected(v EventServerConnected) error {
	v.Type = "server.connected"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventServerConnected performs a merge with any union data inside the Event, using the provided EventServerConnected
func (t *Event) MergeEventServerConnected(v EventServerConnected) error {
	v.Type = "server.connected"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventFileWatcherUpdated returns the union data inside the Event as a EventFileWatcherUpdated
func (t Event) AsEventFileWatcherUpdated() (EventFileWatcherUpdated, error) {
	var body EventFileWatcherUpdated
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventFileWatcherUpdated overwrites any union data inside the Event as the provided EventFileWatcherUpdated
func (t *Event) FromEventFileWatcherUpdated(v EventFileWatcherUpdated) error {
	v.Type = "file.watcher.updated"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventFileWatcherUpdated performs a merge with any union data inside the Event, using the provided EventFileWatcherUpdated
func (t *Event) MergeEventFileWatcherUpdated(v EventFileWatcherUpdated) error {
	v.Type = "file.watcher.updated"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventIdeInstalled returns the union data inside the Event as a EventIdeInstalled
func (t Event) AsEventIdeInstalled() (EventIdeInstalled, error) {
	var body EventIdeInstalled
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventIdeInstalled overwrites any union data inside the Event as the provided EventIdeInstalled
func (t *Event) FromEventIdeInstalled(v EventIdeInstalled) error {
	v.Type = "ide.installed"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventIdeInstalled performs a merge with any union data inside the Event, using the provided EventIdeInstalled
func (t *Event) MergeEventIdeInstalled(v EventIdeInstalled) error {
	v.Type = "ide.installed"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Event) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Event) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "file.edited":
		return t.AsEventFileEdited()
	case "file.watcher.updated":
		return t.AsEventFileWatcherUpdated()
	case "ide.installed":
		return t.AsEventIdeInstalled()
	case "installation.updated":
		return t.AsEventInstallationUpdated()
	case "lsp.client.diagnostics":
		return t.AsEventLspClientDiagnostics()
	case "message.part.removed":
		return t.AsEventMessagePartRemoved()
	case "message.part.updated":
		return t.AsEventMessagePartUpdated()
	case "message.removed":
		return t.AsEventMessageRemoved()
	case "message.updated":
		return t.AsEventMessageUpdated()
	case "permission.replied":
		return t.AsEventPermissionReplied()
	case "permission.updated":
		return t.AsEventPermissionUpdated()
	case "server.connected":
		return t.AsEventServerConnected()
	case "session.deleted":
		return t.AsEventSessionDeleted()
	case "session.error":
		return t.AsEventSessionError()
	case "session.idle":
		return t.AsEventSessionIdle()
	case "session.updated":
		return t.AsEventSessionUpdated()
	case "storage.write":
		return t.AsEventStorageWrite()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Event) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Event) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEventFileWatcherUpdatedPropertiesEvent0 returns the union data inside the EventFileWatcherUpdated_Properties_Event as a EventFileWatcherUpdatedPropertiesEvent0
func (t EventFileWatcherUpdated_Properties_Event) AsEventFileWatcherUpdatedPropertiesEvent0() (EventFileWatcherUpdatedPropertiesEvent0, error) {
	var body EventFileWatcherUpdatedPropertiesEvent0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventFileWatcherUpdatedPropertiesEvent0 overwrites any union data inside the EventFileWatcherUpdated_Properties_Event as the provided EventFileWatcherUpdatedPropertiesEvent0
func (t *EventFileWatcherUpdated_Properties_Event) FromEventFileWatcherUpdatedPropertiesEvent0(v EventFileWatcherUpdatedPropertiesEvent0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventFileWatcherUpdatedPropertiesEvent0 performs a merge with any union data inside the EventFileWatcherUpdated_Properties_Event, using the provided EventFileWatcherUpdatedPropertiesEvent0
func (t *EventFileWatcherUpdated_Properties_Event) MergeEventFileWatcherUpdatedPropertiesEvent0(v EventFileWatcherUpdatedPropertiesEvent0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventFileWatcherUpdatedPropertiesEvent1 returns the union data inside the EventFileWatcherUpdated_Properties_Event as a EventFileWatcherUpdatedPropertiesEvent1
func (t EventFileWatcherUpdated_Properties_Event) AsEventFileWatcherUpdatedPropertiesEvent1() (EventFileWatcherUpdatedPropertiesEvent1, error) {
	var body EventFileWatcherUpdatedPropertiesEvent1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventFileWatcherUpdatedPropertiesEvent1 overwrites any union data inside the EventFileWatcherUpdated_Properties_Event as the provided EventFileWatcherUpdatedPropertiesEvent1
func (t *EventFileWatcherUpdated_Properties_Event) FromEventFileWatcherUpdatedPropertiesEvent1(v EventFileWatcherUpdatedPropertiesEvent1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventFileWatcherUpdatedPropertiesEvent1 performs a merge with any union data inside the EventFileWatcherUpdated_Properties_Event, using the provided EventFileWatcherUpdatedPropertiesEvent1
func (t *EventFileWatcherUpdated_Properties_Event) MergeEventFileWatcherUpdatedPropertiesEvent1(v EventFileWatcherUpdatedPropertiesEvent1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EventFileWatcherUpdated_Properties_Event) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EventFileWatcherUpdated_Properties_Event) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsProviderAuthError returns the union data inside the EventSessionError_Properties_Error as a ProviderAuthError
func (t EventSessionError_Properties_Error) AsProviderAuthError() (ProviderAuthError, error) {
	var body ProviderAuthError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProviderAuthError overwrites any union data inside the EventSessionError_Properties_Error as the provided ProviderAuthError
func (t *EventSessionError_Properties_Error) FromProviderAuthError(v ProviderAuthError) error {
	v.Name = "ProviderAuthError"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProviderAuthError performs a merge with any union data inside the EventSessionError_Properties_Error, using the provided ProviderAuthError
func (t *EventSessionError_Properties_Error) MergeProviderAuthError(v ProviderAuthError) error {
	v.Name = "ProviderAuthError"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnknownError returns the union data inside the EventSessionError_Properties_Error as a UnknownError
func (t EventSessionError_Properties_Error) AsUnknownError() (UnknownError, error) {
	var body UnknownError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnknownError overwrites any union data inside the EventSessionError_Properties_Error as the provided UnknownError
func (t *EventSessionError_Properties_Error) FromUnknownError(v UnknownError) error {
	v.Name = "UnknownError"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnknownError performs a merge with any union data inside the EventSessionError_Properties_Error, using the provided UnknownError
func (t *EventSessionError_Properties_Error) MergeUnknownError(v UnknownError) error {
	v.Name = "UnknownError"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageOutputLengthError returns the union data inside the EventSessionError_Properties_Error as a MessageOutputLengthError
func (t EventSessionError_Properties_Error) AsMessageOutputLengthError() (MessageOutputLengthError, error) {
	var body MessageOutputLengthError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageOutputLengthError overwrites any union data inside the EventSessionError_Properties_Error as the provided MessageOutputLengthError
func (t *EventSessionError_Properties_Error) FromMessageOutputLengthError(v MessageOutputLengthError) error {
	v.Name = "MessageOutputLengthError"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageOutputLengthError performs a merge with any union data inside the EventSessionError_Properties_Error, using the provided MessageOutputLengthError
func (t *EventSessionError_Properties_Error) MergeMessageOutputLengthError(v MessageOutputLengthError) error {
	v.Name = "MessageOutputLengthError"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageAbortedError returns the union data inside the EventSessionError_Properties_Error as a MessageAbortedError
func (t EventSessionError_Properties_Error) AsMessageAbortedError() (MessageAbortedError, error) {
	var body MessageAbortedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageAbortedError overwrites any union data inside the EventSessionError_Properties_Error as the provided MessageAbortedError
func (t *EventSessionError_Properties_Error) FromMessageAbortedError(v MessageAbortedError) error {
	v.Name = "MessageAbortedError"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageAbortedError performs a merge with any union data inside the EventSessionError_Properties_Error, using the provided MessageAbortedError
func (t *EventSessionError_Properties_Error) MergeMessageAbortedError(v MessageAbortedError) error {
	v.Name = "MessageAbortedError"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EventSessionError_Properties_Error) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"name"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t EventSessionError_Properties_Error) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "MessageAbortedError":
		return t.AsMessageAbortedError()
	case "MessageOutputLengthError":
		return t.AsMessageOutputLengthError()
	case "ProviderAuthError":
		return t.AsProviderAuthError()
	case "UnknownError":
		return t.AsUnknownError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t EventSessionError_Properties_Error) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EventSessionError_Properties_Error) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFileSource returns the union data inside the FilePartSource as a FileSource
func (t FilePartSource) AsFileSource() (FileSource, error) {
	var body FileSource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileSource overwrites any union data inside the FilePartSource as the provided FileSource
func (t *FilePartSource) FromFileSource(v FileSource) error {
	v.Type = "file"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileSource performs a merge with any union data inside the FilePartSource, using the provided FileSource
func (t *FilePartSource) MergeFileSource(v FileSource) error {
	v.Type = "file"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSymbolSource returns the union data inside the FilePartSource as a SymbolSource
func (t FilePartSource) AsSymbolSource() (SymbolSource, error) {
	var body SymbolSource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSymbolSource overwrites any union data inside the FilePartSource as the provided SymbolSource
func (t *FilePartSource) FromSymbolSource(v SymbolSource) error {
	v.Type = "symbol"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSymbolSource performs a merge with any union data inside the FilePartSource, using the provided SymbolSource
func (t *FilePartSource) MergeSymbolSource(v SymbolSource) error {
	v.Type = "symbol"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FilePartSource) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t FilePartSource) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "file":
		return t.AsFileSource()
	case "symbol":
		return t.AsSymbolSource()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t FilePartSource) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FilePartSource) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUserMessage returns the union data inside the Message as a UserMessage
func (t Message) AsUserMessage() (UserMessage, error) {
	var body UserMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserMessage overwrites any union data inside the Message as the provided UserMessage
func (t *Message) FromUserMessage(v UserMessage) error {
	v.Role = "user"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserMessage performs a merge with any union data inside the Message, using the provided UserMessage
func (t *Message) MergeUserMessage(v UserMessage) error {
	v.Role = "user"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssistantMessage returns the union data inside the Message as a AssistantMessage
func (t Message) AsAssistantMessage() (AssistantMessage, error) {
	var body AssistantMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssistantMessage overwrites any union data inside the Message as the provided AssistantMessage
func (t *Message) FromAssistantMessage(v AssistantMessage) error {
	v.Role = "assistant"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssistantMessage performs a merge with any union data inside the Message, using the provided AssistantMessage
func (t *Message) MergeAssistantMessage(v AssistantMessage) error {
	v.Role = "assistant"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Message) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"role"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Message) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "assistant":
		return t.AsAssistantMessage()
	case "user":
		return t.AsUserMessage()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Message) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Message) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTextPart returns the union data inside the Part as a TextPart
func (t Part) AsTextPart() (TextPart, error) {
	var body TextPart
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTextPart overwrites any union data inside the Part as the provided TextPart
func (t *Part) FromTextPart(v TextPart) error {
	v.Type = "text"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTextPart performs a merge with any union data inside the Part, using the provided TextPart
func (t *Part) MergeTextPart(v TextPart) error {
	v.Type = "text"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReasoningPart returns the union data inside the Part as a ReasoningPart
func (t Part) AsReasoningPart() (ReasoningPart, error) {
	var body ReasoningPart
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReasoningPart overwrites any union data inside the Part as the provided ReasoningPart
func (t *Part) FromReasoningPart(v ReasoningPart) error {
	v.Type = "reasoning"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReasoningPart performs a merge with any union data inside the Part, using the provided ReasoningPart
func (t *Part) MergeReasoningPart(v ReasoningPart) error {
	v.Type = "reasoning"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilePart returns the union data inside the Part as a FilePart
func (t Part) AsFilePart() (FilePart, error) {
	var body FilePart
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilePart overwrites any union data inside the Part as the provided FilePart
func (t *Part) FromFilePart(v FilePart) error {
	v.Type = "file"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilePart performs a merge with any union data inside the Part, using the provided FilePart
func (t *Part) MergeFilePart(v FilePart) error {
	v.Type = "file"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsToolPart returns the union data inside the Part as a ToolPart
func (t Part) AsToolPart() (ToolPart, error) {
	var body ToolPart
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromToolPart overwrites any union data inside the Part as the provided ToolPart
func (t *Part) FromToolPart(v ToolPart) error {
	v.Type = "tool"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeToolPart performs a merge with any union data inside the Part, using the provided ToolPart
func (t *Part) MergeToolPart(v ToolPart) error {
	v.Type = "tool"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStepStartPart returns the union data inside the Part as a StepStartPart
func (t Part) AsStepStartPart() (StepStartPart, error) {
	var body StepStartPart
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStepStartPart overwrites any union data inside the Part as the provided StepStartPart
func (t *Part) FromStepStartPart(v StepStartPart) error {
	v.Type = "step-start"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStepStartPart performs a merge with any union data inside the Part, using the provided StepStartPart
func (t *Part) MergeStepStartPart(v StepStartPart) error {
	v.Type = "step-start"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStepFinishPart returns the union data inside the Part as a StepFinishPart
func (t Part) AsStepFinishPart() (StepFinishPart, error) {
	var body StepFinishPart
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStepFinishPart overwrites any union data inside the Part as the provided StepFinishPart
func (t *Part) FromStepFinishPart(v StepFinishPart) error {
	v.Type = "step-finish"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStepFinishPart performs a merge with any union data inside the Part, using the provided StepFinishPart
func (t *Part) MergeStepFinishPart(v StepFinishPart) error {
	v.Type = "step-finish"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSnapshotPart returns the union data inside the Part as a SnapshotPart
func (t Part) AsSnapshotPart() (SnapshotPart, error) {
	var body SnapshotPart
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSnapshotPart overwrites any union data inside the Part as the provided SnapshotPart
func (t *Part) FromSnapshotPart(v SnapshotPart) error {
	v.Type = "snapshot"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSnapshotPart performs a merge with any union data inside the Part, using the provided SnapshotPart
func (t *Part) MergeSnapshotPart(v SnapshotPart) error {
	v.Type = "snapshot"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchPart returns the union data inside the Part as a PatchPart
func (t Part) AsPatchPart() (PatchPart, error) {
	var body PatchPart
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchPart overwrites any union data inside the Part as the provided PatchPart
func (t *Part) FromPatchPart(v PatchPart) error {
	v.Type = "patch"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchPart performs a merge with any union data inside the Part, using the provided PatchPart
func (t *Part) MergePatchPart(v PatchPart) error {
	v.Type = "patch"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAgentPart returns the union data inside the Part as a AgentPart
func (t Part) AsAgentPart() (AgentPart, error) {
	var body AgentPart
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAgentPart overwrites any union data inside the Part as the provided AgentPart
func (t *Part) FromAgentPart(v AgentPart) error {
	v.Type = "agent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAgentPart performs a merge with any union data inside the Part, using the provided AgentPart
func (t *Part) MergeAgentPart(v AgentPart) error {
	v.Type = "agent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Part) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Part) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "agent":
		return t.AsAgentPart()
	case "file":
		return t.AsFilePart()
	case "patch":
		return t.AsPatchPart()
	case "reasoning":
		return t.AsReasoningPart()
	case "snapshot":
		return t.AsSnapshotPart()
	case "step-finish":
		return t.AsStepFinishPart()
	case "step-start":
		return t.AsStepStartPart()
	case "text":
		return t.AsTextPart()
	case "tool":
		return t.AsToolPart()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Part) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Part) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsToolStatePending returns the union data inside the ToolState as a ToolStatePending
func (t ToolState) AsToolStatePending() (ToolStatePending, error) {
	var body ToolStatePending
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromToolStatePending overwrites any union data inside the ToolState as the provided ToolStatePending
func (t *ToolState) FromToolStatePending(v ToolStatePending) error {
	v.Status = "pending"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeToolStatePending performs a merge with any union data inside the ToolState, using the provided ToolStatePending
func (t *ToolState) MergeToolStatePending(v ToolStatePending) error {
	v.Status = "pending"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsToolStateRunning returns the union data inside the ToolState as a ToolStateRunning
func (t ToolState) AsToolStateRunning() (ToolStateRunning, error) {
	var body ToolStateRunning
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromToolStateRunning overwrites any union data inside the ToolState as the provided ToolStateRunning
func (t *ToolState) FromToolStateRunning(v ToolStateRunning) error {
	v.Status = "running"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeToolStateRunning performs a merge with any union data inside the ToolState, using the provided ToolStateRunning
func (t *ToolState) MergeToolStateRunning(v ToolStateRunning) error {
	v.Status = "running"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsToolStateCompleted returns the union data inside the ToolState as a ToolStateCompleted
func (t ToolState) AsToolStateCompleted() (ToolStateCompleted, error) {
	var body ToolStateCompleted
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromToolStateCompleted overwrites any union data inside the ToolState as the provided ToolStateCompleted
func (t *ToolState) FromToolStateCompleted(v ToolStateCompleted) error {
	v.Status = "completed"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeToolStateCompleted performs a merge with any union data inside the ToolState, using the provided ToolStateCompleted
func (t *ToolState) MergeToolStateCompleted(v ToolStateCompleted) error {
	v.Status = "completed"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsToolStateError returns the union data inside the ToolState as a ToolStateError
func (t ToolState) AsToolStateError() (ToolStateError, error) {
	var body ToolStateError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromToolStateError overwrites any union data inside the ToolState as the provided ToolStateError
func (t *ToolState) FromToolStateError(v ToolStateError) error {
	v.Status = "error"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeToolStateError performs a merge with any union data inside the ToolState, using the provided ToolStateError
func (t *ToolState) MergeToolStateError(v ToolStateError) error {
	v.Status = "error"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ToolState) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"status"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ToolState) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "completed":
		return t.AsToolStateCompleted()
	case "error":
		return t.AsToolStateError()
	case "pending":
		return t.AsToolStatePending()
	case "running":
		return t.AsToolStateRunning()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ToolState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ToolState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
