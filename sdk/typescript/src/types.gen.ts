/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get events */
        get: operations["event.subscribe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/app": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get app info */
        get: operations["app.get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/app/init": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Initialize the app */
        post: operations["app.init"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get config info */
        get: operations["config.get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get system health information */
        get: operations["health.get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all sessions */
        get: operations["session.list"];
        put?: never;
        /** @description Create a new session */
        post: operations["session.create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get session */
        get: operations["session.get"];
        put?: never;
        post?: never;
        /** @description Delete a session and all its data */
        delete: operations["session.delete"];
        options?: never;
        head?: never;
        /** @description Update session properties */
        patch: operations["session.update"];
        trace?: never;
    };
    "/session/{id}/children": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a session's children */
        get: operations["session.children"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{id}/init": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Analyze the app and create an AGENTS.md file */
        post: operations["session.init"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{id}/abort": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Abort a session */
        post: operations["session.abort"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{id}/share": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Share a session */
        post: operations["session.share"];
        /** @description Unshare the session */
        delete: operations["session.unshare"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{id}/summarize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Summarize the session */
        post: operations["session.summarize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{id}/message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List messages for a session */
        get: operations["session.messages"];
        put?: never;
        /** @description Create and send a new message to a session */
        post: operations["session.chat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{id}/message/{messageID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a message from a session */
        get: operations["session.message"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{id}/command": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Send a new command to a session */
        post: operations["session.command"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{id}/shell": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Run a shell command */
        post: operations["session.shell"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{id}/revert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Revert a message */
        post: operations["session.revert"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{id}/unrevert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Restore all reverted messages */
        post: operations["session.unrevert"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{id}/permissions/{permissionID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Respond to a permission request */
        post: operations["postSessionByIdPermissionsByPermissionID"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/command": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all commands */
        get: operations["command.list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all providers */
        get: operations["config.providers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/find": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find text in files */
        get: operations["find.text"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/find/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find files */
        get: operations["find.files"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/find/symbol": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find workspace symbols */
        get: operations["find.symbols"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List files and directories */
        get: operations["file.list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Read a file */
        get: operations["file.read"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get file status */
        get: operations["file.status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Write a log entry to the server logs */
        post: operations["app.log"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all agents */
        get: operations["app.agents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tui/append-prompt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Append prompt to the TUI */
        post: operations["tui.appendPrompt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tui/open-help": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Open the help dialog */
        post: operations["tui.openHelp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tui/open-sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Open the session dialog */
        post: operations["tui.openSessions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tui/open-themes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Open the theme dialog */
        post: operations["tui.openThemes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tui/open-models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Open the model dialog */
        post: operations["tui.openModels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tui/submit-prompt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Submit the prompt */
        post: operations["tui.submitPrompt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tui/clear-prompt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Clear the prompt */
        post: operations["tui.clearPrompt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tui/execute-command": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Execute a TUI command (e.g. agent_cycle) */
        post: operations["tui.executeCommand"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tui/show-toast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Show a toast notification in the TUI */
        post: operations["tui.showToast"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Set authentication credentials */
        put: operations["auth.set"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Event: {
            /** @constant */
            type: "installation.updated";
            properties: {
                version: string;
            };
        } | {
            /** @constant */
            type: "lsp.client.diagnostics";
            properties: {
                serverID: string;
                path: string;
            };
        } | {
            /** @constant */
            type: "message.updated";
            properties: {
                info: {
                    id: string;
                    sessionID: string;
                    /** @constant */
                    role: "user";
                    time: {
                        created: number;
                    };
                } | {
                    id: string;
                    sessionID: string;
                    /** @constant */
                    role: "assistant";
                    time: {
                        created: number;
                        completed?: number;
                    };
                    error?: {
                        /** @constant */
                        name: "ProviderAuthError";
                        data: {
                            providerID: string;
                            message: string;
                        };
                    } | {
                        /** @constant */
                        name: "UnknownError";
                        data: {
                            message: string;
                        };
                    } | {
                        /** @constant */
                        name: "MessageOutputLengthError";
                        data: Record<string, never>;
                    } | {
                        /** @constant */
                        name: "MessageAbortedError";
                        data: Record<string, never>;
                    };
                    system: string[];
                    modelID: string;
                    providerID: string;
                    mode: string;
                    path: {
                        cwd: string;
                        root: string;
                    };
                    summary?: boolean;
                    cost: number;
                    tokens: {
                        input: number;
                        output: number;
                        reasoning: number;
                        cache: {
                            read: number;
                            write: number;
                        };
                    };
                };
            };
        } | {
            /** @constant */
            type: "message.removed";
            properties: {
                sessionID: string;
                messageID: string;
            };
        } | {
            /** @constant */
            type: "message.part.updated";
            properties: {
                part: {
                    id: string;
                    sessionID: string;
                    messageID: string;
                    /** @constant */
                    type: "text";
                    text: string;
                    synthetic?: boolean;
                    time?: {
                        start: number;
                        end?: number;
                    };
                } | {
                    id: string;
                    sessionID: string;
                    messageID: string;
                    /** @constant */
                    type: "reasoning";
                    text: string;
                    metadata?: {
                        [key: string]: unknown;
                    };
                    time: {
                        start: number;
                        end?: number;
                    };
                } | {
                    id: string;
                    sessionID: string;
                    messageID: string;
                    /** @constant */
                    type: "file";
                    mime: string;
                    filename?: string;
                    url: string;
                    source?: {
                        text: {
                            value: string;
                            start: number;
                            end: number;
                        };
                        /** @constant */
                        type: "file";
                        path: string;
                    } | {
                        text: {
                            value: string;
                            start: number;
                            end: number;
                        };
                        /** @constant */
                        type: "symbol";
                        path: string;
                        range: {
                            start: {
                                line: number;
                                character: number;
                            };
                            end: {
                                line: number;
                                character: number;
                            };
                        };
                        name: string;
                        kind: number;
                    };
                } | {
                    id: string;
                    sessionID: string;
                    messageID: string;
                    /** @constant */
                    type: "tool";
                    callID: string;
                    tool: string;
                    state: {
                        /** @constant */
                        status: "pending";
                    } | {
                        /** @constant */
                        status: "running";
                        input?: unknown;
                        title?: string;
                        metadata?: {
                            [key: string]: unknown;
                        };
                        time: {
                            start: number;
                        };
                    } | {
                        /** @constant */
                        status: "completed";
                        input: {
                            [key: string]: unknown;
                        };
                        output: string;
                        title: string;
                        metadata: {
                            [key: string]: unknown;
                        };
                        time: {
                            start: number;
                            end: number;
                        };
                    } | {
                        /** @constant */
                        status: "error";
                        input: {
                            [key: string]: unknown;
                        };
                        error: string;
                        metadata?: {
                            [key: string]: unknown;
                        };
                        time: {
                            start: number;
                            end: number;
                        };
                    };
                } | {
                    id: string;
                    sessionID: string;
                    messageID: string;
                    /** @constant */
                    type: "step-start";
                } | {
                    id: string;
                    sessionID: string;
                    messageID: string;
                    /** @constant */
                    type: "step-finish";
                    cost: number;
                    tokens: {
                        input: number;
                        output: number;
                        reasoning: number;
                        cache: {
                            read: number;
                            write: number;
                        };
                    };
                } | {
                    id: string;
                    sessionID: string;
                    messageID: string;
                    /** @constant */
                    type: "snapshot";
                    snapshot: string;
                } | {
                    id: string;
                    sessionID: string;
                    messageID: string;
                    /** @constant */
                    type: "patch";
                    hash: string;
                    files: string[];
                } | {
                    id: string;
                    sessionID: string;
                    messageID: string;
                    /** @constant */
                    type: "agent";
                    name: string;
                    source?: {
                        value: string;
                        start: number;
                        end: number;
                    };
                };
            };
        } | {
            /** @constant */
            type: "message.part.removed";
            properties: {
                sessionID: string;
                messageID: string;
                partID: string;
            };
        } | {
            /** @constant */
            type: "storage.write";
            properties: {
                key: string;
                content?: unknown;
            };
        } | {
            /** @constant */
            type: "permission.updated";
            properties: {
                id: string;
                type: string;
                pattern?: string;
                sessionID: string;
                messageID: string;
                callID?: string;
                title: string;
                metadata: {
                    [key: string]: unknown;
                };
                time: {
                    created: number;
                };
            };
        } | {
            /** @constant */
            type: "permission.replied";
            properties: {
                sessionID: string;
                permissionID: string;
                response: string;
            };
        } | {
            /** @constant */
            type: "file.edited";
            properties: {
                file: string;
            };
        } | {
            /** @constant */
            type: "session.updated";
            properties: {
                info: {
                    id: string;
                    parentID?: string;
                    share?: {
                        url: string;
                    };
                    title: string;
                    version: string;
                    time: {
                        created: number;
                        updated: number;
                    };
                    revert?: {
                        messageID: string;
                        partID?: string;
                        snapshot?: string;
                        diff?: string;
                    };
                };
            };
        } | {
            /** @constant */
            type: "session.deleted";
            properties: {
                info: {
                    id: string;
                    parentID?: string;
                    share?: {
                        url: string;
                    };
                    title: string;
                    version: string;
                    time: {
                        created: number;
                        updated: number;
                    };
                    revert?: {
                        messageID: string;
                        partID?: string;
                        snapshot?: string;
                        diff?: string;
                    };
                };
            };
        } | {
            /** @constant */
            type: "session.idle";
            properties: {
                sessionID: string;
            };
        } | {
            /** @constant */
            type: "session.error";
            properties: {
                sessionID?: string;
                error?: {
                    /** @constant */
                    name: "ProviderAuthError";
                    data: {
                        providerID: string;
                        message: string;
                    };
                } | {
                    /** @constant */
                    name: "UnknownError";
                    data: {
                        message: string;
                    };
                } | {
                    /** @constant */
                    name: "MessageOutputLengthError";
                    data: Record<string, never>;
                } | {
                    /** @constant */
                    name: "MessageAbortedError";
                    data: Record<string, never>;
                };
            };
        } | {
            /** @constant */
            type: "server.connected";
            properties: Record<string, never>;
        } | {
            /** @constant */
            type: "file.watcher.updated";
            properties: {
                file: string;
                event: "rename" | "change";
            };
        } | {
            /** @constant */
            type: "ide.installed";
            properties: {
                ide: string;
            };
        };
        "Event.installation.updated": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "installation.updated";
            properties: {
                version: string;
            };
        };
        "Event.lsp.client.diagnostics": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "lsp.client.diagnostics";
            properties: {
                serverID: string;
                path: string;
            };
        };
        "Event.message.updated": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "message.updated";
            properties: {
                info: {
                    id: string;
                    sessionID: string;
                    /** @constant */
                    role: "user";
                    time: {
                        created: number;
                    };
                } | {
                    id: string;
                    sessionID: string;
                    /** @constant */
                    role: "assistant";
                    time: {
                        created: number;
                        completed?: number;
                    };
                    error?: {
                        /** @constant */
                        name: "ProviderAuthError";
                        data: {
                            providerID: string;
                            message: string;
                        };
                    } | {
                        /** @constant */
                        name: "UnknownError";
                        data: {
                            message: string;
                        };
                    } | {
                        /** @constant */
                        name: "MessageOutputLengthError";
                        data: Record<string, never>;
                    } | {
                        /** @constant */
                        name: "MessageAbortedError";
                        data: Record<string, never>;
                    };
                    system: string[];
                    modelID: string;
                    providerID: string;
                    mode: string;
                    path: {
                        cwd: string;
                        root: string;
                    };
                    summary?: boolean;
                    cost: number;
                    tokens: {
                        input: number;
                        output: number;
                        reasoning: number;
                        cache: {
                            read: number;
                            write: number;
                        };
                    };
                };
            };
        };
        Message: {
            id: string;
            sessionID: string;
            /** @constant */
            role: "user";
            time: {
                created: number;
            };
        } | {
            id: string;
            sessionID: string;
            /** @constant */
            role: "assistant";
            time: {
                created: number;
                completed?: number;
            };
            error?: {
                /** @constant */
                name: "ProviderAuthError";
                data: {
                    providerID: string;
                    message: string;
                };
            } | {
                /** @constant */
                name: "UnknownError";
                data: {
                    message: string;
                };
            } | {
                /** @constant */
                name: "MessageOutputLengthError";
                data: Record<string, never>;
            } | {
                /** @constant */
                name: "MessageAbortedError";
                data: Record<string, never>;
            };
            system: string[];
            modelID: string;
            providerID: string;
            mode: string;
            path: {
                cwd: string;
                root: string;
            };
            summary?: boolean;
            cost: number;
            tokens: {
                input: number;
                output: number;
                reasoning: number;
                cache: {
                    read: number;
                    write: number;
                };
            };
        };
        UserMessage: {
            id: string;
            sessionID: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            role: "user";
            time: {
                created: number;
            };
        };
        AssistantMessage: {
            id: string;
            sessionID: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            role: "assistant";
            time: {
                created: number;
                completed?: number;
            };
            error?: {
                /** @constant */
                name: "ProviderAuthError";
                data: {
                    providerID: string;
                    message: string;
                };
            } | {
                /** @constant */
                name: "UnknownError";
                data: {
                    message: string;
                };
            } | {
                /** @constant */
                name: "MessageOutputLengthError";
                data: Record<string, never>;
            } | {
                /** @constant */
                name: "MessageAbortedError";
                data: Record<string, never>;
            };
            system: string[];
            modelID: string;
            providerID: string;
            mode: string;
            path: {
                cwd: string;
                root: string;
            };
            summary?: boolean;
            cost: number;
            tokens: {
                input: number;
                output: number;
                reasoning: number;
                cache: {
                    read: number;
                    write: number;
                };
            };
        };
        ProviderAuthError: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            name: "ProviderAuthError";
            data: {
                providerID: string;
                message: string;
            };
        };
        UnknownError: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            name: "UnknownError";
            data: {
                message: string;
            };
        };
        MessageOutputLengthError: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            name: "MessageOutputLengthError";
            data: Record<string, never>;
        };
        MessageAbortedError: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            name: "MessageAbortedError";
            data: Record<string, never>;
        };
        "Event.message.removed": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "message.removed";
            properties: {
                sessionID: string;
                messageID: string;
            };
        };
        "Event.message.part.updated": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "message.part.updated";
            properties: {
                part: {
                    id: string;
                    sessionID: string;
                    messageID: string;
                    /** @constant */
                    type: "text";
                    text: string;
                    synthetic?: boolean;
                    time?: {
                        start: number;
                        end?: number;
                    };
                } | {
                    id: string;
                    sessionID: string;
                    messageID: string;
                    /** @constant */
                    type: "reasoning";
                    text: string;
                    metadata?: {
                        [key: string]: unknown;
                    };
                    time: {
                        start: number;
                        end?: number;
                    };
                } | {
                    id: string;
                    sessionID: string;
                    messageID: string;
                    /** @constant */
                    type: "file";
                    mime: string;
                    filename?: string;
                    url: string;
                    source?: {
                        text: {
                            value: string;
                            start: number;
                            end: number;
                        };
                        /** @constant */
                        type: "file";
                        path: string;
                    } | {
                        text: {
                            value: string;
                            start: number;
                            end: number;
                        };
                        /** @constant */
                        type: "symbol";
                        path: string;
                        range: {
                            start: {
                                line: number;
                                character: number;
                            };
                            end: {
                                line: number;
                                character: number;
                            };
                        };
                        name: string;
                        kind: number;
                    };
                } | {
                    id: string;
                    sessionID: string;
                    messageID: string;
                    /** @constant */
                    type: "tool";
                    callID: string;
                    tool: string;
                    state: {
                        /** @constant */
                        status: "pending";
                    } | {
                        /** @constant */
                        status: "running";
                        input?: unknown;
                        title?: string;
                        metadata?: {
                            [key: string]: unknown;
                        };
                        time: {
                            start: number;
                        };
                    } | {
                        /** @constant */
                        status: "completed";
                        input: {
                            [key: string]: unknown;
                        };
                        output: string;
                        title: string;
                        metadata: {
                            [key: string]: unknown;
                        };
                        time: {
                            start: number;
                            end: number;
                        };
                    } | {
                        /** @constant */
                        status: "error";
                        input: {
                            [key: string]: unknown;
                        };
                        error: string;
                        metadata?: {
                            [key: string]: unknown;
                        };
                        time: {
                            start: number;
                            end: number;
                        };
                    };
                } | {
                    id: string;
                    sessionID: string;
                    messageID: string;
                    /** @constant */
                    type: "step-start";
                } | {
                    id: string;
                    sessionID: string;
                    messageID: string;
                    /** @constant */
                    type: "step-finish";
                    cost: number;
                    tokens: {
                        input: number;
                        output: number;
                        reasoning: number;
                        cache: {
                            read: number;
                            write: number;
                        };
                    };
                } | {
                    id: string;
                    sessionID: string;
                    messageID: string;
                    /** @constant */
                    type: "snapshot";
                    snapshot: string;
                } | {
                    id: string;
                    sessionID: string;
                    messageID: string;
                    /** @constant */
                    type: "patch";
                    hash: string;
                    files: string[];
                } | {
                    id: string;
                    sessionID: string;
                    messageID: string;
                    /** @constant */
                    type: "agent";
                    name: string;
                    source?: {
                        value: string;
                        start: number;
                        end: number;
                    };
                };
            };
        };
        Part: {
            id: string;
            sessionID: string;
            messageID: string;
            /** @constant */
            type: "text";
            text: string;
            synthetic?: boolean;
            time?: {
                start: number;
                end?: number;
            };
        } | {
            id: string;
            sessionID: string;
            messageID: string;
            /** @constant */
            type: "reasoning";
            text: string;
            metadata?: {
                [key: string]: unknown;
            };
            time: {
                start: number;
                end?: number;
            };
        } | {
            id: string;
            sessionID: string;
            messageID: string;
            /** @constant */
            type: "file";
            mime: string;
            filename?: string;
            url: string;
            source?: {
                text: {
                    value: string;
                    start: number;
                    end: number;
                };
                /** @constant */
                type: "file";
                path: string;
            } | {
                text: {
                    value: string;
                    start: number;
                    end: number;
                };
                /** @constant */
                type: "symbol";
                path: string;
                range: {
                    start: {
                        line: number;
                        character: number;
                    };
                    end: {
                        line: number;
                        character: number;
                    };
                };
                name: string;
                kind: number;
            };
        } | {
            id: string;
            sessionID: string;
            messageID: string;
            /** @constant */
            type: "tool";
            callID: string;
            tool: string;
            state: {
                /** @constant */
                status: "pending";
            } | {
                /** @constant */
                status: "running";
                input?: unknown;
                title?: string;
                metadata?: {
                    [key: string]: unknown;
                };
                time: {
                    start: number;
                };
            } | {
                /** @constant */
                status: "completed";
                input: {
                    [key: string]: unknown;
                };
                output: string;
                title: string;
                metadata: {
                    [key: string]: unknown;
                };
                time: {
                    start: number;
                    end: number;
                };
            } | {
                /** @constant */
                status: "error";
                input: {
                    [key: string]: unknown;
                };
                error: string;
                metadata?: {
                    [key: string]: unknown;
                };
                time: {
                    start: number;
                    end: number;
                };
            };
        } | {
            id: string;
            sessionID: string;
            messageID: string;
            /** @constant */
            type: "step-start";
        } | {
            id: string;
            sessionID: string;
            messageID: string;
            /** @constant */
            type: "step-finish";
            cost: number;
            tokens: {
                input: number;
                output: number;
                reasoning: number;
                cache: {
                    read: number;
                    write: number;
                };
            };
        } | {
            id: string;
            sessionID: string;
            messageID: string;
            /** @constant */
            type: "snapshot";
            snapshot: string;
        } | {
            id: string;
            sessionID: string;
            messageID: string;
            /** @constant */
            type: "patch";
            hash: string;
            files: string[];
        } | {
            id: string;
            sessionID: string;
            messageID: string;
            /** @constant */
            type: "agent";
            name: string;
            source?: {
                value: string;
                start: number;
                end: number;
            };
        };
        TextPart: {
            id: string;
            sessionID: string;
            messageID: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "text";
            text: string;
            synthetic?: boolean;
            time?: {
                start: number;
                end?: number;
            };
        };
        ReasoningPart: {
            id: string;
            sessionID: string;
            messageID: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "reasoning";
            text: string;
            metadata?: {
                [key: string]: unknown;
            };
            time: {
                start: number;
                end?: number;
            };
        };
        FilePart: {
            id: string;
            sessionID: string;
            messageID: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "file";
            mime: string;
            filename?: string;
            url: string;
            source?: {
                text: {
                    value: string;
                    start: number;
                    end: number;
                };
                /** @constant */
                type: "file";
                path: string;
            } | {
                text: {
                    value: string;
                    start: number;
                    end: number;
                };
                /** @constant */
                type: "symbol";
                path: string;
                range: {
                    start: {
                        line: number;
                        character: number;
                    };
                    end: {
                        line: number;
                        character: number;
                    };
                };
                name: string;
                kind: number;
            };
        };
        FilePartSource: {
            text: {
                value: string;
                start: number;
                end: number;
            };
            /** @constant */
            type: "file";
            path: string;
        } | {
            text: {
                value: string;
                start: number;
                end: number;
            };
            /** @constant */
            type: "symbol";
            path: string;
            range: {
                start: {
                    line: number;
                    character: number;
                };
                end: {
                    line: number;
                    character: number;
                };
            };
            name: string;
            kind: number;
        };
        FileSource: {
            text: {
                value: string;
                start: number;
                end: number;
            };
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "file";
            path: string;
        };
        FilePartSourceText: {
            value: string;
            start: number;
            end: number;
        };
        SymbolSource: {
            text: {
                value: string;
                start: number;
                end: number;
            };
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "symbol";
            path: string;
            range: {
                start: {
                    line: number;
                    character: number;
                };
                end: {
                    line: number;
                    character: number;
                };
            };
            name: string;
            kind: number;
        };
        Range: {
            start: {
                line: number;
                character: number;
            };
            end: {
                line: number;
                character: number;
            };
        };
        ToolPart: {
            id: string;
            sessionID: string;
            messageID: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "tool";
            callID: string;
            tool: string;
            state: {
                /** @constant */
                status: "pending";
            } | {
                /** @constant */
                status: "running";
                input?: unknown;
                title?: string;
                metadata?: {
                    [key: string]: unknown;
                };
                time: {
                    start: number;
                };
            } | {
                /** @constant */
                status: "completed";
                input: {
                    [key: string]: unknown;
                };
                output: string;
                title: string;
                metadata: {
                    [key: string]: unknown;
                };
                time: {
                    start: number;
                    end: number;
                };
            } | {
                /** @constant */
                status: "error";
                input: {
                    [key: string]: unknown;
                };
                error: string;
                metadata?: {
                    [key: string]: unknown;
                };
                time: {
                    start: number;
                    end: number;
                };
            };
        };
        ToolState: {
            /** @constant */
            status: "pending";
        } | {
            /** @constant */
            status: "running";
            input?: unknown;
            title?: string;
            metadata?: {
                [key: string]: unknown;
            };
            time: {
                start: number;
            };
        } | {
            /** @constant */
            status: "completed";
            input: {
                [key: string]: unknown;
            };
            output: string;
            title: string;
            metadata: {
                [key: string]: unknown;
            };
            time: {
                start: number;
                end: number;
            };
        } | {
            /** @constant */
            status: "error";
            input: {
                [key: string]: unknown;
            };
            error: string;
            metadata?: {
                [key: string]: unknown;
            };
            time: {
                start: number;
                end: number;
            };
        };
        ToolStatePending: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            status: "pending";
        };
        ToolStateRunning: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            status: "running";
            input?: unknown;
            title?: string;
            metadata?: {
                [key: string]: unknown;
            };
            time: {
                start: number;
            };
        };
        ToolStateCompleted: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            status: "completed";
            input: {
                [key: string]: unknown;
            };
            output: string;
            title: string;
            metadata: {
                [key: string]: unknown;
            };
            time: {
                start: number;
                end: number;
            };
        };
        ToolStateError: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            status: "error";
            input: {
                [key: string]: unknown;
            };
            error: string;
            metadata?: {
                [key: string]: unknown;
            };
            time: {
                start: number;
                end: number;
            };
        };
        StepStartPart: {
            id: string;
            sessionID: string;
            messageID: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "step-start";
        };
        StepFinishPart: {
            id: string;
            sessionID: string;
            messageID: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "step-finish";
            cost: number;
            tokens: {
                input: number;
                output: number;
                reasoning: number;
                cache: {
                    read: number;
                    write: number;
                };
            };
        };
        SnapshotPart: {
            id: string;
            sessionID: string;
            messageID: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "snapshot";
            snapshot: string;
        };
        PatchPart: {
            id: string;
            sessionID: string;
            messageID: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "patch";
            hash: string;
            files: string[];
        };
        AgentPart: {
            id: string;
            sessionID: string;
            messageID: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "agent";
            name: string;
            source?: {
                value: string;
                start: number;
                end: number;
            };
        };
        "Event.message.part.removed": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "message.part.removed";
            properties: {
                sessionID: string;
                messageID: string;
                partID: string;
            };
        };
        "Event.storage.write": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "storage.write";
            properties: {
                key: string;
                content?: unknown;
            };
        };
        "Event.permission.updated": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "permission.updated";
            properties: {
                id: string;
                type: string;
                pattern?: string;
                sessionID: string;
                messageID: string;
                callID?: string;
                title: string;
                metadata: {
                    [key: string]: unknown;
                };
                time: {
                    created: number;
                };
            };
        };
        Permission: {
            id: string;
            type: string;
            pattern?: string;
            sessionID: string;
            messageID: string;
            callID?: string;
            title: string;
            metadata: {
                [key: string]: unknown;
            };
            time: {
                created: number;
            };
        };
        "Event.permission.replied": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "permission.replied";
            properties: {
                sessionID: string;
                permissionID: string;
                response: string;
            };
        };
        "Event.file.edited": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "file.edited";
            properties: {
                file: string;
            };
        };
        "Event.session.updated": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "session.updated";
            properties: {
                info: {
                    id: string;
                    parentID?: string;
                    share?: {
                        url: string;
                    };
                    title: string;
                    version: string;
                    time: {
                        created: number;
                        updated: number;
                    };
                    revert?: {
                        messageID: string;
                        partID?: string;
                        snapshot?: string;
                        diff?: string;
                    };
                };
            };
        };
        Session: {
            id: string;
            parentID?: string;
            share?: {
                url: string;
            };
            title: string;
            version: string;
            time: {
                created: number;
                updated: number;
            };
            revert?: {
                messageID: string;
                partID?: string;
                snapshot?: string;
                diff?: string;
            };
        };
        "Event.session.deleted": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "session.deleted";
            properties: {
                info: {
                    id: string;
                    parentID?: string;
                    share?: {
                        url: string;
                    };
                    title: string;
                    version: string;
                    time: {
                        created: number;
                        updated: number;
                    };
                    revert?: {
                        messageID: string;
                        partID?: string;
                        snapshot?: string;
                        diff?: string;
                    };
                };
            };
        };
        "Event.session.idle": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "session.idle";
            properties: {
                sessionID: string;
            };
        };
        "Event.session.error": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "session.error";
            properties: {
                sessionID?: string;
                error?: {
                    /** @constant */
                    name: "ProviderAuthError";
                    data: {
                        providerID: string;
                        message: string;
                    };
                } | {
                    /** @constant */
                    name: "UnknownError";
                    data: {
                        message: string;
                    };
                } | {
                    /** @constant */
                    name: "MessageOutputLengthError";
                    data: Record<string, never>;
                } | {
                    /** @constant */
                    name: "MessageAbortedError";
                    data: Record<string, never>;
                };
            };
        };
        "Event.server.connected": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "server.connected";
            properties: Record<string, never>;
        };
        "Event.file.watcher.updated": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "file.watcher.updated";
            properties: {
                file: string;
                event: "rename" | "change";
            };
        };
        "Event.ide.installed": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ide.installed";
            properties: {
                ide: string;
            };
        };
        App: {
            hostname: string;
            git: boolean;
            path: {
                home: string;
                config: string;
                data: string;
                root: string;
                cwd: string;
                state: string;
            };
            time: {
                initialized?: number;
            };
        };
        Config: {
            /** @description JSON schema reference for configuration validation */
            $schema?: string;
            /** @description Theme name to use for the interface */
            theme?: string;
            /** @description Custom keybind configurations */
            keybinds?: {
                /**
                 * @description Leader key for keybind combinations
                 * @default ctrl+x
                 */
                leader: string;
                /**
                 * @description Show help dialog
                 * @default <leader>h
                 */
                app_help: string;
                /**
                 * @description Exit the application
                 * @default ctrl+c,<leader>q
                 */
                app_exit: string;
                /**
                 * @description Open external editor
                 * @default <leader>e
                 */
                editor_open: string;
                /**
                 * @description List available themes
                 * @default <leader>t
                 */
                theme_list: string;
                /**
                 * @description Create/update AGENTS.md
                 * @default <leader>i
                 */
                project_init: string;
                /**
                 * @description Toggle tool details
                 * @default <leader>d
                 */
                tool_details: string;
                /**
                 * @description Toggle thinking blocks
                 * @default <leader>b
                 */
                thinking_blocks: string;
                /**
                 * @description Export session to editor
                 * @default <leader>x
                 */
                session_export: string;
                /**
                 * @description Create a new session
                 * @default <leader>n
                 */
                session_new: string;
                /**
                 * @description List all sessions
                 * @default <leader>l
                 */
                session_list: string;
                /**
                 * @description Show session timeline
                 * @default <leader>g
                 */
                session_timeline: string;
                /**
                 * @description Share current session
                 * @default <leader>s
                 */
                session_share: string;
                /**
                 * @description Unshare current session
                 * @default none
                 */
                session_unshare: string;
                /**
                 * @description Interrupt current session
                 * @default esc
                 */
                session_interrupt: string;
                /**
                 * @description Compact the session
                 * @default <leader>c
                 */
                session_compact: string;
                /**
                 * @description Cycle to next child session
                 * @default ctrl+right
                 */
                session_child_cycle: string;
                /**
                 * @description Cycle to previous child session
                 * @default ctrl+left
                 */
                session_child_cycle_reverse: string;
                /**
                 * @description Scroll messages up by one page
                 * @default pgup
                 */
                messages_page_up: string;
                /**
                 * @description Scroll messages down by one page
                 * @default pgdown
                 */
                messages_page_down: string;
                /**
                 * @description Scroll messages up by half page
                 * @default ctrl+alt+u
                 */
                messages_half_page_up: string;
                /**
                 * @description Scroll messages down by half page
                 * @default ctrl+alt+d
                 */
                messages_half_page_down: string;
                /**
                 * @description Navigate to first message
                 * @default ctrl+g
                 */
                messages_first: string;
                /**
                 * @description Navigate to last message
                 * @default ctrl+alt+g
                 */
                messages_last: string;
                /**
                 * @description Copy message
                 * @default <leader>y
                 */
                messages_copy: string;
                /**
                 * @description Undo message
                 * @default <leader>u
                 */
                messages_undo: string;
                /**
                 * @description Redo message
                 * @default <leader>r
                 */
                messages_redo: string;
                /**
                 * @description List available models
                 * @default <leader>m
                 */
                model_list: string;
                /**
                 * @description Next recent model
                 * @default f2
                 */
                model_cycle_recent: string;
                /**
                 * @description Previous recent model
                 * @default shift+f2
                 */
                model_cycle_recent_reverse: string;
                /**
                 * @description List agents
                 * @default <leader>a
                 */
                agent_list: string;
                /**
                 * @description Next agent
                 * @default tab
                 */
                agent_cycle: string;
                /**
                 * @description Previous agent
                 * @default shift+tab
                 */
                agent_cycle_reverse: string;
                /**
                 * @description Clear input field
                 * @default ctrl+c
                 */
                input_clear: string;
                /**
                 * @description Paste from clipboard
                 * @default ctrl+v
                 */
                input_paste: string;
                /**
                 * @description Submit input
                 * @default enter
                 */
                input_submit: string;
                /**
                 * @description Insert newline in input
                 * @default shift+enter,ctrl+j
                 */
                input_newline: string;
                /**
                 * @description @deprecated use agent_cycle. Next mode
                 * @default none
                 */
                switch_mode: string;
                /**
                 * @description @deprecated use agent_cycle_reverse. Previous mode
                 * @default none
                 */
                switch_mode_reverse: string;
                /**
                 * @description @deprecated use agent_cycle. Next agent
                 * @default tab
                 */
                switch_agent: string;
                /**
                 * @description @deprecated use agent_cycle_reverse. Previous agent
                 * @default shift+tab
                 */
                switch_agent_reverse: string;
                /**
                 * @description @deprecated Currently not available. List files
                 * @default none
                 */
                file_list: string;
                /**
                 * @description @deprecated Close file
                 * @default none
                 */
                file_close: string;
                /**
                 * @description @deprecated Search file
                 * @default none
                 */
                file_search: string;
                /**
                 * @description @deprecated Split/unified diff
                 * @default none
                 */
                file_diff_toggle: string;
                /**
                 * @description @deprecated Navigate to previous message
                 * @default none
                 */
                messages_previous: string;
                /**
                 * @description @deprecated Navigate to next message
                 * @default none
                 */
                messages_next: string;
                /**
                 * @description @deprecated Toggle layout
                 * @default none
                 */
                messages_layout_toggle: string;
                /**
                 * @description @deprecated use messages_undo. Revert message
                 * @default none
                 */
                messages_revert: string;
            };
            /** @description TUI specific settings */
            tui?: {
                /**
                 * @description TUI scroll speed
                 * @default 2
                 */
                scroll_speed: number;
            };
            /** @description Command configuration, see https://opencode.ai/docs/commands */
            command?: {
                [key: string]: {
                    template: string;
                    description?: string;
                    agent?: string;
                    model?: string;
                };
            };
            plugin?: string[];
            snapshot?: boolean;
            /**
             * @description Control sharing behavior:'manual' allows manual sharing via commands, 'auto' enables automatic sharing, 'disabled' disables all sharing
             * @enum {string}
             */
            share?: "manual" | "auto" | "disabled";
            /** @description @deprecated Use 'share' field instead. Share newly created sessions automatically */
            autoshare?: boolean;
            /** @description Automatically update to the latest version */
            autoupdate?: boolean;
            /** @description Disable providers that are loaded automatically */
            disabled_providers?: string[];
            /** @description Model to use in the format of provider/model, eg anthropic/claude-2 */
            model?: string;
            /** @description Small model to use for tasks like title generation in the format of provider/model */
            small_model?: string;
            /** @description Custom username to display in conversations instead of system username */
            username?: string;
            /** @description @deprecated Use `agent` field instead. */
            mode?: {
                build?: {
                    model?: string;
                    temperature?: number;
                    top_p?: number;
                    prompt?: string;
                    tools?: {
                        [key: string]: boolean;
                    };
                    disable?: boolean;
                    /** @description Description of when to use the agent */
                    description?: string;
                    mode?: "subagent" | "primary" | "all";
                    permission?: {
                        edit?: "ask" | "allow" | "deny";
                        bash?: ("ask" | "allow" | "deny") | {
                            [key: string]: "ask" | "allow" | "deny";
                        };
                        webfetch?: "ask" | "allow" | "deny";
                    };
                } & {
                    [key: string]: unknown;
                };
                plan?: {
                    model?: string;
                    temperature?: number;
                    top_p?: number;
                    prompt?: string;
                    tools?: {
                        [key: string]: boolean;
                    };
                    disable?: boolean;
                    /** @description Description of when to use the agent */
                    description?: string;
                    mode?: "subagent" | "primary" | "all";
                    permission?: {
                        edit?: "ask" | "allow" | "deny";
                        bash?: ("ask" | "allow" | "deny") | {
                            [key: string]: "ask" | "allow" | "deny";
                        };
                        webfetch?: "ask" | "allow" | "deny";
                    };
                } & {
                    [key: string]: unknown;
                };
            } & {
                [key: string]: {
                    model?: string;
                    temperature?: number;
                    top_p?: number;
                    prompt?: string;
                    tools?: {
                        [key: string]: boolean;
                    };
                    disable?: boolean;
                    /** @description Description of when to use the agent */
                    description?: string;
                    mode?: "subagent" | "primary" | "all";
                    permission?: {
                        edit?: "ask" | "allow" | "deny";
                        bash?: ("ask" | "allow" | "deny") | {
                            [key: string]: "ask" | "allow" | "deny";
                        };
                        webfetch?: "ask" | "allow" | "deny";
                    };
                } & {
                    [key: string]: unknown;
                };
            };
            /** @description Agent configuration, see https://opencode.ai/docs/agent */
            agent?: {
                plan?: {
                    model?: string;
                    temperature?: number;
                    top_p?: number;
                    prompt?: string;
                    tools?: {
                        [key: string]: boolean;
                    };
                    disable?: boolean;
                    /** @description Description of when to use the agent */
                    description?: string;
                    mode?: "subagent" | "primary" | "all";
                    permission?: {
                        edit?: "ask" | "allow" | "deny";
                        bash?: ("ask" | "allow" | "deny") | {
                            [key: string]: "ask" | "allow" | "deny";
                        };
                        webfetch?: "ask" | "allow" | "deny";
                    };
                } & {
                    [key: string]: unknown;
                };
                build?: {
                    model?: string;
                    temperature?: number;
                    top_p?: number;
                    prompt?: string;
                    tools?: {
                        [key: string]: boolean;
                    };
                    disable?: boolean;
                    /** @description Description of when to use the agent */
                    description?: string;
                    mode?: "subagent" | "primary" | "all";
                    permission?: {
                        edit?: "ask" | "allow" | "deny";
                        bash?: ("ask" | "allow" | "deny") | {
                            [key: string]: "ask" | "allow" | "deny";
                        };
                        webfetch?: "ask" | "allow" | "deny";
                    };
                } & {
                    [key: string]: unknown;
                };
                general?: {
                    model?: string;
                    temperature?: number;
                    top_p?: number;
                    prompt?: string;
                    tools?: {
                        [key: string]: boolean;
                    };
                    disable?: boolean;
                    /** @description Description of when to use the agent */
                    description?: string;
                    mode?: "subagent" | "primary" | "all";
                    permission?: {
                        edit?: "ask" | "allow" | "deny";
                        bash?: ("ask" | "allow" | "deny") | {
                            [key: string]: "ask" | "allow" | "deny";
                        };
                        webfetch?: "ask" | "allow" | "deny";
                    };
                } & {
                    [key: string]: unknown;
                };
            } & {
                [key: string]: {
                    model?: string;
                    temperature?: number;
                    top_p?: number;
                    prompt?: string;
                    tools?: {
                        [key: string]: boolean;
                    };
                    disable?: boolean;
                    /** @description Description of when to use the agent */
                    description?: string;
                    mode?: "subagent" | "primary" | "all";
                    permission?: {
                        edit?: "ask" | "allow" | "deny";
                        bash?: ("ask" | "allow" | "deny") | {
                            [key: string]: "ask" | "allow" | "deny";
                        };
                        webfetch?: "ask" | "allow" | "deny";
                    };
                } & {
                    [key: string]: unknown;
                };
            };
            /** @description Custom provider configurations and model overrides */
            provider?: {
                [key: string]: {
                    api?: string;
                    name?: string;
                    env?: string[];
                    id?: string;
                    npm?: string;
                    models?: {
                        [key: string]: {
                            id?: string;
                            name?: string;
                            release_date?: string;
                            attachment?: boolean;
                            reasoning?: boolean;
                            temperature?: boolean;
                            tool_call?: boolean;
                            cost?: {
                                input: number;
                                output: number;
                                cache_read?: number;
                                cache_write?: number;
                            };
                            limit?: {
                                context: number;
                                output: number;
                            };
                            options?: {
                                [key: string]: unknown;
                            };
                        };
                    };
                    options?: {
                        apiKey?: string;
                        baseURL?: string;
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description MCP (Model Context Protocol) server configurations */
            mcp?: {
                [key: string]: {
                    /**
                     * @description Type of MCP server connection
                     * @constant
                     */
                    type: "local";
                    /** @description Command and arguments to run the MCP server */
                    command: string[];
                    /** @description Environment variables to set when running the MCP server */
                    environment?: {
                        [key: string]: string;
                    };
                    /** @description Enable or disable the MCP server on startup */
                    enabled?: boolean;
                } | {
                    /**
                     * @description Type of MCP server connection
                     * @constant
                     */
                    type: "remote";
                    /** @description URL of the remote MCP server */
                    url: string;
                    /** @description Enable or disable the MCP server on startup */
                    enabled?: boolean;
                    /** @description Headers to send with the request */
                    headers?: {
                        [key: string]: string;
                    };
                };
            };
            formatter?: {
                [key: string]: {
                    disabled?: boolean;
                    command?: string[];
                    environment?: {
                        [key: string]: string;
                    };
                    extensions?: string[];
                };
            };
            lsp?: {
                [key: string]: {
                    /** @constant */
                    disabled: true;
                } | {
                    command: string[];
                    extensions?: string[];
                    disabled?: boolean;
                    env?: {
                        [key: string]: string;
                    };
                    initialization?: {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Additional instruction files or patterns to include */
            instructions?: string[];
            /**
             * @description @deprecated Always uses stretch layout.
             * @enum {string}
             */
            layout?: "auto" | "stretch";
            permission?: {
                edit?: "ask" | "allow" | "deny";
                bash?: ("ask" | "allow" | "deny") | {
                    [key: string]: "ask" | "allow" | "deny";
                };
                webfetch?: "ask" | "allow" | "deny";
            };
            tools?: {
                [key: string]: boolean;
            };
            experimental?: {
                hook?: {
                    file_edited?: {
                        [key: string]: {
                            command: string[];
                            environment?: {
                                [key: string]: string;
                            };
                        }[];
                    };
                    session_completed?: {
                        command: string[];
                        environment?: {
                            [key: string]: string;
                        };
                    }[];
                };
                promptOptimization?: {
                    /** @default false */
                    enabled: boolean;
                    model?: {
                        providerID: string;
                        modelID: string;
                    };
                };
            };
        };
        KeybindsConfig: {
            /**
             * @description Leader key for keybind combinations
             * @default ctrl+x
             */
            leader: string;
            /**
             * @description Show help dialog
             * @default <leader>h
             */
            app_help: string;
            /**
             * @description Exit the application
             * @default ctrl+c,<leader>q
             */
            app_exit: string;
            /**
             * @description Open external editor
             * @default <leader>e
             */
            editor_open: string;
            /**
             * @description List available themes
             * @default <leader>t
             */
            theme_list: string;
            /**
             * @description Create/update AGENTS.md
             * @default <leader>i
             */
            project_init: string;
            /**
             * @description Toggle tool details
             * @default <leader>d
             */
            tool_details: string;
            /**
             * @description Toggle thinking blocks
             * @default <leader>b
             */
            thinking_blocks: string;
            /**
             * @description Export session to editor
             * @default <leader>x
             */
            session_export: string;
            /**
             * @description Create a new session
             * @default <leader>n
             */
            session_new: string;
            /**
             * @description List all sessions
             * @default <leader>l
             */
            session_list: string;
            /**
             * @description Show session timeline
             * @default <leader>g
             */
            session_timeline: string;
            /**
             * @description Share current session
             * @default <leader>s
             */
            session_share: string;
            /**
             * @description Unshare current session
             * @default none
             */
            session_unshare: string;
            /**
             * @description Interrupt current session
             * @default esc
             */
            session_interrupt: string;
            /**
             * @description Compact the session
             * @default <leader>c
             */
            session_compact: string;
            /**
             * @description Cycle to next child session
             * @default ctrl+right
             */
            session_child_cycle: string;
            /**
             * @description Cycle to previous child session
             * @default ctrl+left
             */
            session_child_cycle_reverse: string;
            /**
             * @description Scroll messages up by one page
             * @default pgup
             */
            messages_page_up: string;
            /**
             * @description Scroll messages down by one page
             * @default pgdown
             */
            messages_page_down: string;
            /**
             * @description Scroll messages up by half page
             * @default ctrl+alt+u
             */
            messages_half_page_up: string;
            /**
             * @description Scroll messages down by half page
             * @default ctrl+alt+d
             */
            messages_half_page_down: string;
            /**
             * @description Navigate to first message
             * @default ctrl+g
             */
            messages_first: string;
            /**
             * @description Navigate to last message
             * @default ctrl+alt+g
             */
            messages_last: string;
            /**
             * @description Copy message
             * @default <leader>y
             */
            messages_copy: string;
            /**
             * @description Undo message
             * @default <leader>u
             */
            messages_undo: string;
            /**
             * @description Redo message
             * @default <leader>r
             */
            messages_redo: string;
            /**
             * @description List available models
             * @default <leader>m
             */
            model_list: string;
            /**
             * @description Next recent model
             * @default f2
             */
            model_cycle_recent: string;
            /**
             * @description Previous recent model
             * @default shift+f2
             */
            model_cycle_recent_reverse: string;
            /**
             * @description List agents
             * @default <leader>a
             */
            agent_list: string;
            /**
             * @description Next agent
             * @default tab
             */
            agent_cycle: string;
            /**
             * @description Previous agent
             * @default shift+tab
             */
            agent_cycle_reverse: string;
            /**
             * @description Clear input field
             * @default ctrl+c
             */
            input_clear: string;
            /**
             * @description Paste from clipboard
             * @default ctrl+v
             */
            input_paste: string;
            /**
             * @description Submit input
             * @default enter
             */
            input_submit: string;
            /**
             * @description Insert newline in input
             * @default shift+enter,ctrl+j
             */
            input_newline: string;
            /**
             * @description @deprecated use agent_cycle. Next mode
             * @default none
             */
            switch_mode: string;
            /**
             * @description @deprecated use agent_cycle_reverse. Previous mode
             * @default none
             */
            switch_mode_reverse: string;
            /**
             * @description @deprecated use agent_cycle. Next agent
             * @default tab
             */
            switch_agent: string;
            /**
             * @description @deprecated use agent_cycle_reverse. Previous agent
             * @default shift+tab
             */
            switch_agent_reverse: string;
            /**
             * @description @deprecated Currently not available. List files
             * @default none
             */
            file_list: string;
            /**
             * @description @deprecated Close file
             * @default none
             */
            file_close: string;
            /**
             * @description @deprecated Search file
             * @default none
             */
            file_search: string;
            /**
             * @description @deprecated Split/unified diff
             * @default none
             */
            file_diff_toggle: string;
            /**
             * @description @deprecated Navigate to previous message
             * @default none
             */
            messages_previous: string;
            /**
             * @description @deprecated Navigate to next message
             * @default none
             */
            messages_next: string;
            /**
             * @description @deprecated Toggle layout
             * @default none
             */
            messages_layout_toggle: string;
            /**
             * @description @deprecated use messages_undo. Revert message
             * @default none
             */
            messages_revert: string;
        };
        AgentConfig: {
            model?: string;
            temperature?: number;
            top_p?: number;
            prompt?: string;
            tools?: {
                [key: string]: boolean;
            };
            disable?: boolean;
            /** @description Description of when to use the agent */
            description?: string;
            mode?: "subagent" | "primary" | "all";
            permission?: {
                edit?: "ask" | "allow" | "deny";
                bash?: ("ask" | "allow" | "deny") | {
                    [key: string]: "ask" | "allow" | "deny";
                };
                webfetch?: "ask" | "allow" | "deny";
            };
        } & {
            [key: string]: unknown;
        };
        Provider: {
            api?: string;
            name: string;
            env: string[];
            id: string;
            npm?: string;
            models: {
                [key: string]: {
                    id: string;
                    name: string;
                    release_date: string;
                    attachment: boolean;
                    reasoning: boolean;
                    temperature: boolean;
                    tool_call: boolean;
                    cost: {
                        input: number;
                        output: number;
                        cache_read?: number;
                        cache_write?: number;
                    };
                    limit: {
                        context: number;
                        output: number;
                    };
                    options: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        Model: {
            id: string;
            name: string;
            release_date: string;
            attachment: boolean;
            reasoning: boolean;
            temperature: boolean;
            tool_call: boolean;
            cost: {
                input: number;
                output: number;
                cache_read?: number;
                cache_write?: number;
            };
            limit: {
                context: number;
                output: number;
            };
            options: {
                [key: string]: unknown;
            };
        };
        McpLocalConfig: {
            /**
             * @description Type of MCP server connection (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "local";
            /** @description Command and arguments to run the MCP server */
            command: string[];
            /** @description Environment variables to set when running the MCP server */
            environment?: {
                [key: string]: string;
            };
            /** @description Enable or disable the MCP server on startup */
            enabled?: boolean;
        };
        McpRemoteConfig: {
            /**
             * @description Type of MCP server connection (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "remote";
            /** @description URL of the remote MCP server */
            url: string;
            /** @description Enable or disable the MCP server on startup */
            enabled?: boolean;
            /** @description Headers to send with the request */
            headers?: {
                [key: string]: string;
            };
        };
        /** @enum {string} */
        LayoutConfig: "auto" | "stretch";
        Error: {
            data: {
                [key: string]: unknown;
            };
        };
        TextPartInput: {
            id?: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "text";
            text: string;
            synthetic?: boolean;
            time?: {
                start: number;
                end?: number;
            };
        };
        FilePartInput: {
            id?: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "file";
            mime: string;
            filename?: string;
            url: string;
            source?: {
                text: {
                    value: string;
                    start: number;
                    end: number;
                };
                /** @constant */
                type: "file";
                path: string;
            } | {
                text: {
                    value: string;
                    start: number;
                    end: number;
                };
                /** @constant */
                type: "symbol";
                path: string;
                range: {
                    start: {
                        line: number;
                        character: number;
                    };
                    end: {
                        line: number;
                        character: number;
                    };
                };
                name: string;
                kind: number;
            };
        };
        AgentPartInput: {
            id?: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "agent";
            name: string;
            source?: {
                value: string;
                start: number;
                end: number;
            };
        };
        Command: {
            name: string;
            description?: string;
            agent?: string;
            model?: string;
            template: string;
        };
        Symbol: {
            name: string;
            kind: number;
            location: {
                uri: string;
                range: {
                    start: {
                        line: number;
                        character: number;
                    };
                    end: {
                        line: number;
                        character: number;
                    };
                };
            };
        };
        FileNode: {
            name: string;
            path: string;
            /** @enum {string} */
            type: "file" | "directory";
            ignored: boolean;
        };
        File: {
            path: string;
            added: number;
            removed: number;
            /** @enum {string} */
            status: "added" | "deleted" | "modified";
        };
        Agent: {
            name: string;
            description?: string;
            mode: "subagent" | "primary" | "all";
            builtIn: boolean;
            topP?: number;
            temperature?: number;
            permission: {
                edit: "ask" | "allow" | "deny";
                bash: {
                    [key: string]: "ask" | "allow" | "deny";
                };
                webfetch?: "ask" | "allow" | "deny";
            };
            model?: {
                modelID: string;
                providerID: string;
            };
            prompt?: string;
            tools: {
                [key: string]: boolean;
            };
            options: {
                [key: string]: unknown;
            };
        };
        Auth: {
            /** @constant */
            type: "oauth";
            refresh: string;
            access: string;
            expires: number;
        } | {
            /** @constant */
            type: "api";
            key: string;
        } | {
            /** @constant */
            type: "wellknown";
            key: string;
            token: string;
        };
        OAuth: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "oauth";
            refresh: string;
            access: string;
            expires: number;
        };
        ApiAuth: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "api";
            key: string;
        };
        WellKnownAuth: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "wellknown";
            key: string;
            token: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "event.subscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Event stream */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/event-stream": {
                        /** @constant */
                        type: "installation.updated";
                        properties: {
                            version: string;
                        };
                    } | {
                        /** @constant */
                        type: "lsp.client.diagnostics";
                        properties: {
                            serverID: string;
                            path: string;
                        };
                    } | {
                        /** @constant */
                        type: "message.updated";
                        properties: {
                            info: {
                                id: string;
                                sessionID: string;
                                /** @constant */
                                role: "user";
                                time: {
                                    created: number;
                                };
                            } | {
                                id: string;
                                sessionID: string;
                                /** @constant */
                                role: "assistant";
                                time: {
                                    created: number;
                                    completed?: number;
                                };
                                error?: {
                                    /** @constant */
                                    name: "ProviderAuthError";
                                    data: {
                                        providerID: string;
                                        message: string;
                                    };
                                } | {
                                    /** @constant */
                                    name: "UnknownError";
                                    data: {
                                        message: string;
                                    };
                                } | {
                                    /** @constant */
                                    name: "MessageOutputLengthError";
                                    data: Record<string, never>;
                                } | {
                                    /** @constant */
                                    name: "MessageAbortedError";
                                    data: Record<string, never>;
                                };
                                system: string[];
                                modelID: string;
                                providerID: string;
                                mode: string;
                                path: {
                                    cwd: string;
                                    root: string;
                                };
                                summary?: boolean;
                                cost: number;
                                tokens: {
                                    input: number;
                                    output: number;
                                    reasoning: number;
                                    cache: {
                                        read: number;
                                        write: number;
                                    };
                                };
                            };
                        };
                    } | {
                        /** @constant */
                        type: "message.removed";
                        properties: {
                            sessionID: string;
                            messageID: string;
                        };
                    } | {
                        /** @constant */
                        type: "message.part.updated";
                        properties: {
                            part: {
                                id: string;
                                sessionID: string;
                                messageID: string;
                                /** @constant */
                                type: "text";
                                text: string;
                                synthetic?: boolean;
                                time?: {
                                    start: number;
                                    end?: number;
                                };
                            } | {
                                id: string;
                                sessionID: string;
                                messageID: string;
                                /** @constant */
                                type: "reasoning";
                                text: string;
                                metadata?: {
                                    [key: string]: unknown;
                                };
                                time: {
                                    start: number;
                                    end?: number;
                                };
                            } | {
                                id: string;
                                sessionID: string;
                                messageID: string;
                                /** @constant */
                                type: "file";
                                mime: string;
                                filename?: string;
                                url: string;
                                source?: {
                                    text: {
                                        value: string;
                                        start: number;
                                        end: number;
                                    };
                                    /** @constant */
                                    type: "file";
                                    path: string;
                                } | {
                                    text: {
                                        value: string;
                                        start: number;
                                        end: number;
                                    };
                                    /** @constant */
                                    type: "symbol";
                                    path: string;
                                    range: {
                                        start: {
                                            line: number;
                                            character: number;
                                        };
                                        end: {
                                            line: number;
                                            character: number;
                                        };
                                    };
                                    name: string;
                                    kind: number;
                                };
                            } | {
                                id: string;
                                sessionID: string;
                                messageID: string;
                                /** @constant */
                                type: "tool";
                                callID: string;
                                tool: string;
                                state: {
                                    /** @constant */
                                    status: "pending";
                                } | {
                                    /** @constant */
                                    status: "running";
                                    input?: unknown;
                                    title?: string;
                                    metadata?: {
                                        [key: string]: unknown;
                                    };
                                    time: {
                                        start: number;
                                    };
                                } | {
                                    /** @constant */
                                    status: "completed";
                                    input: {
                                        [key: string]: unknown;
                                    };
                                    output: string;
                                    title: string;
                                    metadata: {
                                        [key: string]: unknown;
                                    };
                                    time: {
                                        start: number;
                                        end: number;
                                    };
                                } | {
                                    /** @constant */
                                    status: "error";
                                    input: {
                                        [key: string]: unknown;
                                    };
                                    error: string;
                                    metadata?: {
                                        [key: string]: unknown;
                                    };
                                    time: {
                                        start: number;
                                        end: number;
                                    };
                                };
                            } | {
                                id: string;
                                sessionID: string;
                                messageID: string;
                                /** @constant */
                                type: "step-start";
                            } | {
                                id: string;
                                sessionID: string;
                                messageID: string;
                                /** @constant */
                                type: "step-finish";
                                cost: number;
                                tokens: {
                                    input: number;
                                    output: number;
                                    reasoning: number;
                                    cache: {
                                        read: number;
                                        write: number;
                                    };
                                };
                            } | {
                                id: string;
                                sessionID: string;
                                messageID: string;
                                /** @constant */
                                type: "snapshot";
                                snapshot: string;
                            } | {
                                id: string;
                                sessionID: string;
                                messageID: string;
                                /** @constant */
                                type: "patch";
                                hash: string;
                                files: string[];
                            } | {
                                id: string;
                                sessionID: string;
                                messageID: string;
                                /** @constant */
                                type: "agent";
                                name: string;
                                source?: {
                                    value: string;
                                    start: number;
                                    end: number;
                                };
                            };
                        };
                    } | {
                        /** @constant */
                        type: "message.part.removed";
                        properties: {
                            sessionID: string;
                            messageID: string;
                            partID: string;
                        };
                    } | {
                        /** @constant */
                        type: "storage.write";
                        properties: {
                            key: string;
                            content?: unknown;
                        };
                    } | {
                        /** @constant */
                        type: "permission.updated";
                        properties: {
                            id: string;
                            type: string;
                            pattern?: string;
                            sessionID: string;
                            messageID: string;
                            callID?: string;
                            title: string;
                            metadata: {
                                [key: string]: unknown;
                            };
                            time: {
                                created: number;
                            };
                        };
                    } | {
                        /** @constant */
                        type: "permission.replied";
                        properties: {
                            sessionID: string;
                            permissionID: string;
                            response: string;
                        };
                    } | {
                        /** @constant */
                        type: "file.edited";
                        properties: {
                            file: string;
                        };
                    } | {
                        /** @constant */
                        type: "session.updated";
                        properties: {
                            info: {
                                id: string;
                                parentID?: string;
                                share?: {
                                    url: string;
                                };
                                title: string;
                                version: string;
                                time: {
                                    created: number;
                                    updated: number;
                                };
                                revert?: {
                                    messageID: string;
                                    partID?: string;
                                    snapshot?: string;
                                    diff?: string;
                                };
                            };
                        };
                    } | {
                        /** @constant */
                        type: "session.deleted";
                        properties: {
                            info: {
                                id: string;
                                parentID?: string;
                                share?: {
                                    url: string;
                                };
                                title: string;
                                version: string;
                                time: {
                                    created: number;
                                    updated: number;
                                };
                                revert?: {
                                    messageID: string;
                                    partID?: string;
                                    snapshot?: string;
                                    diff?: string;
                                };
                            };
                        };
                    } | {
                        /** @constant */
                        type: "session.idle";
                        properties: {
                            sessionID: string;
                        };
                    } | {
                        /** @constant */
                        type: "session.error";
                        properties: {
                            sessionID?: string;
                            error?: {
                                /** @constant */
                                name: "ProviderAuthError";
                                data: {
                                    providerID: string;
                                    message: string;
                                };
                            } | {
                                /** @constant */
                                name: "UnknownError";
                                data: {
                                    message: string;
                                };
                            } | {
                                /** @constant */
                                name: "MessageOutputLengthError";
                                data: Record<string, never>;
                            } | {
                                /** @constant */
                                name: "MessageAbortedError";
                                data: Record<string, never>;
                            };
                        };
                    } | {
                        /** @constant */
                        type: "server.connected";
                        properties: Record<string, never>;
                    } | {
                        /** @constant */
                        type: "file.watcher.updated";
                        properties: {
                            file: string;
                            event: "rename" | "change";
                        };
                    } | {
                        /** @constant */
                        type: "ide.installed";
                        properties: {
                            ide: string;
                        };
                    };
                };
            };
        };
    };
    "app.get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 200 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        hostname: string;
                        git: boolean;
                        path: {
                            home: string;
                            config: string;
                            data: string;
                            root: string;
                            cwd: string;
                            state: string;
                        };
                        time: {
                            initialized?: number;
                        };
                    };
                };
            };
        };
    };
    "app.init": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Initialize the app */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    "config.get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get config info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description JSON schema reference for configuration validation */
                        $schema?: string;
                        /** @description Theme name to use for the interface */
                        theme?: string;
                        /** @description Custom keybind configurations */
                        keybinds?: {
                            /**
                             * @description Leader key for keybind combinations
                             * @default ctrl+x
                             */
                            leader: string;
                            /**
                             * @description Show help dialog
                             * @default <leader>h
                             */
                            app_help: string;
                            /**
                             * @description Exit the application
                             * @default ctrl+c,<leader>q
                             */
                            app_exit: string;
                            /**
                             * @description Open external editor
                             * @default <leader>e
                             */
                            editor_open: string;
                            /**
                             * @description List available themes
                             * @default <leader>t
                             */
                            theme_list: string;
                            /**
                             * @description Create/update AGENTS.md
                             * @default <leader>i
                             */
                            project_init: string;
                            /**
                             * @description Toggle tool details
                             * @default <leader>d
                             */
                            tool_details: string;
                            /**
                             * @description Toggle thinking blocks
                             * @default <leader>b
                             */
                            thinking_blocks: string;
                            /**
                             * @description Export session to editor
                             * @default <leader>x
                             */
                            session_export: string;
                            /**
                             * @description Create a new session
                             * @default <leader>n
                             */
                            session_new: string;
                            /**
                             * @description List all sessions
                             * @default <leader>l
                             */
                            session_list: string;
                            /**
                             * @description Show session timeline
                             * @default <leader>g
                             */
                            session_timeline: string;
                            /**
                             * @description Share current session
                             * @default <leader>s
                             */
                            session_share: string;
                            /**
                             * @description Unshare current session
                             * @default none
                             */
                            session_unshare: string;
                            /**
                             * @description Interrupt current session
                             * @default esc
                             */
                            session_interrupt: string;
                            /**
                             * @description Compact the session
                             * @default <leader>c
                             */
                            session_compact: string;
                            /**
                             * @description Cycle to next child session
                             * @default ctrl+right
                             */
                            session_child_cycle: string;
                            /**
                             * @description Cycle to previous child session
                             * @default ctrl+left
                             */
                            session_child_cycle_reverse: string;
                            /**
                             * @description Scroll messages up by one page
                             * @default pgup
                             */
                            messages_page_up: string;
                            /**
                             * @description Scroll messages down by one page
                             * @default pgdown
                             */
                            messages_page_down: string;
                            /**
                             * @description Scroll messages up by half page
                             * @default ctrl+alt+u
                             */
                            messages_half_page_up: string;
                            /**
                             * @description Scroll messages down by half page
                             * @default ctrl+alt+d
                             */
                            messages_half_page_down: string;
                            /**
                             * @description Navigate to first message
                             * @default ctrl+g
                             */
                            messages_first: string;
                            /**
                             * @description Navigate to last message
                             * @default ctrl+alt+g
                             */
                            messages_last: string;
                            /**
                             * @description Copy message
                             * @default <leader>y
                             */
                            messages_copy: string;
                            /**
                             * @description Undo message
                             * @default <leader>u
                             */
                            messages_undo: string;
                            /**
                             * @description Redo message
                             * @default <leader>r
                             */
                            messages_redo: string;
                            /**
                             * @description List available models
                             * @default <leader>m
                             */
                            model_list: string;
                            /**
                             * @description Next recent model
                             * @default f2
                             */
                            model_cycle_recent: string;
                            /**
                             * @description Previous recent model
                             * @default shift+f2
                             */
                            model_cycle_recent_reverse: string;
                            /**
                             * @description List agents
                             * @default <leader>a
                             */
                            agent_list: string;
                            /**
                             * @description Next agent
                             * @default tab
                             */
                            agent_cycle: string;
                            /**
                             * @description Previous agent
                             * @default shift+tab
                             */
                            agent_cycle_reverse: string;
                            /**
                             * @description Clear input field
                             * @default ctrl+c
                             */
                            input_clear: string;
                            /**
                             * @description Paste from clipboard
                             * @default ctrl+v
                             */
                            input_paste: string;
                            /**
                             * @description Submit input
                             * @default enter
                             */
                            input_submit: string;
                            /**
                             * @description Insert newline in input
                             * @default shift+enter,ctrl+j
                             */
                            input_newline: string;
                            /**
                             * @description @deprecated use agent_cycle. Next mode
                             * @default none
                             */
                            switch_mode: string;
                            /**
                             * @description @deprecated use agent_cycle_reverse. Previous mode
                             * @default none
                             */
                            switch_mode_reverse: string;
                            /**
                             * @description @deprecated use agent_cycle. Next agent
                             * @default tab
                             */
                            switch_agent: string;
                            /**
                             * @description @deprecated use agent_cycle_reverse. Previous agent
                             * @default shift+tab
                             */
                            switch_agent_reverse: string;
                            /**
                             * @description @deprecated Currently not available. List files
                             * @default none
                             */
                            file_list: string;
                            /**
                             * @description @deprecated Close file
                             * @default none
                             */
                            file_close: string;
                            /**
                             * @description @deprecated Search file
                             * @default none
                             */
                            file_search: string;
                            /**
                             * @description @deprecated Split/unified diff
                             * @default none
                             */
                            file_diff_toggle: string;
                            /**
                             * @description @deprecated Navigate to previous message
                             * @default none
                             */
                            messages_previous: string;
                            /**
                             * @description @deprecated Navigate to next message
                             * @default none
                             */
                            messages_next: string;
                            /**
                             * @description @deprecated Toggle layout
                             * @default none
                             */
                            messages_layout_toggle: string;
                            /**
                             * @description @deprecated use messages_undo. Revert message
                             * @default none
                             */
                            messages_revert: string;
                        };
                        /** @description TUI specific settings */
                        tui?: {
                            /**
                             * @description TUI scroll speed
                             * @default 2
                             */
                            scroll_speed: number;
                        };
                        /** @description Command configuration, see https://opencode.ai/docs/commands */
                        command?: {
                            [key: string]: {
                                template: string;
                                description?: string;
                                agent?: string;
                                model?: string;
                            };
                        };
                        plugin?: string[];
                        snapshot?: boolean;
                        /**
                         * @description Control sharing behavior:'manual' allows manual sharing via commands, 'auto' enables automatic sharing, 'disabled' disables all sharing
                         * @enum {string}
                         */
                        share?: "manual" | "auto" | "disabled";
                        /** @description @deprecated Use 'share' field instead. Share newly created sessions automatically */
                        autoshare?: boolean;
                        /** @description Automatically update to the latest version */
                        autoupdate?: boolean;
                        /** @description Disable providers that are loaded automatically */
                        disabled_providers?: string[];
                        /** @description Model to use in the format of provider/model, eg anthropic/claude-2 */
                        model?: string;
                        /** @description Small model to use for tasks like title generation in the format of provider/model */
                        small_model?: string;
                        /** @description Custom username to display in conversations instead of system username */
                        username?: string;
                        /** @description @deprecated Use `agent` field instead. */
                        mode?: {
                            build?: {
                                model?: string;
                                temperature?: number;
                                top_p?: number;
                                prompt?: string;
                                tools?: {
                                    [key: string]: boolean;
                                };
                                disable?: boolean;
                                /** @description Description of when to use the agent */
                                description?: string;
                                mode?: "subagent" | "primary" | "all";
                                permission?: {
                                    edit?: "ask" | "allow" | "deny";
                                    bash?: ("ask" | "allow" | "deny") | {
                                        [key: string]: "ask" | "allow" | "deny";
                                    };
                                    webfetch?: "ask" | "allow" | "deny";
                                };
                            } & {
                                [key: string]: unknown;
                            };
                            plan?: {
                                model?: string;
                                temperature?: number;
                                top_p?: number;
                                prompt?: string;
                                tools?: {
                                    [key: string]: boolean;
                                };
                                disable?: boolean;
                                /** @description Description of when to use the agent */
                                description?: string;
                                mode?: "subagent" | "primary" | "all";
                                permission?: {
                                    edit?: "ask" | "allow" | "deny";
                                    bash?: ("ask" | "allow" | "deny") | {
                                        [key: string]: "ask" | "allow" | "deny";
                                    };
                                    webfetch?: "ask" | "allow" | "deny";
                                };
                            } & {
                                [key: string]: unknown;
                            };
                        } & {
                            [key: string]: {
                                model?: string;
                                temperature?: number;
                                top_p?: number;
                                prompt?: string;
                                tools?: {
                                    [key: string]: boolean;
                                };
                                disable?: boolean;
                                /** @description Description of when to use the agent */
                                description?: string;
                                mode?: "subagent" | "primary" | "all";
                                permission?: {
                                    edit?: "ask" | "allow" | "deny";
                                    bash?: ("ask" | "allow" | "deny") | {
                                        [key: string]: "ask" | "allow" | "deny";
                                    };
                                    webfetch?: "ask" | "allow" | "deny";
                                };
                            } & {
                                [key: string]: unknown;
                            };
                        };
                        /** @description Agent configuration, see https://opencode.ai/docs/agent */
                        agent?: {
                            plan?: {
                                model?: string;
                                temperature?: number;
                                top_p?: number;
                                prompt?: string;
                                tools?: {
                                    [key: string]: boolean;
                                };
                                disable?: boolean;
                                /** @description Description of when to use the agent */
                                description?: string;
                                mode?: "subagent" | "primary" | "all";
                                permission?: {
                                    edit?: "ask" | "allow" | "deny";
                                    bash?: ("ask" | "allow" | "deny") | {
                                        [key: string]: "ask" | "allow" | "deny";
                                    };
                                    webfetch?: "ask" | "allow" | "deny";
                                };
                            } & {
                                [key: string]: unknown;
                            };
                            build?: {
                                model?: string;
                                temperature?: number;
                                top_p?: number;
                                prompt?: string;
                                tools?: {
                                    [key: string]: boolean;
                                };
                                disable?: boolean;
                                /** @description Description of when to use the agent */
                                description?: string;
                                mode?: "subagent" | "primary" | "all";
                                permission?: {
                                    edit?: "ask" | "allow" | "deny";
                                    bash?: ("ask" | "allow" | "deny") | {
                                        [key: string]: "ask" | "allow" | "deny";
                                    };
                                    webfetch?: "ask" | "allow" | "deny";
                                };
                            } & {
                                [key: string]: unknown;
                            };
                            general?: {
                                model?: string;
                                temperature?: number;
                                top_p?: number;
                                prompt?: string;
                                tools?: {
                                    [key: string]: boolean;
                                };
                                disable?: boolean;
                                /** @description Description of when to use the agent */
                                description?: string;
                                mode?: "subagent" | "primary" | "all";
                                permission?: {
                                    edit?: "ask" | "allow" | "deny";
                                    bash?: ("ask" | "allow" | "deny") | {
                                        [key: string]: "ask" | "allow" | "deny";
                                    };
                                    webfetch?: "ask" | "allow" | "deny";
                                };
                            } & {
                                [key: string]: unknown;
                            };
                        } & {
                            [key: string]: {
                                model?: string;
                                temperature?: number;
                                top_p?: number;
                                prompt?: string;
                                tools?: {
                                    [key: string]: boolean;
                                };
                                disable?: boolean;
                                /** @description Description of when to use the agent */
                                description?: string;
                                mode?: "subagent" | "primary" | "all";
                                permission?: {
                                    edit?: "ask" | "allow" | "deny";
                                    bash?: ("ask" | "allow" | "deny") | {
                                        [key: string]: "ask" | "allow" | "deny";
                                    };
                                    webfetch?: "ask" | "allow" | "deny";
                                };
                            } & {
                                [key: string]: unknown;
                            };
                        };
                        /** @description Custom provider configurations and model overrides */
                        provider?: {
                            [key: string]: {
                                api?: string;
                                name?: string;
                                env?: string[];
                                id?: string;
                                npm?: string;
                                models?: {
                                    [key: string]: {
                                        id?: string;
                                        name?: string;
                                        release_date?: string;
                                        attachment?: boolean;
                                        reasoning?: boolean;
                                        temperature?: boolean;
                                        tool_call?: boolean;
                                        cost?: {
                                            input: number;
                                            output: number;
                                            cache_read?: number;
                                            cache_write?: number;
                                        };
                                        limit?: {
                                            context: number;
                                            output: number;
                                        };
                                        options?: {
                                            [key: string]: unknown;
                                        };
                                    };
                                };
                                options?: {
                                    apiKey?: string;
                                    baseURL?: string;
                                } & {
                                    [key: string]: unknown;
                                };
                            };
                        };
                        /** @description MCP (Model Context Protocol) server configurations */
                        mcp?: {
                            [key: string]: {
                                /**
                                 * @description Type of MCP server connection
                                 * @constant
                                 */
                                type: "local";
                                /** @description Command and arguments to run the MCP server */
                                command: string[];
                                /** @description Environment variables to set when running the MCP server */
                                environment?: {
                                    [key: string]: string;
                                };
                                /** @description Enable or disable the MCP server on startup */
                                enabled?: boolean;
                            } | {
                                /**
                                 * @description Type of MCP server connection
                                 * @constant
                                 */
                                type: "remote";
                                /** @description URL of the remote MCP server */
                                url: string;
                                /** @description Enable or disable the MCP server on startup */
                                enabled?: boolean;
                                /** @description Headers to send with the request */
                                headers?: {
                                    [key: string]: string;
                                };
                            };
                        };
                        formatter?: {
                            [key: string]: {
                                disabled?: boolean;
                                command?: string[];
                                environment?: {
                                    [key: string]: string;
                                };
                                extensions?: string[];
                            };
                        };
                        lsp?: {
                            [key: string]: {
                                /** @constant */
                                disabled: true;
                            } | {
                                command: string[];
                                extensions?: string[];
                                disabled?: boolean;
                                env?: {
                                    [key: string]: string;
                                };
                                initialization?: {
                                    [key: string]: unknown;
                                };
                            };
                        };
                        /** @description Additional instruction files or patterns to include */
                        instructions?: string[];
                        /**
                         * @description @deprecated Always uses stretch layout.
                         * @enum {string}
                         */
                        layout?: "auto" | "stretch";
                        permission?: {
                            edit?: "ask" | "allow" | "deny";
                            bash?: ("ask" | "allow" | "deny") | {
                                [key: string]: "ask" | "allow" | "deny";
                            };
                            webfetch?: "ask" | "allow" | "deny";
                        };
                        tools?: {
                            [key: string]: boolean;
                        };
                        experimental?: {
                            hook?: {
                                file_edited?: {
                                    [key: string]: {
                                        command: string[];
                                        environment?: {
                                            [key: string]: string;
                                        };
                                    }[];
                                };
                                session_completed?: {
                                    command: string[];
                                    environment?: {
                                        [key: string]: string;
                                    };
                                }[];
                            };
                            promptOptimization?: {
                                /** @default false */
                                enabled: boolean;
                                model?: {
                                    providerID: string;
                                    modelID: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    "health.get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description System health information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: string;
                        timestamp: number;
                        uptime: number;
                        memory: {
                            used: number;
                            total: number;
                            free: number;
                        };
                    };
                };
            };
        };
    };
    "session.list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of sessions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        parentID?: string;
                        share?: {
                            url: string;
                        };
                        title: string;
                        version: string;
                        time: {
                            created: number;
                            updated: number;
                        };
                        revert?: {
                            messageID: string;
                            partID?: string;
                            snapshot?: string;
                            diff?: string;
                        };
                    }[];
                };
            };
        };
    };
    "session.create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    parentID?: string;
                    title?: string;
                };
            };
        };
        responses: {
            /** @description Successfully created session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        parentID?: string;
                        share?: {
                            url: string;
                        };
                        title: string;
                        version: string;
                        time: {
                            created: number;
                            updated: number;
                        };
                        revert?: {
                            messageID: string;
                            partID?: string;
                            snapshot?: string;
                            diff?: string;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
        };
    };
    "session.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        parentID?: string;
                        share?: {
                            url: string;
                        };
                        title: string;
                        version: string;
                        time: {
                            created: number;
                            updated: number;
                        };
                        revert?: {
                            messageID: string;
                            partID?: string;
                            snapshot?: string;
                            diff?: string;
                        };
                    };
                };
            };
        };
    };
    "session.delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    "session.update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    title?: string;
                };
            };
        };
        responses: {
            /** @description Successfully updated session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        parentID?: string;
                        share?: {
                            url: string;
                        };
                        title: string;
                        version: string;
                        time: {
                            created: number;
                            updated: number;
                        };
                        revert?: {
                            messageID: string;
                            partID?: string;
                            snapshot?: string;
                            diff?: string;
                        };
                    };
                };
            };
        };
    };
    "session.children": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of children */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        parentID?: string;
                        share?: {
                            url: string;
                        };
                        title: string;
                        version: string;
                        time: {
                            created: number;
                            updated: number;
                        };
                        revert?: {
                            messageID: string;
                            partID?: string;
                            snapshot?: string;
                            diff?: string;
                        };
                    }[];
                };
            };
        };
    };
    "session.init": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    messageID: string;
                    providerID: string;
                    modelID: string;
                };
            };
        };
        responses: {
            /** @description 200 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    "session.abort": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Aborted session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    "session.share": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully shared session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        parentID?: string;
                        share?: {
                            url: string;
                        };
                        title: string;
                        version: string;
                        time: {
                            created: number;
                            updated: number;
                        };
                        revert?: {
                            messageID: string;
                            partID?: string;
                            snapshot?: string;
                            diff?: string;
                        };
                    };
                };
            };
        };
    };
    "session.unshare": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully unshared session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        parentID?: string;
                        share?: {
                            url: string;
                        };
                        title: string;
                        version: string;
                        time: {
                            created: number;
                            updated: number;
                        };
                        revert?: {
                            messageID: string;
                            partID?: string;
                            snapshot?: string;
                            diff?: string;
                        };
                    };
                };
            };
        };
    };
    "session.summarize": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    providerID: string;
                    modelID: string;
                };
            };
        };
        responses: {
            /** @description Summarized session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    "session.messages": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of messages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        info: {
                            id: string;
                            sessionID: string;
                            /** @constant */
                            role: "user";
                            time: {
                                created: number;
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            /** @constant */
                            role: "assistant";
                            time: {
                                created: number;
                                completed?: number;
                            };
                            error?: {
                                /** @constant */
                                name: "ProviderAuthError";
                                data: {
                                    providerID: string;
                                    message: string;
                                };
                            } | {
                                /** @constant */
                                name: "UnknownError";
                                data: {
                                    message: string;
                                };
                            } | {
                                /** @constant */
                                name: "MessageOutputLengthError";
                                data: Record<string, never>;
                            } | {
                                /** @constant */
                                name: "MessageAbortedError";
                                data: Record<string, never>;
                            };
                            system: string[];
                            modelID: string;
                            providerID: string;
                            mode: string;
                            path: {
                                cwd: string;
                                root: string;
                            };
                            summary?: boolean;
                            cost: number;
                            tokens: {
                                input: number;
                                output: number;
                                reasoning: number;
                                cache: {
                                    read: number;
                                    write: number;
                                };
                            };
                        };
                        parts: ({
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "text";
                            text: string;
                            synthetic?: boolean;
                            time?: {
                                start: number;
                                end?: number;
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "reasoning";
                            text: string;
                            metadata?: {
                                [key: string]: unknown;
                            };
                            time: {
                                start: number;
                                end?: number;
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "file";
                            mime: string;
                            filename?: string;
                            url: string;
                            source?: {
                                text: {
                                    value: string;
                                    start: number;
                                    end: number;
                                };
                                /** @constant */
                                type: "file";
                                path: string;
                            } | {
                                text: {
                                    value: string;
                                    start: number;
                                    end: number;
                                };
                                /** @constant */
                                type: "symbol";
                                path: string;
                                range: {
                                    start: {
                                        line: number;
                                        character: number;
                                    };
                                    end: {
                                        line: number;
                                        character: number;
                                    };
                                };
                                name: string;
                                kind: number;
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "tool";
                            callID: string;
                            tool: string;
                            state: {
                                /** @constant */
                                status: "pending";
                            } | {
                                /** @constant */
                                status: "running";
                                input?: unknown;
                                title?: string;
                                metadata?: {
                                    [key: string]: unknown;
                                };
                                time: {
                                    start: number;
                                };
                            } | {
                                /** @constant */
                                status: "completed";
                                input: {
                                    [key: string]: unknown;
                                };
                                output: string;
                                title: string;
                                metadata: {
                                    [key: string]: unknown;
                                };
                                time: {
                                    start: number;
                                    end: number;
                                };
                            } | {
                                /** @constant */
                                status: "error";
                                input: {
                                    [key: string]: unknown;
                                };
                                error: string;
                                metadata?: {
                                    [key: string]: unknown;
                                };
                                time: {
                                    start: number;
                                    end: number;
                                };
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "step-start";
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "step-finish";
                            cost: number;
                            tokens: {
                                input: number;
                                output: number;
                                reasoning: number;
                                cache: {
                                    read: number;
                                    write: number;
                                };
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "snapshot";
                            snapshot: string;
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "patch";
                            hash: string;
                            files: string[];
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "agent";
                            name: string;
                            source?: {
                                value: string;
                                start: number;
                                end: number;
                            };
                        })[];
                    }[];
                };
            };
        };
    };
    "session.chat": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    messageID?: string;
                    providerID: string;
                    modelID: string;
                    agent?: string;
                    system?: string;
                    tools?: {
                        [key: string]: boolean;
                    };
                    parts: ({
                        id?: string;
                        /** @constant */
                        type: "text";
                        text: string;
                        synthetic?: boolean;
                        time?: {
                            start: number;
                            end?: number;
                        };
                    } | {
                        id?: string;
                        /** @constant */
                        type: "file";
                        mime: string;
                        filename?: string;
                        url: string;
                        source?: {
                            text: {
                                value: string;
                                start: number;
                                end: number;
                            };
                            /** @constant */
                            type: "file";
                            path: string;
                        } | {
                            text: {
                                value: string;
                                start: number;
                                end: number;
                            };
                            /** @constant */
                            type: "symbol";
                            path: string;
                            range: {
                                start: {
                                    line: number;
                                    character: number;
                                };
                                end: {
                                    line: number;
                                    character: number;
                                };
                            };
                            name: string;
                            kind: number;
                        };
                    } | {
                        id?: string;
                        /** @constant */
                        type: "agent";
                        name: string;
                        source?: {
                            value: string;
                            start: number;
                            end: number;
                        };
                    })[];
                };
            };
        };
        responses: {
            /** @description Created message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        info: {
                            id: string;
                            sessionID: string;
                            /** @constant */
                            role: "assistant";
                            time: {
                                created: number;
                                completed?: number;
                            };
                            error?: {
                                /** @constant */
                                name: "ProviderAuthError";
                                data: {
                                    providerID: string;
                                    message: string;
                                };
                            } | {
                                /** @constant */
                                name: "UnknownError";
                                data: {
                                    message: string;
                                };
                            } | {
                                /** @constant */
                                name: "MessageOutputLengthError";
                                data: Record<string, never>;
                            } | {
                                /** @constant */
                                name: "MessageAbortedError";
                                data: Record<string, never>;
                            };
                            system: string[];
                            modelID: string;
                            providerID: string;
                            mode: string;
                            path: {
                                cwd: string;
                                root: string;
                            };
                            summary?: boolean;
                            cost: number;
                            tokens: {
                                input: number;
                                output: number;
                                reasoning: number;
                                cache: {
                                    read: number;
                                    write: number;
                                };
                            };
                        };
                        parts: ({
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "text";
                            text: string;
                            synthetic?: boolean;
                            time?: {
                                start: number;
                                end?: number;
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "reasoning";
                            text: string;
                            metadata?: {
                                [key: string]: unknown;
                            };
                            time: {
                                start: number;
                                end?: number;
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "file";
                            mime: string;
                            filename?: string;
                            url: string;
                            source?: {
                                text: {
                                    value: string;
                                    start: number;
                                    end: number;
                                };
                                /** @constant */
                                type: "file";
                                path: string;
                            } | {
                                text: {
                                    value: string;
                                    start: number;
                                    end: number;
                                };
                                /** @constant */
                                type: "symbol";
                                path: string;
                                range: {
                                    start: {
                                        line: number;
                                        character: number;
                                    };
                                    end: {
                                        line: number;
                                        character: number;
                                    };
                                };
                                name: string;
                                kind: number;
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "tool";
                            callID: string;
                            tool: string;
                            state: {
                                /** @constant */
                                status: "pending";
                            } | {
                                /** @constant */
                                status: "running";
                                input?: unknown;
                                title?: string;
                                metadata?: {
                                    [key: string]: unknown;
                                };
                                time: {
                                    start: number;
                                };
                            } | {
                                /** @constant */
                                status: "completed";
                                input: {
                                    [key: string]: unknown;
                                };
                                output: string;
                                title: string;
                                metadata: {
                                    [key: string]: unknown;
                                };
                                time: {
                                    start: number;
                                    end: number;
                                };
                            } | {
                                /** @constant */
                                status: "error";
                                input: {
                                    [key: string]: unknown;
                                };
                                error: string;
                                metadata?: {
                                    [key: string]: unknown;
                                };
                                time: {
                                    start: number;
                                    end: number;
                                };
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "step-start";
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "step-finish";
                            cost: number;
                            tokens: {
                                input: number;
                                output: number;
                                reasoning: number;
                                cache: {
                                    read: number;
                                    write: number;
                                };
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "snapshot";
                            snapshot: string;
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "patch";
                            hash: string;
                            files: string[];
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "agent";
                            name: string;
                            source?: {
                                value: string;
                                start: number;
                                end: number;
                            };
                        })[];
                    };
                };
            };
        };
    };
    "session.message": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                messageID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        info: {
                            id: string;
                            sessionID: string;
                            /** @constant */
                            role: "user";
                            time: {
                                created: number;
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            /** @constant */
                            role: "assistant";
                            time: {
                                created: number;
                                completed?: number;
                            };
                            error?: {
                                /** @constant */
                                name: "ProviderAuthError";
                                data: {
                                    providerID: string;
                                    message: string;
                                };
                            } | {
                                /** @constant */
                                name: "UnknownError";
                                data: {
                                    message: string;
                                };
                            } | {
                                /** @constant */
                                name: "MessageOutputLengthError";
                                data: Record<string, never>;
                            } | {
                                /** @constant */
                                name: "MessageAbortedError";
                                data: Record<string, never>;
                            };
                            system: string[];
                            modelID: string;
                            providerID: string;
                            mode: string;
                            path: {
                                cwd: string;
                                root: string;
                            };
                            summary?: boolean;
                            cost: number;
                            tokens: {
                                input: number;
                                output: number;
                                reasoning: number;
                                cache: {
                                    read: number;
                                    write: number;
                                };
                            };
                        };
                        parts: ({
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "text";
                            text: string;
                            synthetic?: boolean;
                            time?: {
                                start: number;
                                end?: number;
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "reasoning";
                            text: string;
                            metadata?: {
                                [key: string]: unknown;
                            };
                            time: {
                                start: number;
                                end?: number;
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "file";
                            mime: string;
                            filename?: string;
                            url: string;
                            source?: {
                                text: {
                                    value: string;
                                    start: number;
                                    end: number;
                                };
                                /** @constant */
                                type: "file";
                                path: string;
                            } | {
                                text: {
                                    value: string;
                                    start: number;
                                    end: number;
                                };
                                /** @constant */
                                type: "symbol";
                                path: string;
                                range: {
                                    start: {
                                        line: number;
                                        character: number;
                                    };
                                    end: {
                                        line: number;
                                        character: number;
                                    };
                                };
                                name: string;
                                kind: number;
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "tool";
                            callID: string;
                            tool: string;
                            state: {
                                /** @constant */
                                status: "pending";
                            } | {
                                /** @constant */
                                status: "running";
                                input?: unknown;
                                title?: string;
                                metadata?: {
                                    [key: string]: unknown;
                                };
                                time: {
                                    start: number;
                                };
                            } | {
                                /** @constant */
                                status: "completed";
                                input: {
                                    [key: string]: unknown;
                                };
                                output: string;
                                title: string;
                                metadata: {
                                    [key: string]: unknown;
                                };
                                time: {
                                    start: number;
                                    end: number;
                                };
                            } | {
                                /** @constant */
                                status: "error";
                                input: {
                                    [key: string]: unknown;
                                };
                                error: string;
                                metadata?: {
                                    [key: string]: unknown;
                                };
                                time: {
                                    start: number;
                                    end: number;
                                };
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "step-start";
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "step-finish";
                            cost: number;
                            tokens: {
                                input: number;
                                output: number;
                                reasoning: number;
                                cache: {
                                    read: number;
                                    write: number;
                                };
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "snapshot";
                            snapshot: string;
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "patch";
                            hash: string;
                            files: string[];
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "agent";
                            name: string;
                            source?: {
                                value: string;
                                start: number;
                                end: number;
                            };
                        })[];
                    };
                };
            };
        };
    };
    "session.command": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    messageID?: string;
                    agent?: string;
                    model?: string;
                    arguments: string;
                    command: string;
                };
            };
        };
        responses: {
            /** @description Created message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        info: {
                            id: string;
                            sessionID: string;
                            /** @constant */
                            role: "assistant";
                            time: {
                                created: number;
                                completed?: number;
                            };
                            error?: {
                                /** @constant */
                                name: "ProviderAuthError";
                                data: {
                                    providerID: string;
                                    message: string;
                                };
                            } | {
                                /** @constant */
                                name: "UnknownError";
                                data: {
                                    message: string;
                                };
                            } | {
                                /** @constant */
                                name: "MessageOutputLengthError";
                                data: Record<string, never>;
                            } | {
                                /** @constant */
                                name: "MessageAbortedError";
                                data: Record<string, never>;
                            };
                            system: string[];
                            modelID: string;
                            providerID: string;
                            mode: string;
                            path: {
                                cwd: string;
                                root: string;
                            };
                            summary?: boolean;
                            cost: number;
                            tokens: {
                                input: number;
                                output: number;
                                reasoning: number;
                                cache: {
                                    read: number;
                                    write: number;
                                };
                            };
                        };
                        parts: ({
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "text";
                            text: string;
                            synthetic?: boolean;
                            time?: {
                                start: number;
                                end?: number;
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "reasoning";
                            text: string;
                            metadata?: {
                                [key: string]: unknown;
                            };
                            time: {
                                start: number;
                                end?: number;
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "file";
                            mime: string;
                            filename?: string;
                            url: string;
                            source?: {
                                text: {
                                    value: string;
                                    start: number;
                                    end: number;
                                };
                                /** @constant */
                                type: "file";
                                path: string;
                            } | {
                                text: {
                                    value: string;
                                    start: number;
                                    end: number;
                                };
                                /** @constant */
                                type: "symbol";
                                path: string;
                                range: {
                                    start: {
                                        line: number;
                                        character: number;
                                    };
                                    end: {
                                        line: number;
                                        character: number;
                                    };
                                };
                                name: string;
                                kind: number;
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "tool";
                            callID: string;
                            tool: string;
                            state: {
                                /** @constant */
                                status: "pending";
                            } | {
                                /** @constant */
                                status: "running";
                                input?: unknown;
                                title?: string;
                                metadata?: {
                                    [key: string]: unknown;
                                };
                                time: {
                                    start: number;
                                };
                            } | {
                                /** @constant */
                                status: "completed";
                                input: {
                                    [key: string]: unknown;
                                };
                                output: string;
                                title: string;
                                metadata: {
                                    [key: string]: unknown;
                                };
                                time: {
                                    start: number;
                                    end: number;
                                };
                            } | {
                                /** @constant */
                                status: "error";
                                input: {
                                    [key: string]: unknown;
                                };
                                error: string;
                                metadata?: {
                                    [key: string]: unknown;
                                };
                                time: {
                                    start: number;
                                    end: number;
                                };
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "step-start";
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "step-finish";
                            cost: number;
                            tokens: {
                                input: number;
                                output: number;
                                reasoning: number;
                                cache: {
                                    read: number;
                                    write: number;
                                };
                            };
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "snapshot";
                            snapshot: string;
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "patch";
                            hash: string;
                            files: string[];
                        } | {
                            id: string;
                            sessionID: string;
                            messageID: string;
                            /** @constant */
                            type: "agent";
                            name: string;
                            source?: {
                                value: string;
                                start: number;
                                end: number;
                            };
                        })[];
                    };
                };
            };
        };
    };
    "session.shell": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    agent: string;
                    command: string;
                };
            };
        };
        responses: {
            /** @description Created message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        sessionID: string;
                        /** @constant */
                        role: "assistant";
                        time: {
                            created: number;
                            completed?: number;
                        };
                        error?: {
                            /** @constant */
                            name: "ProviderAuthError";
                            data: {
                                providerID: string;
                                message: string;
                            };
                        } | {
                            /** @constant */
                            name: "UnknownError";
                            data: {
                                message: string;
                            };
                        } | {
                            /** @constant */
                            name: "MessageOutputLengthError";
                            data: Record<string, never>;
                        } | {
                            /** @constant */
                            name: "MessageAbortedError";
                            data: Record<string, never>;
                        };
                        system: string[];
                        modelID: string;
                        providerID: string;
                        mode: string;
                        path: {
                            cwd: string;
                            root: string;
                        };
                        summary?: boolean;
                        cost: number;
                        tokens: {
                            input: number;
                            output: number;
                            reasoning: number;
                            cache: {
                                read: number;
                                write: number;
                            };
                        };
                    };
                };
            };
        };
    };
    "session.revert": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    messageID: string;
                    partID?: string;
                };
            };
        };
        responses: {
            /** @description Updated session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        parentID?: string;
                        share?: {
                            url: string;
                        };
                        title: string;
                        version: string;
                        time: {
                            created: number;
                            updated: number;
                        };
                        revert?: {
                            messageID: string;
                            partID?: string;
                            snapshot?: string;
                            diff?: string;
                        };
                    };
                };
            };
        };
    };
    "session.unrevert": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Updated session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        parentID?: string;
                        share?: {
                            url: string;
                        };
                        title: string;
                        version: string;
                        time: {
                            created: number;
                            updated: number;
                        };
                        revert?: {
                            messageID: string;
                            partID?: string;
                            snapshot?: string;
                            diff?: string;
                        };
                    };
                };
            };
        };
    };
    postSessionByIdPermissionsByPermissionID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                permissionID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    response: "once" | "always" | "reject";
                };
            };
        };
        responses: {
            /** @description Permission processed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    "command.list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of commands */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        name: string;
                        description?: string;
                        agent?: string;
                        model?: string;
                        template: string;
                    }[];
                };
            };
        };
    };
    "config.providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of providers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        providers: {
                            api?: string;
                            name: string;
                            env: string[];
                            id: string;
                            npm?: string;
                            models: {
                                [key: string]: {
                                    id: string;
                                    name: string;
                                    release_date: string;
                                    attachment: boolean;
                                    reasoning: boolean;
                                    temperature: boolean;
                                    tool_call: boolean;
                                    cost: {
                                        input: number;
                                        output: number;
                                        cache_read?: number;
                                        cache_write?: number;
                                    };
                                    limit: {
                                        context: number;
                                        output: number;
                                    };
                                    options: {
                                        [key: string]: unknown;
                                    };
                                };
                            };
                        }[];
                        default: {
                            [key: string]: string;
                        };
                    };
                };
            };
        };
    };
    "find.text": {
        parameters: {
            query: {
                pattern: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Matches */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        path: {
                            text: string;
                        };
                        lines: {
                            text: string;
                        };
                        line_number: number;
                        absolute_offset: number;
                        submatches: {
                            match: {
                                text: string;
                            };
                            start: number;
                            end: number;
                        }[];
                    }[];
                };
            };
        };
    };
    "find.files": {
        parameters: {
            query: {
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description File paths */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    "find.symbols": {
        parameters: {
            query: {
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Symbols */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        name: string;
                        kind: number;
                        location: {
                            uri: string;
                            range: {
                                start: {
                                    line: number;
                                    character: number;
                                };
                                end: {
                                    line: number;
                                    character: number;
                                };
                            };
                        };
                    }[];
                };
            };
        };
    };
    "file.list": {
        parameters: {
            query: {
                path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Files and directories */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        name: string;
                        path: string;
                        /** @enum {string} */
                        type: "file" | "directory";
                        ignored: boolean;
                    }[];
                };
            };
        };
    };
    "file.read": {
        parameters: {
            query: {
                path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description File content */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        type: "raw" | "patch";
                        content: string;
                    };
                };
            };
        };
    };
    "file.status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description File status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        path: string;
                        added: number;
                        removed: number;
                        /** @enum {string} */
                        status: "added" | "deleted" | "modified";
                    }[];
                };
            };
        };
    };
    "app.log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Service name for the log entry */
                    service: string;
                    /**
                     * @description Log level
                     * @enum {string}
                     */
                    level: "debug" | "info" | "error" | "warn";
                    /** @description Log message */
                    message: string;
                    /** @description Additional metadata for the log entry */
                    extra?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description Log entry written successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    "app.agents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of agents */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        name: string;
                        description?: string;
                        mode: "subagent" | "primary" | "all";
                        builtIn: boolean;
                        topP?: number;
                        temperature?: number;
                        permission: {
                            edit: "ask" | "allow" | "deny";
                            bash: {
                                [key: string]: "ask" | "allow" | "deny";
                            };
                            webfetch?: "ask" | "allow" | "deny";
                        };
                        model?: {
                            modelID: string;
                            providerID: string;
                        };
                        prompt?: string;
                        tools: {
                            [key: string]: boolean;
                        };
                        options: {
                            [key: string]: unknown;
                        };
                    }[];
                };
            };
        };
    };
    "tui.appendPrompt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    text: string;
                };
            };
        };
        responses: {
            /** @description Prompt processed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    "tui.openHelp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Help dialog opened successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    "tui.openSessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Session dialog opened successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    "tui.openThemes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Theme dialog opened successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    "tui.openModels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Model dialog opened successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    "tui.submitPrompt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Prompt submitted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    "tui.clearPrompt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Prompt cleared successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    "tui.executeCommand": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    command: string;
                };
            };
        };
        responses: {
            /** @description Command executed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    "tui.showToast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    title?: string;
                    message: string;
                    /** @enum {string} */
                    variant: "info" | "success" | "warning" | "error";
                };
            };
        };
        responses: {
            /** @description Toast notification shown successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    "auth.set": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @constant */
                    type: "oauth";
                    refresh: string;
                    access: string;
                    expires: number;
                } | {
                    /** @constant */
                    type: "api";
                    key: string;
                } | {
                    /** @constant */
                    type: "wellknown";
                    key: string;
                    token: string;
                };
            };
        };
        responses: {
            /** @description Successfully set authentication credentials */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
        };
    };
}
